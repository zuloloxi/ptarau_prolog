; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\A17\prolog\ptarau_prolog\src\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06DHKIJHFC@bp?4dll?$AA@			; `string'
PUBLIC	_init_bp
EXTRN	_init_bp0:PROC
EXTRN	___iob_func:PROC
;	COMDAT ??_C@_06DHKIJHFC@bp?4dll?$AA@
; File c:\a17\prolog\ptarau_prolog\src\main.c
CONST	SEGMENT
??_C@_06DHKIJHFC@bp?4dll?$AA@ DB 'bp.dll', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _init_bp
_TEXT	SEGMENT
_default_argv$ = -8					; size = 8
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_bp_stdin$ = 16						; size = 4
_bp_stdout$ = 20					; size = 4
_init_bp PROC						; COMDAT

; 16   : DLL_EXPORT(void*) init_bp(bp_long argc, char **argv, FILE* bp_stdin, FILE* bp_stdout) {

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi

; 17   :   
; 18   :    char *default_argv[]={"bp.dll",NULL};
; 19   :    char **bp_argv;
; 20   :    if(NULL==bp_stdin) bp_stdin=stdin;

  00004	8b 74 24 18	 mov	 esi, DWORD PTR _bp_stdin$[esp+8]
  00008	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR _default_argv$[esp+12], OFFSET ??_C@_06DHKIJHFC@bp?4dll?$AA@
  00010	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _default_argv$[esp+16], 0
  00018	85 f6		 test	 esi, esi
  0001a	75 07		 jne	 SHORT $LN4@init_bp
  0001c	e8 00 00 00 00	 call	 ___iob_func
  00021	8b f0		 mov	 esi, eax
$LN4@init_bp:

; 21   :    if(NULL==bp_stdout) bp_stdout=stdout;

  00023	8b 44 24 1c	 mov	 eax, DWORD PTR _bp_stdout$[esp+8]
  00027	85 c0		 test	 eax, eax
  00029	75 08		 jne	 SHORT $LN3@init_bp
  0002b	e8 00 00 00 00	 call	 ___iob_func
  00030	83 c0 20	 add	 eax, 32			; 00000020H
$LN3@init_bp:

; 22   :    if(NULL==argv) {

  00033	8b 4c 24 14	 mov	 ecx, DWORD PTR _argv$[esp+8]
  00037	85 c9		 test	 ecx, ecx
  00039	75 1a		 jne	 SHORT $LN2@init_bp

; 28   :    
; 29   :    return init_bp0(argc, bp_argv, bp_stdin, bp_stdout);

  0003b	50		 push	 eax
  0003c	8d 4c 24 08	 lea	 ecx, DWORD PTR _default_argv$[esp+16]
  00040	56		 push	 esi
  00041	ba 01 00 00 00	 mov	 edx, 1
  00046	51		 push	 ecx
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 _init_bp0
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	5e		 pop	 esi

; 30   : }

  00051	83 c4 08	 add	 esp, 8
  00054	c3		 ret	 0
$LN2@init_bp:

; 23   :      bp_argv=default_argv; 
; 24   :      argc=1;
; 25   :    }
; 26   :    else 
; 27   :      bp_argv=argv;

  00055	8b 54 24 10	 mov	 edx, DWORD PTR _argc$[esp+8]

; 28   :    
; 29   :    return init_bp0(argc, bp_argv, bp_stdin, bp_stdout);

  00059	50		 push	 eax
  0005a	56		 push	 esi
  0005b	51		 push	 ecx
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _init_bp0
  00062	83 c4 10	 add	 esp, 16			; 00000010H
  00065	5e		 pop	 esi

; 30   : }

  00066	83 c4 08	 add	 esp, 8
  00069	c3		 ret	 0
_init_bp ENDP
_TEXT	ENDS
PUBLIC	_run_bp
EXTRN	_run_bp0:PROC
; Function compile flags: /Ogtpy
;	COMDAT _run_bp
_TEXT	SEGMENT
_retcode$ = -4						; size = 4
_wam$ = 8						; size = 4
_query$ = 12						; size = 4
_run_bp	PROC						; COMDAT

; 32   : DLL_EXPORT(char*) run_bp(void *wam, char *query) {

  00000	51		 push	 ecx

; 33   :    bp_long retcode=0;
; 34   :    return run_bp0((stack)wam,query,&retcode); /* ignores retcode */

  00001	8b 4c 24 0c	 mov	 ecx, DWORD PTR _query$[esp]
  00005	8b 54 24 08	 mov	 edx, DWORD PTR _wam$[esp]
  00009	8d 04 24	 lea	 eax, DWORD PTR _retcode$[esp+4]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	52		 push	 edx
  0000f	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _retcode$[esp+16], 0
  00017	e8 00 00 00 00	 call	 _run_bp0

; 35   : }

  0001c	83 c4 10	 add	 esp, 16			; 00000010H
  0001f	c3		 ret	 0
_run_bp	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BFIHJLJG@halted?0?5code?$AA@		; `string'
PUBLIC	??_C@_0CD@BNJEBNFH@Started?5Prolog?5Runtime?5System?5?$CFd@ ; `string'
PUBLIC	_bp_main
EXTRN	_bp_exit_mes:PROC
EXTRN	_printf:PROC
EXTRN	_init_c:PROC
;	COMDAT ??_C@_0N@BFIHJLJG@halted?0?5code?$AA@
CONST	SEGMENT
??_C@_0N@BFIHJLJG@halted?0?5code?$AA@ DB 'halted, code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BNJEBNFH@Started?5Prolog?5Runtime?5System?5?$CFd@
CONST	SEGMENT
??_C@_0CD@BNJEBNFH@Started?5Prolog?5Runtime?5System?5?$CFd@ DB 'Started P'
	DB	'rolog Runtime System %d.', 0aH, 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _bp_main
_TEXT	SEGMENT
_retcode$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_bp_main PROC						; COMDAT

; 44   : { int ok; bp_long retcode=0; int initcode=0;

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _retcode$[esp+12], 0

; 45   :   void *wam=init_bp(argc,argv,stdin,stdout);

  0000b	e8 00 00 00 00	 call	 ___iob_func
  00010	83 c0 20	 add	 eax, 32			; 00000020H
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ___iob_func
  00019	8b 4c 24 14	 mov	 ecx, DWORD PTR _argc$[esp+12]
  0001d	50		 push	 eax
  0001e	8b 44 24 1c	 mov	 eax, DWORD PTR _argv$[esp+16]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 _init_bp
  00029	8b f0		 mov	 esi, eax

; 46   :   ok=(!!wam);
; 47   :   initcode=init_c();

  0002b	e8 00 00 00 00	 call	 _init_c
  00030	8b f8		 mov	 edi, eax

; 48   :   printf("Started Prolog Runtime System %d.\n",initcode);

  00032	57		 push	 edi
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BNJEBNFH@Started?5Prolog?5Runtime?5System?5?$CFd@
  00038	e8 00 00 00 00	 call	 _printf
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	85 f6		 test	 esi, esi

; 49   :   ok=ok && (initcode>0); /* inialise C-code for the host in c.c */

  00042	74 16		 je	 SHORT $LN2@bp_main
  00044	85 ff		 test	 edi, edi

; 50   : 
; 51   :   if(ok) {

  00046	7e 12		 jle	 SHORT $LN2@bp_main

; 52   : #if 0
; 53   :     /* not used, but possible: see similar code in dir BP_DLL */
; 54   : 
; 55   :     /* query/answer then stop */
; 56   :     char *query;
; 57   :     char *answer;
; 58   :     
; 59   :     query="^(X,(for(X,1,5),>(X,2)))";
; 60   :     answer=run_bp(wam,query);
; 61   :     if(NULL==answer) answer="no";
; 62   :     printf("query=>%s\nanswer=>%s\n",query,answer);
; 63   : 
; 64   :     query="*(I,for(I,1,10))";
; 65   :     answer=run_bp(wam,query);
; 66   :     if(NULL==answer) answer="no";
; 67   :     printf("query=>%s\nanswer=>%s\n",query,answer);
; 68   : 
; 69   :     query="*(:(2,X),member(X,[a,b,c,d]))";
; 70   :     answer=run_bp(wam,query);
; 71   :     if(NULL==answer) answer="no";
; 72   :     printf("query=>%s\nanswer=>%s\n",query,answer);
; 73   : 
; 74   :     ok=1;
; 75   : #else
; 76   :     run_bp0(wam,NULL,&retcode); /* plain toplevel: keeps retcode info */

  00048	8d 54 24 08	 lea	 edx, DWORD PTR _retcode$[esp+12]
  0004c	52		 push	 edx
  0004d	6a 00		 push	 0
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 _run_bp0
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 77   : #endif
; 78   :   }
; 79   :   else 

  00058	eb 08		 jmp	 SHORT $LN1@bp_main
$LN2@bp_main:

; 80   :     retcode=!ok;

  0005a	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR _retcode$[esp+12], 1
$LN1@bp_main:

; 81   :     bp_exit_mes("halted, code",retcode);

  00062	8b 44 24 08	 mov	 eax, DWORD PTR _retcode$[esp+12]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BFIHJLJG@halted?0?5code?$AA@
  0006c	e8 00 00 00 00	 call	 _bp_exit_mes

; 82   :     return retcode;

  00071	8b 44 24 10	 mov	 eax, DWORD PTR _retcode$[esp+20]
  00075	83 c4 08	 add	 esp, 8
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi

; 83   : }

  0007a	59		 pop	 ecx
  0007b	c3		 ret	 0
_bp_main ENDP
_TEXT	ENDS
END
