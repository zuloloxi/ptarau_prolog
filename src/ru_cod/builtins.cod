; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\A17\prolog\ptarau_prolog\src\builtins.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_bp_heap_top
_BSS	SEGMENT
?ctr@?1??new_name@@9@9 DD 01H DUP (?)			; `new_name'::`2'::ctr
_bp_heap_top DD	01H DUP (?)
_BSS	ENDS
EXTRN	_atomtable:DWORD
; Function compile flags: /Ogtpy
; File c:\a17\prolog\ptarau_prolog\src\builtins.c
;	COMDAT _hkey1
_TEXT	SEGMENT
tv226 = 8						; size = 4
_xval$ = 8						; size = 4
_max$ = 12						; size = 4
_hkey1	PROC						; COMDAT

; 67   :   register term xref=C2T(xval);
; 68   :   register bp_long ires;
; 69   :   /*fprintf(STD_err,"HERE hkey1:entering xval=%d, max=%d\n",xval,max);*/
; 70   : 
; 71   :   if(max<0) return -2; /* depth or size limit reached */

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _max$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR _xval$[esp+4]
  0000a	8b de		 mov	 ebx, esi
  0000c	85 d2		 test	 edx, edx
  0000e	79 08		 jns	 SHORT $LN17@hkey1
  00010	5e		 pop	 esi
  00011	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00016	5b		 pop	 ebx

; 98   : }

  00017	c3		 ret	 0
$LN17@hkey1:

; 72   : 
; 73   :   ATOMIZE(xval);

  00018	8b c6		 mov	 eax, esi
  0001a	83 e0 03	 and	 eax, 3
  0001d	74 0d		 je	 SHORT $LN27@hkey1
  0001f	83 f8 01	 cmp	 eax, 1
  00022	74 0a		 je	 SHORT $LN16@hkey1
  00024	f7 c6 00 00 00
	ff		 test	 esi, -16777216		; ff000000H
  0002a	74 02		 je	 SHORT $LN16@hkey1
$LN27@hkey1:
  0002c	8b 36		 mov	 esi, DWORD PTR [esi]
$LN16@hkey1:

; 74   :   if(VAR(xval)) return -1;

  0002e	8b c6		 mov	 eax, esi
  00030	83 e0 03	 and	 eax, 3
  00033	75 06		 jne	 SHORT $LN14@hkey1
  00035	5e		 pop	 esi
  00036	83 c8 ff	 or	 eax, -1
  00039	5b		 pop	 ebx

; 98   : }

  0003a	c3		 ret	 0
$LN14@hkey1:
  0003b	55		 push	 ebp
  0003c	57		 push	 edi

; 75   : 
; 76   :   if(IDENTIFIER(xval)) {

  0003d	83 f8 03	 cmp	 eax, 3
  00040	0f 85 8a 00 00
	00		 jne	 $LN13@hkey1

; 77   :     bp_long n=GETARITY(xval);
; 78   :     bp_long i; bp_long x; term f=xref;
; 79   :     STRING_HASH(NAME(xval),ires,n);

  00046	a1 00 00 00 00	 mov	 eax, DWORD PTR _atomtable
  0004b	8b fe		 mov	 edi, esi
  0004d	c1 ee 02	 shr	 esi, 2
  00050	81 e6 ff ff 3f
	00		 and	 esi, 4194303		; 003fffffH
  00056	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00059	8a 01		 mov	 al, BYTE PTR [ecx]
  0005b	c1 ef 18	 shr	 edi, 24			; 00000018H
  0005e	be 05 15 00 00	 mov	 esi, 5381		; 00001505H
  00063	84 c0		 test	 al, al
  00065	74 13		 je	 SHORT $LN30@hkey1
$LL12@hkey1:
  00067	8b ee		 mov	 ebp, esi
  00069	c1 e5 05	 shl	 ebp, 5
  0006c	0f be c0	 movsx	 eax, al
  0006f	03 f5		 add	 esi, ebp
  00071	41		 inc	 ecx
  00072	03 f0		 add	 esi, eax
  00074	8a 01		 mov	 al, BYTE PTR [ecx]
  00076	84 c0		 test	 al, al
  00078	75 ed		 jne	 SHORT $LL12@hkey1
$LN30@hkey1:
  0007a	8b cf		 mov	 ecx, edi
  0007c	c1 e1 07	 shl	 ecx, 7

; 80   :     /* fprintf(STD_err,"HERE hkey1 %s/%d=>%d\n",NAME(xval),n); */
; 81   :     for(i=1; i<=n; i++) {

  0007f	bd 01 00 00 00	 mov	 ebp, 1
  00084	03 f1		 add	 esi, ecx
  00086	3b fd		 cmp	 edi, ebp
  00088	7c 49		 jl	 SHORT $LN29@hkey1

; 86   :       if(x<0) return x;

  0008a	4a		 dec	 edx
  0008b	89 54 24 14	 mov	 DWORD PTR tv226[esp+12], edx
  0008f	83 c3 04	 add	 ebx, 4
$LL28@hkey1:

; 82   :       xref=f+i;
; 83   :       FDEREF(xref);

  00092	8b cb		 mov	 ecx, ebx
  00094	f6 c3 03	 test	 bl, 3
  00097	75 13		 jne	 SHORT $LN4@hkey1
  00099	8b 03		 mov	 eax, DWORD PTR [ebx]
  0009b	a8 03		 test	 al, 3
  0009d	75 0d		 jne	 SHORT $LN4@hkey1
  0009f	90		 npad	 1
$LL5@hkey1:
  000a0	3b c8		 cmp	 ecx, eax
  000a2	74 08		 je	 SHORT $LN4@hkey1
  000a4	8b c8		 mov	 ecx, eax
  000a6	8b 00		 mov	 eax, DWORD PTR [eax]
  000a8	a8 03		 test	 al, 3
  000aa	74 f4		 je	 SHORT $LL5@hkey1
$LN4@hkey1:

; 84   :       /*fprintf(STD_err,"HERE hkey1:for max=%d i=%d\n",max,i);*/
; 85   :       x=hkey1(T2C(xref),max-1);

  000ac	8b 54 24 14	 mov	 edx, DWORD PTR tv226[esp+12]
  000b0	52		 push	 edx
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 _hkey1
  000b7	83 c4 08	 add	 esp, 8

; 86   :       if(x<0) return x;

  000ba	85 c0		 test	 eax, eax
  000bc	78 1d		 js	 SHORT $LN31@hkey1

; 87   :       ires+=(ires<<7)+x;

  000be	69 f6 81 00 00
	00		 imul	 esi, 129		; 00000081H
  000c4	45		 inc	 ebp
  000c5	03 f0		 add	 esi, eax
  000c7	83 c3 04	 add	 ebx, 4
  000ca	3b ef		 cmp	 ebp, edi
  000cc	7e c4		 jle	 SHORT $LL28@hkey1

; 86   :       if(x<0) return x;

  000ce	eb 03		 jmp	 SHORT $LN29@hkey1
$LN13@hkey1:

; 88   :     }
; 89   :   }
; 90   :   else
; 91   :     ires=OUTPUT_INT(xval);

  000d0	c1 fe 02	 sar	 esi, 2
$LN29@hkey1:

; 92   : 
; 93   :   if(ires<0) ires= -ires;

  000d3	85 f6		 test	 esi, esi
  000d5	79 02		 jns	 SHORT $LN1@hkey1
  000d7	f7 de		 neg	 esi
$LN1@hkey1:

; 94   : 
; 95   :   /*fprintf(STD_err,"HERE hkey1:exiting xval=%d, max=%d\n",xval,max);*/
; 96   : 
; 97   :   return ires;

  000d9	8b c6		 mov	 eax, esi
$LN31@hkey1:
  000db	5f		 pop	 edi
  000dc	5d		 pop	 ebp
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx

; 98   : }

  000df	c3		 ret	 0
_hkey1	ENDP
_TEXT	ENDS
PUBLIC	_deep_hash
; Function compile flags: /Ogtpy
;	COMDAT _deep_hash
_TEXT	SEGMENT
_xval$ = 8						; size = 4
_max$ = 12						; size = 4
_mod$ = 16						; size = 4
_deep_hash PROC						; COMDAT

; 101  :   bp_long ires=hkey1(xval,max);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _max$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _xval$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 _hkey1
  0000f	83 c4 08	 add	 esp, 8

; 102  :   if(ires<0) return ires; /* error */

  00012	85 c0		 test	 eax, eax
  00014	78 18		 js	 SHORT $LN4@deep_hash

; 103  :   {  bp_long l=(WSIZE-1-TAGBITS);
; 104  :      ires=MOD(ires,ONE<<l);
; 105  :   }
; 106  :   if(mod>0) ires=ires % mod;

  00016	8b 4c 24 0c	 mov	 ecx, DWORD PTR _mod$[esp-4]
  0001a	25 ff ff ff 1f	 and	 eax, 536870911		; 1fffffffH
  0001f	85 c9		 test	 ecx, ecx
  00021	7e 05		 jle	 SHORT $LN2@deep_hash
  00023	99		 cdq
  00024	f7 f9		 idiv	 ecx
  00026	8b c2		 mov	 eax, edx
$LN2@deep_hash:

; 107  :   if(ires<0) ires= -ires;

  00028	85 c0		 test	 eax, eax
  0002a	79 02		 jns	 SHORT $LN4@deep_hash
  0002c	f7 d8		 neg	 eax
$LN4@deep_hash:

; 108  :   return ires;
; 109  : }

  0002e	c3		 ret	 0
_deep_hash ENDP
_TEXT	ENDS
PUBLIC	_tval
EXTRN	_g:BYTE
; Function compile flags: /Ogtpy
;	COMDAT _tval
_TEXT	SEGMENT
_H$ = 8							; size = 4
_xval$ = 12						; size = 4
_num$ = 16						; size = 4
_tval	PROC						; COMDAT

; 113  :    register cell tag;
; 114  :    /*DEREF1(xval);*/
; 115  :                     tag=GETTAG(xval);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _xval$[esp-4]
  00004	8b d1		 mov	 edx, ecx
  00006	83 e2 03	 and	 edx, 3

; 116  :                     switch(tag)

  00009	8b c2		 mov	 eax, edx
  0000b	83 e8 00	 sub	 eax, 0
  0000e	74 7b		 je	 SHORT $LN4@tval
  00010	48		 dec	 eax
  00011	74 65		 je	 SHORT $LN3@tval
  00013	83 e8 02	 sub	 eax, 2

; 137  :                       break;
; 138  : 
; 139  :                       default:
; 140  :                         H[0]=g.DIF;

  00016	8b 44 24 04	 mov	 eax, DWORD PTR _H$[esp-4]
  0001a	74 21		 je	 SHORT $LN2@tval

; 141  :                         H[1]=xval-tag+INTTAG;

  0001c	2b ca		 sub	 ecx, edx
  0001e	41		 inc	 ecx
  0001f	56		 push	 esi
  00020	8b 35 28 00 00
	00		 mov	 esi, DWORD PTR _g+40
  00026	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 142  :                         H[2]=INPUT_INT(tag);

  00029	8d 0c 95 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*4]
  00030	83 c9 01	 or	 ecx, 1
  00033	89 30		 mov	 DWORD PTR [eax], esi
  00035	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 143  :                         H+=3;

  00038	83 c0 0c	 add	 eax, 12			; 0000000cH
  0003b	5e		 pop	 esi

; 144  :                       }
; 145  :    return H;
; 146  : }

  0003c	c3		 ret	 0
$LN2@tval:

; 126  :                         H[1]=xval;
; 127  :                         H+=2;
; 128  :                       break;
; 129  : 
; 130  :                       case FUNTAG:
; 131  :                         H[0]=g.DIV;
; 132  :                         H[1]= (num) ? INPUT_INT(GETSYMNO(xval))
; 133  :                                     :  PUTARITY(xval,0)
; 134  :                                     ;

  0003d	83 7c 24 0c 00	 cmp	 DWORD PTR _num$[esp-4], 0
  00042	8b 15 2c 00 00
	00		 mov	 edx, DWORD PTR _g+44
  00048	89 10		 mov	 DWORD PTR [eax], edx
  0004a	8b d1		 mov	 edx, ecx
  0004c	74 0b		 je	 SHORT $LN9@tval
  0004e	81 e2 fc ff ff
	00		 and	 edx, 16777212		; 00fffffcH
  00054	83 ca 01	 or	 edx, 1
  00057	eb 06		 jmp	 SHORT $LN10@tval
$LN9@tval:
  00059	81 e2 ff ff ff
	00		 and	 edx, 16777215		; 00ffffffH
$LN10@tval:

; 135  :                         H[2]=INPUT_INT(GETARITY(xval));

  0005f	81 e1 ff ff 7f
	ff		 and	 ecx, -8388609		; ff7fffffH
  00065	81 c9 00 00 40
	00		 or	 ecx, 4194304		; 00400000H
  0006b	c1 e9 16	 shr	 ecx, 22			; 00000016H
  0006e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00071	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 136  :                         H+=3;

  00074	83 c0 0c	 add	 eax, 12			; 0000000cH

; 144  :                       }
; 145  :    return H;
; 146  : }

  00077	c3		 ret	 0
$LN3@tval:

; 117  :                     {
; 118  :                      case VARTAG:
; 119  :                         H[0]=g.VAR;

  00078	8b 44 24 04	 mov	 eax, DWORD PTR _H$[esp-4]

; 122  :                       break;
; 123  : 
; 124  :                       case INTTAG:
; 125  :                         H[0]=g.INT;

  0007c	8b 15 34 00 00
	00		 mov	 edx, DWORD PTR _g+52
  00082	89 10		 mov	 DWORD PTR [eax], edx
  00084	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00087	83 c0 08	 add	 eax, 8

; 144  :                       }
; 145  :    return H;
; 146  : }

  0008a	c3		 ret	 0
$LN4@tval:

; 117  :                     {
; 118  :                      case VARTAG:
; 119  :                         H[0]=g.VAR;

  0008b	8b 44 24 04	 mov	 eax, DWORD PTR _H$[esp-4]
  0008f	8b 15 30 00 00
	00		 mov	 edx, DWORD PTR _g+48

; 120  :                         H[1]=xval-tag+INTTAG;

  00095	41		 inc	 ecx
  00096	89 10		 mov	 DWORD PTR [eax], edx
  00098	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 121  :                         H+=2;

  0009b	83 c0 08	 add	 eax, 8

; 144  :                       }
; 145  :    return H;
; 146  : }

  0009e	c3		 ret	 0
_tval	ENDP
_TEXT	ENDS
PUBLIC	_untval
EXTRN	_bp_halt:PROC
; Function compile flags: /Ogtpy
;	COMDAT _untval
_TEXT	SEGMENT
_vval$ = 8						; size = 4
_xref$ = 8						; size = 4
_untval	PROC						; COMDAT

; 149  : {

  00000	53		 push	 ebx

; 150  :    register cell xval;
; 151  :    register term vref,tref;
; 152  :    register cell vval,tval,res=0;
; 153  :    if(NONVAR(xref)) bp_halt(51);

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _xref$[esp]
  00005	56		 push	 esi
  00006	33 f6		 xor	 esi, esi
  00008	57		 push	 edi
  00009	f6 c3 03	 test	 bl, 3
  0000c	74 0a		 je	 SHORT $LN27@untval
  0000e	6a 33		 push	 51			; 00000033H
  00010	e8 00 00 00 00	 call	 _bp_halt
  00015	83 c4 04	 add	 esp, 4
$LN27@untval:

; 154  :    xval=GETREF(xref);

  00018	8b 13		 mov	 edx, DWORD PTR [ebx]

; 155  :    FDEREF3(xref+1,vref,vval);

  0001a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0001d	a8 03		 test	 al, 3
  0001f	74 08		 je	 SHORT $LN30@untval
  00021	8b f8		 mov	 edi, eax
  00023	89 7c 24 10	 mov	 DWORD PTR _vval$[esp+8], edi
  00027	eb 24		 jmp	 SHORT $LN23@untval
$LN30@untval:
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	89 4c 24 10	 mov	 DWORD PTR _vval$[esp+8], ecx
  0002f	f6 c1 03	 test	 cl, 3
  00032	75 15		 jne	 SHORT $LN36@untval
$LL24@untval:
  00034	3b 44 24 10	 cmp	 eax, DWORD PTR _vval$[esp+8]
  00038	74 0f		 je	 SHORT $LN36@untval
  0003a	8b 44 24 10	 mov	 eax, DWORD PTR _vval$[esp+8]
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	89 4c 24 10	 mov	 DWORD PTR _vval$[esp+8], ecx
  00044	f6 c1 03	 test	 cl, 3
  00047	74 eb		 je	 SHORT $LL24@untval
$LN36@untval:
  00049	8b 7c 24 10	 mov	 edi, DWORD PTR _vval$[esp+8]
$LN23@untval:

; 156  :                      if(xval == g.VAR)

  0004d	3b 15 30 00 00
	00		 cmp	 edx, DWORD PTR _g+48
  00053	75 19		 jne	 SHORT $LN22@untval

; 157  :                      {
; 158  :                         if(!INTEGER(vval)) bp_halt(52);

  00055	8b c7		 mov	 eax, edi
  00057	24 03		 and	 al, 3
  00059	3c 01		 cmp	 al, 1
  0005b	74 0a		 je	 SHORT $LN21@untval
  0005d	6a 34		 push	 52			; 00000034H
  0005f	e8 00 00 00 00	 call	 _bp_halt
  00064	83 c4 04	 add	 esp, 4
$LN21@untval:

; 159  :                         res = vval-INTTAG;

  00067	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx

; 185  : }

  0006d	c3		 ret	 0
$LN22@untval:

; 160  :                      }
; 161  :                      else if(xval == g.INT)

  0006e	3b 15 34 00 00
	00		 cmp	 edx, DWORD PTR _g+52
  00074	75 1a		 jne	 SHORT $LN19@untval

; 162  :                      {
; 163  :                          if(!INTEGER(vval)) bp_halt(53);

  00076	8b cf		 mov	 ecx, edi
  00078	80 e1 03	 and	 cl, 3
  0007b	80 f9 01	 cmp	 cl, 1
  0007e	74 0a		 je	 SHORT $LN18@untval
  00080	6a 35		 push	 53			; 00000035H
  00082	e8 00 00 00 00	 call	 _bp_halt
  00087	83 c4 04	 add	 esp, 4
$LN18@untval:

; 184  :    return res;

  0008a	8b c7		 mov	 eax, edi
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx

; 185  : }

  0008f	c3		 ret	 0
$LN19@untval:

; 164  :                          res = vval;
; 165  :                      }
; 166  :                      else if(xval == g.DIV) /* FUNCTOR */

  00090	3b 15 2c 00 00
	00		 cmp	 edx, DWORD PTR _g+44
  00096	75 5c		 jne	 SHORT $LN16@untval

; 167  :                         {
; 168  :                           if(!IDENTIFIER(vval)) bp_halt(54);

  00098	8b d7		 mov	 edx, edi
  0009a	83 e2 03	 and	 edx, 3
  0009d	80 fa 03	 cmp	 dl, 3
  000a0	74 0a		 je	 SHORT $LN15@untval
  000a2	6a 36		 push	 54			; 00000036H
  000a4	e8 00 00 00 00	 call	 _bp_halt
  000a9	83 c4 04	 add	 esp, 4
$LN15@untval:

; 169  :                           FDEREF3(xref+2,tref,tval);

  000ac	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  000af	a8 03		 test	 al, 3
  000b1	74 04		 je	 SHORT $LN31@untval
  000b3	8b d8		 mov	 ebx, eax
  000b5	eb 16		 jmp	 SHORT $LN11@untval
$LN31@untval:
  000b7	8b 18		 mov	 ebx, DWORD PTR [eax]
  000b9	f6 c3 03	 test	 bl, 3
  000bc	75 0f		 jne	 SHORT $LN11@untval
  000be	8b ff		 npad	 2
$LL12@untval:
  000c0	3b c3		 cmp	 eax, ebx
  000c2	74 09		 je	 SHORT $LN11@untval
  000c4	8b c3		 mov	 eax, ebx
  000c6	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  000c8	f6 c3 03	 test	 bl, 3
  000cb	74 f3		 je	 SHORT $LL12@untval
$LN11@untval:

; 170  :                           if(!INTEGER(tval)) bp_halt(55);

  000cd	8b c3		 mov	 eax, ebx
  000cf	24 03		 and	 al, 3
  000d1	3c 01		 cmp	 al, 1
  000d3	74 0a		 je	 SHORT $LN10@untval
  000d5	6a 37		 push	 55			; 00000037H
  000d7	e8 00 00 00 00	 call	 _bp_halt
  000dc	83 c4 04	 add	 esp, 4
$LN10@untval:

; 171  : 
; 172  :                           res = PUTARITY(vval,
; 173  :                                        OUTPUT_INT(tval));

  000df	8b 44 24 10	 mov	 eax, DWORD PTR _vval$[esp+8]
  000e3	c1 fb 02	 sar	 ebx, 2
  000e6	5f		 pop	 edi
  000e7	c1 e3 18	 shl	 ebx, 24			; 00000018H
  000ea	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ef	5e		 pop	 esi
  000f0	0b c3		 or	 eax, ebx
  000f2	5b		 pop	 ebx

; 185  : }

  000f3	c3		 ret	 0
$LN16@untval:

; 174  :                         }
; 175  :                      else if(xval == g.DIF)  /* OTHER TAG */

  000f4	3b 15 28 00 00
	00		 cmp	 edx, DWORD PTR _g+40
  000fa	75 4d		 jne	 SHORT $LN8@untval

; 176  :                         {
; 177  :                           if(!INTEGER(vval)) bp_halt(56);

  000fc	8b f7		 mov	 esi, edi
  000fe	83 e6 03	 and	 esi, 3
  00101	83 fe 01	 cmp	 esi, 1
  00104	74 0a		 je	 SHORT $LN7@untval
  00106	6a 38		 push	 56			; 00000038H
  00108	e8 00 00 00 00	 call	 _bp_halt
  0010d	83 c4 04	 add	 esp, 4
$LN7@untval:

; 178  :                           FDEREF3(xref+2,tref,tval);

  00110	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00113	a8 03		 test	 al, 3
  00115	74 04		 je	 SHORT $LN32@untval
  00117	8b d8		 mov	 ebx, eax
  00119	eb 14		 jmp	 SHORT $LN3@untval
$LN32@untval:
  0011b	8b 18		 mov	 ebx, DWORD PTR [eax]
  0011d	f6 c3 03	 test	 bl, 3
  00120	75 0d		 jne	 SHORT $LN3@untval
$LL4@untval:
  00122	3b c3		 cmp	 eax, ebx
  00124	74 09		 je	 SHORT $LN3@untval
  00126	8b c3		 mov	 eax, ebx
  00128	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  0012a	f6 c3 03	 test	 bl, 3
  0012d	74 f3		 je	 SHORT $LL4@untval
$LN3@untval:

; 179  :                           if(!INTEGER(vval)) bp_halt(57);

  0012f	83 fe 01	 cmp	 esi, 1
  00132	74 0a		 je	 SHORT $LN2@untval
  00134	6a 39		 push	 57			; 00000039H
  00136	e8 00 00 00 00	 call	 _bp_halt
  0013b	83 c4 04	 add	 esp, 4
$LN2@untval:

; 180  :                           res = vval-INTTAG+OUTPUT_INT(tval);

  0013e	c1 fb 02	 sar	 ebx, 2
  00141	8d 44 3b ff	 lea	 eax, DWORD PTR [ebx+edi-1]
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx

; 185  : }

  00148	c3		 ret	 0
$LN8@untval:

; 181  :                         }
; 182  :                      else
; 183  :                         {bp_halt(58);}

  00149	6a 3a		 push	 58			; 0000003aH
  0014b	e8 00 00 00 00	 call	 _bp_halt
  00150	83 c4 04	 add	 esp, 4
  00153	5f		 pop	 edi

; 184  :    return res;

  00154	8b c6		 mov	 eax, esi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx

; 185  : }

  00158	c3		 ret	 0
_untval	ENDP
_TEXT	ENDS
PUBLIC	_tlet
EXTRN	_hdef:PROC
EXTRN	_hset:PROC
EXTRN	_hget:PROC
; Function compile flags: /Ogtpy
;	COMDAT _tlet
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_tlet	PROC						; COMDAT

; 189  : { register cell xval;

  00000	56		 push	 esi

; 190  :                     ATOMIZE(X(1)); ATOMIZE(X(2));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _regs$[esp]
  00005	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	83 e1 03	 and	 ecx, 3
  0000d	57		 push	 edi
  0000e	74 0c		 je	 SHORT $LN5@tlet
  00010	83 f9 01	 cmp	 ecx, 1
  00013	74 0c		 je	 SHORT $LN6@tlet
  00015	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  0001a	74 05		 je	 SHORT $LN6@tlet
$LN5@tlet:
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	89 46 fc	 mov	 DWORD PTR [esi-4], eax
$LN6@tlet:
  00021	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  00024	8b c8		 mov	 ecx, eax
  00026	83 e1 03	 and	 ecx, 3
  00029	74 0c		 je	 SHORT $LN3@tlet
  0002b	83 f9 01	 cmp	 ecx, 1
  0002e	74 0c		 je	 SHORT $LN4@tlet
  00030	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00035	74 05		 je	 SHORT $LN4@tlet
$LN3@tlet:
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4e f8	 mov	 DWORD PTR [esi-8], ecx
$LN4@tlet:

; 191  :                     xval=untval(C2T(X(3)));

  0003c	8b 56 f4	 mov	 edx, DWORD PTR [esi-12]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _untval

; 192  : 
; 193  :                     if(hget(X(1),X(2)))

  00045	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00048	8b f8		 mov	 edi, eax
  0004a	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  0004d	50		 push	 eax
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _hget

; 194  :                       xval=hset(X(1),X(2),xval);

  00054	8b 56 f8	 mov	 edx, DWORD PTR [esi-8]
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	85 c0		 test	 eax, eax
  0005c	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  0005f	74 0e		 je	 SHORT $LN2@tlet
  00061	57		 push	 edi
  00062	52		 push	 edx
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _hset
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 197  :                     return xval;
; 198  : }

  0006e	c3		 ret	 0
$LN2@tlet:

; 195  :                     else
; 196  :                       xval=hdef(X(1),X(2),xval,g.timestamp);

  0006f	0f b6 0d 70 01
	00 00		 movzx	 ecx, BYTE PTR _g+368
  00076	51		 push	 ecx
  00077	57		 push	 edi
  00078	52		 push	 edx
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 _hdef
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi

; 197  :                     return xval;
; 198  : }

  00084	c3		 ret	 0
_tlet	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@FFNAGDDC@array_ref?13?0?5arg?51?3?5bad?5array?$AA@ ; `string'
PUBLIC	??_C@_0CC@OLPICEGF@array_ref?13?3?5arg2?5bad?5array?5inde@ ; `string'
PUBLIC	_array_ref
EXTRN	_local_error:PROC
;	COMDAT ??_C@_0BO@FFNAGDDC@array_ref?13?0?5arg?51?3?5bad?5array?$AA@
CONST	SEGMENT
??_C@_0BO@FFNAGDDC@array_ref?13?0?5arg?51?3?5bad?5array?$AA@ DB 'array_re'
	DB	'f/3, arg 1: bad array', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OLPICEGF@array_ref?13?3?5arg2?5bad?5array?5inde@
CONST	SEGMENT
??_C@_0CC@OLPICEGF@array_ref?13?3?5arg2?5bad?5array?5inde@ DB 'array_ref/'
	DB	'3: arg2 bad array index', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _array_ref
_TEXT	SEGMENT
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_wam$ = 16						; size = 4
_array_ref PROC						; COMDAT

; 202  :   register cell xval;
; 203  :   register bp_long ires;
; 204  :                     xval=index;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _index$[esp-4]

; 205  :                     ATOMIZE(xval);

  00004	8b c8		 mov	 ecx, eax
  00006	83 e1 03	 and	 ecx, 3
  00009	74 0c		 je	 SHORT $LN5@array_ref
  0000b	83 f9 01	 cmp	 ecx, 1
  0000e	74 09		 je	 SHORT $LN6@array_ref
  00010	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00015	74 02		 je	 SHORT $LN6@array_ref
$LN5@array_ref:
  00017	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@array_ref:

; 206  :                     if(!INTEGER(xval))

  00019	8b c8		 mov	 ecx, eax
  0001b	80 e1 03	 and	 cl, 3
  0001e	80 f9 01	 cmp	 cl, 1
  00021	74 11		 je	 SHORT $LN4@array_ref

; 207  :                       return
; 208  :                         LOCAL_ERR(xval,
; 209  :                           "array_ref/3: arg2 bad array index");

  00023	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _index$[esp-4], OFFSET ??_C@_0CC@OLPICEGF@array_ref?13?3?5arg2?5bad?5array?5inde@
  0002b	89 44 24 04	 mov	 DWORD PTR _base$[esp-4], eax
  0002f	e9 00 00 00 00	 jmp	 _local_error
$LN4@array_ref:

; 210  :                     ires=OUTPUT_INT(xval);
; 211  :                     xval=base;

  00034	8b 4c 24 04	 mov	 ecx, DWORD PTR _base$[esp-4]

; 212  :                     ATOMIZE(xval);

  00038	8b d1		 mov	 edx, ecx
  0003a	c1 f8 02	 sar	 eax, 2
  0003d	83 e2 03	 and	 edx, 3
  00040	74 0d		 je	 SHORT $LN2@array_ref
  00042	83 fa 01	 cmp	 edx, 1
  00045	74 0a		 je	 SHORT $LN3@array_ref
  00047	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  0004d	74 02		 je	 SHORT $LN3@array_ref
$LN2@array_ref:
  0004f	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN3@array_ref:

; 213  :                     if(!INTEGER(xval))

  00051	8b d1		 mov	 edx, ecx
  00053	80 e2 03	 and	 dl, 3
  00056	80 fa 01	 cmp	 dl, 1
  00059	74 11		 je	 SHORT $LN1@array_ref

; 214  :                       return
; 215  :                         LOCAL_ERR(xval,
; 216  :                           "array_ref/3, arg 1: bad array");

  0005b	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _index$[esp-4], OFFSET ??_C@_0BO@FFNAGDDC@array_ref?13?0?5arg?51?3?5bad?5array?$AA@
  00063	89 4c 24 04	 mov	 DWORD PTR _base$[esp-4], ecx
  00067	e9 00 00 00 00	 jmp	 _local_error
$LN1@array_ref:

; 217  :                     xref=INT2PTR(xval);
; 218  :   return xref+ires;

  0006c	8d 44 81 ff	 lea	 eax, DWORD PTR [ecx+eax*4-1]

; 219  : }

  00070	c3		 ret	 0
_array_ref ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@EPBDPKKF@integer?5ctr?5expected?5in?5get_asse@ ; `string'
PUBLIC	??_C@_0BP@OEFGDLEK@?8?4?8?12?5expected?5in?5get_asserted?$AA@ ; `string'
PUBLIC	??_C@_0BP@KAPHBOFC@?8?9?8?12?5expected?5in?5get_asserted?$AA@ ; `string'
PUBLIC	_get_asserted
;	COMDAT ??_C@_0CF@EPBDPKKF@integer?5ctr?5expected?5in?5get_asse@
CONST	SEGMENT
??_C@_0CF@EPBDPKKF@integer?5ctr?5expected?5in?5get_asse@ DB 'integer ctr '
	DB	'expected in get_asserted', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OEFGDLEK@?8?4?8?12?5expected?5in?5get_asserted?$AA@
CONST	SEGMENT
??_C@_0BP@OEFGDLEK@?8?4?8?12?5expected?5in?5get_asserted?$AA@ DB '''.''/2'
	DB	' expected in get_asserted', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KAPHBOFC@?8?9?8?12?5expected?5in?5get_asserted?$AA@
CONST	SEGMENT
??_C@_0BP@KAPHBOFC@?8?9?8?12?5expected?5in?5get_asserted?$AA@ DB '''-''/2'
	DB	' expected in get_asserted', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _get_asserted
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_get_asserted PROC					; COMDAT

; 223  :   register cell xval,key=X(1);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	56		 push	 esi
  00005	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]

; 224  :   ATOMIZE(key);

  00008	8b c6		 mov	 eax, esi
  0000a	83 e0 03	 and	 eax, 3
  0000d	74 0d		 je	 SHORT $LN33@get_assert
  0000f	83 f8 01	 cmp	 eax, 1
  00012	74 0a		 je	 SHORT $LN22@get_assert
  00014	f7 c6 00 00 00
	ff		 test	 esi, -16777216		; ff000000H
  0001a	74 02		 je	 SHORT $LN22@get_assert
$LN33@get_assert:
  0001c	8b 36		 mov	 esi, DWORD PTR [esi]
$LN22@get_assert:

; 225  :   xval=hget(g.current_db,key);

  0001e	8b 0d bc 00 00
	00		 mov	 ecx, DWORD PTR _g+188
  00024	56		 push	 esi
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 _hget
  0002b	83 c4 08	 add	 esp, 8

; 226  :   if(!xval || g.empty==xval) return (cell)0;

  0002e	85 c0		 test	 eax, eax
  00030	0f 84 1d 01 00
	00		 je	 $LN19@get_assert
  00036	39 05 38 00 00
	00		 cmp	 DWORD PTR _g+56, eax
  0003c	0f 84 11 01 00
	00		 je	 $LN19@get_assert

; 227  :   FDEREF(xval); /*ok*/

  00042	8b c8		 mov	 ecx, eax
  00044	a8 03		 test	 al, 3
  00046	75 14		 jne	 SHORT $LN15@get_assert
  00048	8b 00		 mov	 eax, DWORD PTR [eax]
  0004a	a8 03		 test	 al, 3
  0004c	75 0e		 jne	 SHORT $LN15@get_assert
  0004e	8b ff		 npad	 2
$LL16@get_assert:
  00050	3b c8		 cmp	 ecx, eax
  00052	74 08		 je	 SHORT $LN15@get_assert
  00054	8b c8		 mov	 ecx, eax
  00056	8b 00		 mov	 eax, DWORD PTR [eax]
  00058	a8 03		 test	 al, 3
  0005a	74 f4		 je	 SHORT $LL16@get_assert
$LN15@get_assert:

; 228  :   if(g.DIF!=xval)

  0005c	39 05 28 00 00
	00		 cmp	 DWORD PTR _g+40, eax
  00062	74 15		 je	 SHORT $LN14@get_assert

; 229  :      return (cell)LOCAL_ERR(xval,"'-'/2 expected in get_asserted");

  00064	8b 54 24 0c	 mov	 edx, DWORD PTR _wam$[esp]
  00068	52		 push	 edx
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KAPHBOFC@?8?9?8?12?5expected?5in?5get_asserted?$AA@
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _local_error
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	5e		 pop	 esi

; 258  : }

  00078	c3		 ret	 0
$LN14@get_assert:
  00079	53		 push	 ebx

; 230  :   FDEREF(xref[1]); /*ok*/

  0007a	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  0007d	f6 c3 03	 test	 bl, 3
  00080	74 04		 je	 SHORT $LN28@get_assert
  00082	8b c3		 mov	 eax, ebx
  00084	eb 16		 jmp	 SHORT $LN10@get_assert
$LN28@get_assert:
  00086	8b 03		 mov	 eax, DWORD PTR [ebx]
  00088	a8 03		 test	 al, 3
  0008a	75 10		 jne	 SHORT $LN10@get_assert
  0008c	8d 64 24 00	 npad	 4
$LL11@get_assert:
  00090	3b d8		 cmp	 ebx, eax
  00092	74 08		 je	 SHORT $LN10@get_assert
  00094	8b d8		 mov	 ebx, eax
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	a8 03		 test	 al, 3
  0009a	74 f4		 je	 SHORT $LL11@get_assert
$LN10@get_assert:

; 231  :   if(xval!=g.DOT)

  0009c	3b 05 24 00 00
	00		 cmp	 eax, DWORD PTR _g+36
  000a2	74 1f		 je	 SHORT $LN9@get_assert

; 232  :      return (VAR(xval))? 0:
; 233  :        (cell)LOCAL_ERR(xval,"'.'/2 expected in get_asserted");

  000a4	a8 03		 test	 al, 3
  000a6	75 05		 jne	 SHORT $LN25@get_assert
  000a8	5b		 pop	 ebx
  000a9	33 c0		 xor	 eax, eax
  000ab	5e		 pop	 esi

; 258  : }

  000ac	c3		 ret	 0
$LN25@get_assert:

; 232  :      return (VAR(xval))? 0:
; 233  :        (cell)LOCAL_ERR(xval,"'.'/2 expected in get_asserted");

  000ad	8b 4c 24 10	 mov	 ecx, DWORD PTR _wam$[esp+4]
  000b1	51		 push	 ecx
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OEFGDLEK@?8?4?8?12?5expected?5in?5get_asserted?$AA@
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _local_error
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	5b		 pop	 ebx
  000c1	5e		 pop	 esi

; 258  : }

  000c2	c3		 ret	 0
$LN9@get_assert:

; 234  :   xval=hget(key,g.current_db);

  000c3	8b 15 bc 00 00
	00		 mov	 edx, DWORD PTR _g+188
  000c9	52		 push	 edx
  000ca	56		 push	 esi
  000cb	e8 00 00 00 00	 call	 _hget
  000d0	83 c4 08	 add	 esp, 8

; 235  :   if(xval && g.empty!=xval)

  000d3	85 c0		 test	 eax, eax
  000d5	74 76		 je	 SHORT $LN2@get_assert
  000d7	39 05 38 00 00
	00		 cmp	 DWORD PTR _g+56, eax
  000dd	74 6e		 je	 SHORT $LN2@get_assert

; 236  :   { term xref; bp_long ires;
; 237  :     FDEREF(xval);

  000df	8b c8		 mov	 ecx, eax
  000e1	a8 03		 test	 al, 3
  000e3	75 17		 jne	 SHORT $LN4@get_assert
  000e5	8b 00		 mov	 eax, DWORD PTR [eax]
  000e7	a8 03		 test	 al, 3
  000e9	75 11		 jne	 SHORT $LN4@get_assert
  000eb	eb 03 8d 49 00	 npad	 5
$LL5@get_assert:
  000f0	3b c8		 cmp	 ecx, eax
  000f2	74 08		 je	 SHORT $LN4@get_assert
  000f4	8b c8		 mov	 ecx, eax
  000f6	8b 00		 mov	 eax, DWORD PTR [eax]
  000f8	a8 03		 test	 al, 3
  000fa	74 f4		 je	 SHORT $LL5@get_assert
$LN4@get_assert:

; 238  :     if(!INTEGER(xval))

  000fc	8b c8		 mov	 ecx, eax
  000fe	80 e1 03	 and	 cl, 3
  00101	80 f9 01	 cmp	 cl, 1
  00104	74 16		 je	 SHORT $LN3@get_assert

; 239  :       return (cell)LOCAL_ERR(xval,"integer ctr expected in get_asserted");

  00106	8b 54 24 10	 mov	 edx, DWORD PTR _wam$[esp+4]
  0010a	52		 push	 edx
  0010b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@EPBDPKKF@integer?5ctr?5expected?5in?5get_asse@
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 _local_error
  00116	83 c4 0c	 add	 esp, 12			; 0000000cH
  00119	5b		 pop	 ebx
  0011a	5e		 pop	 esi

; 258  : }

  0011b	c3		 ret	 0
$LN3@get_assert:

; 240  :     ires=OUTPUT_INT(xval);

  0011c	c1 f8 02	 sar	 eax, 2

; 241  : 
; 242  : 
; 243  : 
; 244  :     /* only do the counding down if thresahlold is reasonably low
; 245  : 
; 246  :        switch it off if higher than that - see dynco/1
; 247  : 
; 248  :     */
; 249  : 
; 250  :     if(ires < 1<<16)  {

  0011f	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00124	7d 27		 jge	 SHORT $LN2@get_assert

; 251  :       if(ires<=0) return INPUT_INT(0);

  00126	85 c0		 test	 eax, eax
  00128	7f 08		 jg	 SHORT $LN1@get_assert
  0012a	5b		 pop	 ebx
  0012b	b8 01 00 00 00	 mov	 eax, 1
  00130	5e		 pop	 esi

; 258  : }

  00131	c3		 ret	 0
$LN1@get_assert:

; 252  :       xval=INPUT_INT(ires-1);
; 253  :       hset(key,g.current_db,xval);

  00132	8b 0d bc 00 00
	00		 mov	 ecx, DWORD PTR _g+188
  00138	8d 04 85 fc ff
	ff ff		 lea	 eax, DWORD PTR [eax*4-4]
  0013f	83 c8 01	 or	 eax, 1
  00142	50		 push	 eax
  00143	51		 push	 ecx
  00144	56		 push	 esi
  00145	e8 00 00 00 00	 call	 _hset
  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@get_assert:

; 254  : 
; 255  :     }
; 256  :   }
; 257  :   return T2C(xref)+INTTAG;

  0014d	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00150	5b		 pop	 ebx
  00151	5e		 pop	 esi

; 258  : }

  00152	c3		 ret	 0
$LN19@get_assert:

; 226  :   if(!xval || g.empty==xval) return (cell)0;

  00153	33 c0		 xor	 eax, eax
  00155	5e		 pop	 esi

; 258  : }

  00156	c3		 ret	 0
_get_asserted ENDP
_TEXT	ENDS
PUBLIC	_stat_used
; Function compile flags: /Ogtpy
;	COMDAT _stat_used
_TEXT	SEGMENT
_top$ = 8						; size = 4
_s$ = 12						; size = 4
_wam$ = 16						; size = 4
_stat_used PROC						; COMDAT

; 262  :   return (top - wam[s].base)*sizeof(*top);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _s$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR _wam$[esp-4]
  00008	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0000b	8b 44 24 04	 mov	 eax, DWORD PTR _top$[esp-4]
  0000f	2b 44 8a 10	 sub	 eax, DWORD PTR [edx+ecx*4+16]
  00013	c1 f8 02	 sar	 eax, 2
  00016	03 c0		 add	 eax, eax
  00018	03 c0		 add	 eax, eax

; 263  : }

  0001a	c3		 ret	 0
_stat_used ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@LEPJLFBJ@unix_argv?8s?51st?5arg?5not?5in?5range@ ; `string'
PUBLIC	??_C@_0CE@MINLCFLF@unix_argv?8s?51st?5arg?5must?5be?5inte@ ; `string'
PUBLIC	_unix_argv
EXTRN	_new_func:PROC
;	COMDAT ??_C@_0CB@LEPJLFBJ@unix_argv?8s?51st?5arg?5not?5in?5range@
CONST	SEGMENT
??_C@_0CB@LEPJLFBJ@unix_argv?8s?51st?5arg?5not?5in?5range@ DB 'unix_argv'''
	DB	's 1st arg not in range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MINLCFLF@unix_argv?8s?51st?5arg?5must?5be?5inte@
CONST	SEGMENT
??_C@_0CE@MINLCFLF@unix_argv?8s?51st?5arg?5must?5be?5inte@ DB 'unix_argv'''
	DB	's 1st arg must be integer', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _unix_argv
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_unix_argv PROC						; COMDAT

; 267  :                     xval=X(1);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 268  :                     if(!INTEGER(xval))

  00007	8b d1		 mov	 edx, ecx
  00009	80 e2 03	 and	 dl, 3
  0000c	80 fa 01	 cmp	 dl, 1
  0000f	74 14		 je	 SHORT $LN3@unix_argv

; 269  :                       return (cell)LOCAL_ERR(xval,
; 270  :                          "unix_argv's 1st arg must be integer");

  00011	8b 44 24 08	 mov	 eax, DWORD PTR _wam$[esp-4]
  00015	50		 push	 eax
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MINLCFLF@unix_argv?8s?51st?5arg?5must?5be?5inte@

; 274  :                         return (cell)LOCAL_ERR(xval,
; 275  :                           "unix_argv's 1st arg not in range");

  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _local_error
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 277  :    return xval;
; 278  : }

  00024	c3		 ret	 0
$LN3@unix_argv:

; 271  : 
; 272  :                     ires=OUTPUT_INT(xval);

  00025	8b c1		 mov	 eax, ecx
  00027	c1 f8 02	 sar	 eax, 2

; 273  :                     if(!(ires>=0 && ires<g.argc))

  0002a	85 c0		 test	 eax, eax
  0002c	78 22		 js	 SHORT $LN1@unix_argv
  0002e	3b 05 44 01 00
	00		 cmp	 eax, DWORD PTR _g+324
  00034	7d 1a		 jge	 SHORT $LN1@unix_argv

; 276  :                     xval=new_func(g.argv[ires],0);

  00036	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], 0
  0003e	8b 0d 48 01 00
	00		 mov	 ecx, DWORD PTR _g+328
  00044	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00047	89 54 24 04	 mov	 DWORD PTR _regs$[esp-4], edx
  0004b	e9 00 00 00 00	 jmp	 _new_func
$LN1@unix_argv:

; 274  :                         return (cell)LOCAL_ERR(xval,
; 275  :                           "unix_argv's 1st arg not in range");

  00050	8b 44 24 08	 mov	 eax, DWORD PTR _wam$[esp-4]
  00054	50		 push	 eax
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LEPJLFBJ@unix_argv?8s?51st?5arg?5not?5in?5range@
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 _local_error
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 277  :    return xval;
; 278  : }

  00063	c3		 ret	 0
_unix_argv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@BPFMICIM@unix_getenv?8s?51st?5arg?5must?5be?5a?5@ ; `string'
PUBLIC	_unix_getenv
EXTRN	_getenv:PROC
;	COMDAT ??_C@_0CH@BPFMICIM@unix_getenv?8s?51st?5arg?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0CH@BPFMICIM@unix_getenv?8s?51st?5arg?5must?5be?5a?5@ DB 'unix_gete'
	DB	'nv''s 1st arg must be a symbol', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _unix_getenv
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_unix_getenv PROC					; COMDAT

; 282  :    xval=X(1);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]

; 283  :    if(!SYMCONST(xval))

  00007	8b c8		 mov	 ecx, eax
  00009	83 e1 03	 and	 ecx, 3
  0000c	80 f9 03	 cmp	 cl, 3
  0000f	75 37		 jne	 SHORT $LN2@unix_geten
  00011	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00016	75 30		 jne	 SHORT $LN2@unix_geten

; 285  :    s=NAME(xval);

  00018	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _atomtable
  0001e	c1 e8 02	 shr	 eax, 2
  00021	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  00026	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]

; 286  :    if(!(s=(string)getenv(s))) return 0;

  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _getenv
  0002f	83 c4 04	 add	 esp, 4
  00032	85 c0		 test	 eax, eax
  00034	75 01		 jne	 SHORT $LN1@unix_geten

; 289  : }

  00036	c3		 ret	 0
$LN1@unix_geten:

; 287  :    /* return (cell)LOCAL_ERR(xval,"unix_getenv's/2: no such variable");*/
; 288  :    return new_func(s,0);

  00037	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], 0
  0003f	89 44 24 04	 mov	 DWORD PTR _regs$[esp-4], eax
  00043	e9 00 00 00 00	 jmp	 _new_func
$LN2@unix_geten:

; 284  :      return (cell)LOCAL_ERR(xval,"unix_getenv's 1st arg must be a symbol");

  00048	8b 4c 24 08	 mov	 ecx, DWORD PTR _wam$[esp-4]
  0004c	51		 push	 ecx
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BPFMICIM@unix_getenv?8s?51st?5arg?5must?5be?5a?5@
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _local_error
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH

; 289  : }

  0005b	c3		 ret	 0
_unix_getenv ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@GGKCIMLA@unix_access?8s?51st?5arg?5must?5be?5a?5@ ; `string'
PUBLIC	??_C@_0CH@HNBHBGGH@unix_access?12?3?52nd?5arg?5must?5be?5i@ ; `string'
PUBLIC	_unix_access
EXTRN	_access:PROC
;	COMDAT ??_C@_0CH@GGKCIMLA@unix_access?8s?51st?5arg?5must?5be?5a?5@
CONST	SEGMENT
??_C@_0CH@GGKCIMLA@unix_access?8s?51st?5arg?5must?5be?5a?5@ DB 'unix_acce'
	DB	'ss''s 1st arg must be a symbol', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HNBHBGGH@unix_access?12?3?52nd?5arg?5must?5be?5i@
CONST	SEGMENT
??_C@_0CH@HNBHBGGH@unix_access?12?3?52nd?5arg?5must?5be?5i@ DB 'unix_acce'
	DB	'ss/2: 2nd arg must be integer', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _unix_access
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_unix_access PROC					; COMDAT

; 293  :                     xval=X(2);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _regs$[esp-4]
  00004	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]

; 294  : 
; 295  :                     if(!INTEGER(xval))

  00007	8b d0		 mov	 edx, eax
  00009	80 e2 03	 and	 dl, 3
  0000c	80 fa 01	 cmp	 dl, 1
  0000f	74 14		 je	 SHORT $LN3@unix_acces

; 296  :                         return (cell)LOCAL_ERR(xval,
; 297  :                           "unix_access/2: 2nd arg must be integer");

  00011	8b 4c 24 08	 mov	 ecx, DWORD PTR _wam$[esp-4]
  00015	51		 push	 ecx
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@HNBHBGGH@unix_access?12?3?52nd?5arg?5must?5be?5i@
  0001b	50		 push	 eax

; 302  :                       return (cell)LOCAL_ERR(xval,
; 303  :                          "unix_access's 1st arg must be a symbol");

  0001c	e8 00 00 00 00	 call	 _local_error
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  : }

  00024	c3		 ret	 0
$LN3@unix_acces:

; 298  :                     ires=OUTPUT_INT(xval);
; 299  : 
; 300  :                     xval=X(1);

  00025	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]

; 301  :                     if(!SYMCONST(xval))

  00028	8b d1		 mov	 edx, ecx
  0002a	83 e2 03	 and	 edx, 3
  0002d	c1 f8 02	 sar	 eax, 2
  00030	80 fa 03	 cmp	 dl, 3
  00033	75 29		 jne	 SHORT $LN1@unix_acces
  00035	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  0003b	75 21		 jne	 SHORT $LN1@unix_acces

; 304  : return !access(NAME(xval),ires);

  0003d	c1 e9 02	 shr	 ecx, 2
  00040	50		 push	 eax
  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR _atomtable
  00046	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  0004c	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 _access
  00055	83 c4 08	 add	 esp, 8
  00058	f7 d8		 neg	 eax
  0005a	1b c0		 sbb	 eax, eax
  0005c	40		 inc	 eax

; 305  : }

  0005d	c3		 ret	 0
$LN1@unix_acces:

; 302  :                       return (cell)LOCAL_ERR(xval,
; 303  :                          "unix_access's 1st arg must be a symbol");

  0005e	8b 54 24 08	 mov	 edx, DWORD PTR _wam$[esp-4]
  00062	52		 push	 edx
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GGKCIMLA@unix_access?8s?51st?5arg?5must?5be?5a?5@
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _local_error
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  : }

  00071	c3		 ret	 0
_unix_access ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@CNNBALAH@unix_cd?8s?51st?5arg?5must?5be?5a?5symb@ ; `string'
PUBLIC	??_C@_0BJ@ECCEMBIN@unix_cd?11?3?5bad?5directory?$AA@ ; `string'
PUBLIC	_unix_cd
EXTRN	_chdir:PROC
;	COMDAT ??_C@_0CD@CNNBALAH@unix_cd?8s?51st?5arg?5must?5be?5a?5symb@
CONST	SEGMENT
??_C@_0CD@CNNBALAH@unix_cd?8s?51st?5arg?5must?5be?5a?5symb@ DB 'unix_cd'''
	DB	's 1st arg must be a symbol', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ECCEMBIN@unix_cd?11?3?5bad?5directory?$AA@
CONST	SEGMENT
??_C@_0BJ@ECCEMBIN@unix_cd?11?3?5bad?5directory?$AA@ DB 'unix_cd/1: bad d'
	DB	'irectory', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _unix_cd
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_unix_cd PROC						; COMDAT

; 309  :                     xval=X(1);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	56		 push	 esi
  00005	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]

; 310  :                     if(!SYMCONST(xval))

  00008	8b ce		 mov	 ecx, esi
  0000a	83 e1 03	 and	 ecx, 3
  0000d	80 f9 03	 cmp	 cl, 3
  00010	75 44		 jne	 SHORT $LN2@unix_cd
  00012	f7 c6 00 00 00
	ff		 test	 esi, -16777216		; ff000000H
  00018	75 3c		 jne	 SHORT $LN2@unix_cd

; 313  :    if(!!chdir(NAME(xval))) return (cell)LOCAL_ERR(xval,

  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR _atomtable
  0001f	8b d6		 mov	 edx, esi
  00021	c1 ea 02	 shr	 edx, 2
  00024	81 e2 ff ff 3f
	00		 and	 edx, 4194303		; 003fffffH
  0002a	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 _chdir
  00033	83 c4 04	 add	 esp, 4
  00036	85 c0		 test	 eax, eax
  00038	74 15		 je	 SHORT $LN1@unix_cd

; 314  :       "unix_cd/1: bad directory");

  0003a	8b 54 24 0c	 mov	 edx, DWORD PTR _wam$[esp]
  0003e	52		 push	 edx
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@ECCEMBIN@unix_cd?11?3?5bad?5directory?$AA@
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 _local_error
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004d	5e		 pop	 esi

; 316  : }

  0004e	c3		 ret	 0
$LN1@unix_cd:

; 315  :    return TRUE;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	5e		 pop	 esi

; 316  : }

  00055	c3		 ret	 0
$LN2@unix_cd:

; 311  :                       return (cell)LOCAL_ERR(xval,
; 312  :                          "unix_cd's 1st arg must be a symbol");

  00056	8b 44 24 0c	 mov	 eax, DWORD PTR _wam$[esp]
  0005a	50		 push	 eax
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CNNBALAH@unix_cd?8s?51st?5arg?5must?5be?5a?5symb@
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 _local_error
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	5e		 pop	 esi

; 316  : }

  0006a	c3		 ret	 0
_unix_cd ENDP
_TEXT	ENDS
PUBLIC	_unix_kill
; Function compile flags: /Ogtpy
;	COMDAT _unix_kill
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_unix_kill PROC						; COMDAT

; 320  : #if 0==VCC
; 321  :    /* unavailable with VCC */
; 322  :    int kill(pid_t pid, int sig);
; 323  : 
; 324  : /* to avoid djgcc errors in DOS and cc on Next */
; 325  :    cell pid,sig;
; 326  :    pid=X(1);
; 327  :    if(!INTEGER(pid))
; 328  :      return (cell)LOCAL_ERR(pid,"unix_kill's 1st arg must be an integer");
; 329  :    sig=X(2);
; 330  :    if(!INTEGER(sig))
; 331  :      return (cell)LOCAL_ERR(sig,"unix_kill's 2nd arg must be an integer");
; 332  :    if(!!kill( (pid_t)OUTPUT_INT(X(1)), (int)OUTPUT_INT(X(2))) )
; 333  :      return (cell)LOCAL_ERR(pid,"error on kill signal to this process");
; 334  : #endif
; 335  :    return TRUE;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 336  : }

  00005	c3		 ret	 0
_unix_kill ENDP
_TEXT	ENDS
PUBLIC	_unix_fork
; Function compile flags: /Ogtpy
;	COMDAT _unix_fork
_TEXT	SEGMENT
_unix_fork PROC						; COMDAT

; 362  :   int unix_fork() {return -1;}

  00000	83 c8 ff	 or	 eax, -1
  00003	c3		 ret	 0
_unix_fork ENDP
_TEXT	ENDS
PUBLIC	_unix_pid
EXTRN	__getpid:PROC
; Function compile flags: /Ogtpy
;	COMDAT _unix_pid
_TEXT	SEGMENT
_unix_pid PROC						; COMDAT

; 370  :  int unix_pid() {int p=_getpid(); return (p>= -1)?p:-p;}

  00000	e8 00 00 00 00	 call	 __getpid
  00005	83 f8 ff	 cmp	 eax, -1
  00008	7d 02		 jge	 SHORT $LN4@unix_pid
  0000a	f7 d8		 neg	 eax
$LN4@unix_pid:
  0000c	c3		 ret	 0
_unix_pid ENDP
_TEXT	ENDS
PUBLIC	_unix_sleep
EXTRN	__sleep:PROC
; Function compile flags: /Ogtpy
;	COMDAT _unix_sleep
_TEXT	SEGMENT
_n$ = 8							; size = 4
_unix_sleep PROC					; COMDAT

; 371  :  int unix_sleep(int n) {_sleep(n*1000); return 1;}

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _n$[esp-4]
  00004	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 __sleep
  00010	83 c4 04	 add	 esp, 4
  00013	b8 01 00 00 00	 mov	 eax, 1
  00018	c3		 ret	 0
_unix_sleep ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@FEBOBAAF@bad?5file?5name?5in?5open_stream?$AA@ ; `string'
PUBLIC	??_C@_0CB@DNAAMOJJ@unexpected?5option?5in?5open_stream@ ; `string'
PUBLIC	??_C@_0BN@JHPLEMGG@C?9error?3?5popen?5not?5available?$AA@ ; `string'
PUBLIC	??_C@_0BB@NEPCAIIN@C?9error?5in?5fopen?$AA@	; `string'
PUBLIC	??_C@_0L@GPPAJHFJ@user_error?$AA@		; `string'
PUBLIC	??_C@_0M@GCILGOCP@user_output?$AA@		; `string'
PUBLIC	??_C@_0L@FAMAGEAK@user_input?$AA@		; `string'
PUBLIC	??_C@_0BK@GBHOCACO@bad?5opcode?5in?5open_stream?$AA@ ; `string'
PUBLIC	_open_stream
EXTRN	__popen:PROC
EXTRN	_fopen:PROC
EXTRN	___iob_func:PROC
;	COMDAT ??_C@_0BN@FEBOBAAF@bad?5file?5name?5in?5open_stream?$AA@
CONST	SEGMENT
??_C@_0BN@FEBOBAAF@bad?5file?5name?5in?5open_stream?$AA@ DB 'bad file nam'
	DB	'e in open_stream', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DNAAMOJJ@unexpected?5option?5in?5open_stream@
CONST	SEGMENT
??_C@_0CB@DNAAMOJJ@unexpected?5option?5in?5open_stream@ DB 'unexpected op'
	DB	'tion in open_stream', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JHPLEMGG@C?9error?3?5popen?5not?5available?$AA@
CONST	SEGMENT
??_C@_0BN@JHPLEMGG@C?9error?3?5popen?5not?5available?$AA@ DB 'C-error: po'
	DB	'pen not available', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NEPCAIIN@C?9error?5in?5fopen?$AA@
CONST	SEGMENT
??_C@_0BB@NEPCAIIN@C?9error?5in?5fopen?$AA@ DB 'C-error in fopen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GPPAJHFJ@user_error?$AA@
CONST	SEGMENT
??_C@_0L@GPPAJHFJ@user_error?$AA@ DB 'user_error', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GCILGOCP@user_output?$AA@
CONST	SEGMENT
??_C@_0M@GCILGOCP@user_output?$AA@ DB 'user_output', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FAMAGEAK@user_input?$AA@
CONST	SEGMENT
??_C@_0L@FAMAGEAK@user_input?$AA@ DB 'user_input', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GBHOCACO@bad?5opcode?5in?5open_stream?$AA@
CONST	SEGMENT
??_C@_0BK@GBHOCACO@bad?5opcode?5in?5open_stream?$AA@ DB 'bad opcode in op'
	DB	'en_stream', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _open_stream
_TEXT	SEGMENT
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_open_stream PROC					; COMDAT

; 382  : { no ires;

  00000	57		 push	 edi

; 383  :   string cmd,opt; FILE *f;
; 384  :   if(!INTEGER(X(1)))

  00001	8b 7c 24 0c	 mov	 edi, DWORD PTR _regs$[esp]
  00005	8b 47 fc	 mov	 eax, DWORD PTR [edi-4]
  00008	8b c8		 mov	 ecx, eax
  0000a	80 e1 03	 and	 cl, 3
  0000d	80 f9 01	 cmp	 cl, 1
  00010	74 12		 je	 SHORT $LN15@open_strea
  00012	5f		 pop	 edi

; 385  :     return LOCAL_ERR(X(1),"bad opcode in open_stream");

  00013	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _regs$[esp-4], OFFSET ??_C@_0BK@GBHOCACO@bad?5opcode?5in?5open_stream?$AA@
  0001b	89 44 24 04	 mov	 DWORD PTR _H$[esp-4], eax
  0001f	e9 00 00 00 00	 jmp	 _local_error
$LN15@open_strea:

; 386  :   ires=OUTPUT_INT(X(1));

  00024	c1 f8 02	 sar	 eax, 2
  00027	55		 push	 ebp
  00028	8b e8		 mov	 ebp, eax

; 387  :   if(!SYMCONST( X(2) ))

  0002a	8b 47 f8	 mov	 eax, DWORD PTR [edi-8]
  0002d	8b c8		 mov	 ecx, eax
  0002f	83 e1 03	 and	 ecx, 3
  00032	80 f9 03	 cmp	 cl, 3
  00035	0f 85 92 01 00
	00		 jne	 $LN13@open_strea
  0003b	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00040	0f 85 87 01 00
	00		 jne	 $LN13@open_strea

; 389  :   cmd=NAME(X(2));

  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _atomtable
  0004c	c1 e8 02	 shr	 eax, 2
  0004f	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  00054	56		 push	 esi
  00055	8b 34 81	 mov	 esi, DWORD PTR [ecx+eax*4]

; 390  :   if(!SYMCONST( X(3) ))

  00058	8b 47 f4	 mov	 eax, DWORD PTR [edi-12]
  0005b	8b d0		 mov	 edx, eax
  0005d	83 e2 03	 and	 edx, 3
  00060	80 fa 03	 cmp	 dl, 3
  00063	0f 85 50 01 00
	00		 jne	 $LN11@open_strea
  00069	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  0006e	0f 85 45 01 00
	00		 jne	 $LN11@open_strea

; 392  :   opt=NAME(X(3));

  00074	c1 e8 02	 shr	 eax, 2
  00077	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  0007c	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 393  :   if (!strcmp(cmd,"user_input")) f = STD_in;

  0007f	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@FAMAGEAK@user_input?$AA@
  00084	8b ce		 mov	 ecx, esi
  00086	53		 push	 ebx
$LL18@open_strea:
  00087	8a 19		 mov	 bl, BYTE PTR [ecx]
  00089	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0008b	75 1a		 jne	 SHORT $LN19@open_strea
  0008d	84 db		 test	 bl, bl
  0008f	74 12		 je	 SHORT $LN20@open_strea
  00091	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00094	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00097	75 0e		 jne	 SHORT $LN19@open_strea
  00099	83 c1 02	 add	 ecx, 2
  0009c	83 c2 02	 add	 edx, 2
  0009f	84 db		 test	 bl, bl
  000a1	75 e4		 jne	 SHORT $LL18@open_strea
$LN20@open_strea:
  000a3	33 c9		 xor	 ecx, ecx
  000a5	eb 05		 jmp	 SHORT $LN21@open_strea
$LN19@open_strea:
  000a7	1b c9		 sbb	 ecx, ecx
  000a9	83 d9 ff	 sbb	 ecx, -1
$LN21@open_strea:
  000ac	85 c9		 test	 ecx, ecx
  000ae	75 1a		 jne	 SHORT $LN10@open_strea
  000b0	a1 38 01 00 00	 mov	 eax, DWORD PTR _g+312
$LN30@open_strea:
  000b5	5b		 pop	 ebx
  000b6	5e		 pop	 esi
  000b7	5d		 pop	 ebp
  000b8	5f		 pop	 edi

; 409  :     }
; 410  :   H=tval(H,(cell)f,0);

  000b9	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], 0
  000c1	89 44 24 08	 mov	 DWORD PTR _regs$[esp-4], eax
  000c5	e9 00 00 00 00	 jmp	 _tval
$LN10@open_strea:

; 394  :   else if (!strcmp(cmd, "user_output")) f = STD_out;

  000ca	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@GCILGOCP@user_output?$AA@
  000cf	8b ce		 mov	 ecx, esi
$LL22@open_strea:
  000d1	8a 19		 mov	 bl, BYTE PTR [ecx]
  000d3	3a 1a		 cmp	 bl, BYTE PTR [edx]
  000d5	75 1a		 jne	 SHORT $LN23@open_strea
  000d7	84 db		 test	 bl, bl
  000d9	74 12		 je	 SHORT $LN24@open_strea
  000db	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  000de	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  000e1	75 0e		 jne	 SHORT $LN23@open_strea
  000e3	83 c1 02	 add	 ecx, 2
  000e6	83 c2 02	 add	 edx, 2
  000e9	84 db		 test	 bl, bl
  000eb	75 e4		 jne	 SHORT $LL22@open_strea
$LN24@open_strea:
  000ed	33 c9		 xor	 ecx, ecx
  000ef	eb 05		 jmp	 SHORT $LN25@open_strea
$LN23@open_strea:
  000f1	1b c9		 sbb	 ecx, ecx
  000f3	83 d9 ff	 sbb	 ecx, -1
$LN25@open_strea:
  000f6	85 c9		 test	 ecx, ecx
  000f8	75 16		 jne	 SHORT $LN8@open_strea
  000fa	a1 3c 01 00 00	 mov	 eax, DWORD PTR _g+316
  000ff	5b		 pop	 ebx
  00100	5e		 pop	 esi
  00101	5d		 pop	 ebp
  00102	5f		 pop	 edi

; 409  :     }
; 410  :   H=tval(H,(cell)f,0);

  00103	89 4c 24 0c	 mov	 DWORD PTR _wam$[esp-4], ecx
  00107	89 44 24 08	 mov	 DWORD PTR _regs$[esp-4], eax
  0010b	e9 00 00 00 00	 jmp	 _tval
$LN8@open_strea:

; 395  :   else if (!strcmp(cmd, "user_error")) f = STD_err;

  00110	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@GPPAJHFJ@user_error?$AA@
  00115	8b ce		 mov	 ecx, esi
$LL26@open_strea:
  00117	8a 19		 mov	 bl, BYTE PTR [ecx]
  00119	3a 1a		 cmp	 bl, BYTE PTR [edx]
  0011b	75 1a		 jne	 SHORT $LN27@open_strea
  0011d	84 db		 test	 bl, bl
  0011f	74 12		 je	 SHORT $LN28@open_strea
  00121	8a 59 01	 mov	 bl, BYTE PTR [ecx+1]
  00124	3a 5a 01	 cmp	 bl, BYTE PTR [edx+1]
  00127	75 0e		 jne	 SHORT $LN27@open_strea
  00129	83 c1 02	 add	 ecx, 2
  0012c	83 c2 02	 add	 edx, 2
  0012f	84 db		 test	 bl, bl
  00131	75 e4		 jne	 SHORT $LL26@open_strea
$LN28@open_strea:
  00133	33 c9		 xor	 ecx, ecx
  00135	eb 05		 jmp	 SHORT $LN29@open_strea
$LN27@open_strea:
  00137	1b c9		 sbb	 ecx, ecx
  00139	83 d9 ff	 sbb	 ecx, -1
$LN29@open_strea:
  0013c	85 c9		 test	 ecx, ecx
  0013e	75 1d		 jne	 SHORT $LN6@open_strea
  00140	e8 00 00 00 00	 call	 ___iob_func
  00145	5b		 pop	 ebx
  00146	5e		 pop	 esi
  00147	5d		 pop	 ebp
  00148	83 c0 40	 add	 eax, 64			; 00000040H
  0014b	5f		 pop	 edi

; 409  :     }
; 410  :   H=tval(H,(cell)f,0);

  0014c	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], 0
  00154	89 44 24 08	 mov	 DWORD PTR _regs$[esp-4], eax
  00158	e9 00 00 00 00	 jmp	 _tval
$LN6@open_strea:

; 396  :   else if (0==ires)
; 397  :      { if(!(f=fopen(cmd,opt)))

  0015d	50		 push	 eax
  0015e	56		 push	 esi
  0015f	85 ed		 test	 ebp, ebp
  00161	75 2b		 jne	 SHORT $LN4@open_strea
  00163	e8 00 00 00 00	 call	 _fopen
  00168	83 c4 08	 add	 esp, 8
  0016b	85 c0		 test	 eax, eax
  0016d	0f 85 42 ff ff
	ff		 jne	 $LN30@open_strea

; 398  :        return LOCAL_ERR(X(2),"C-error in fopen");

  00173	8b 44 24 1c	 mov	 eax, DWORD PTR _wam$[esp+12]
  00177	8b 4f f8	 mov	 ecx, DWORD PTR [edi-8]
  0017a	50		 push	 eax
  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NEPCAIIN@C?9error?5in?5fopen?$AA@
  00180	51		 push	 ecx
  00181	e8 00 00 00 00	 call	 _local_error
  00186	83 c4 0c	 add	 esp, 12			; 0000000cH
  00189	5b		 pop	 ebx
  0018a	5e		 pop	 esi
  0018b	5d		 pop	 ebp
  0018c	5f		 pop	 edi

; 411  : 
; 412  :   return H;
; 413  : }

  0018d	c3		 ret	 0
$LN4@open_strea:

; 399  :      }
; 400  :   else
; 401  :     {
; 402  : #if VCC==0
; 403  :      f=popen(cmd,opt);
; 404  : #else
; 405  :      f=_popen(cmd,opt);

  0018e	e8 00 00 00 00	 call	 __popen
  00193	83 c4 08	 add	 esp, 8

; 406  : #endif
; 407  :      if(!f)

  00196	85 c0		 test	 eax, eax
  00198	0f 85 17 ff ff
	ff		 jne	 $LN30@open_strea

; 408  :       return LOCAL_ERR(X(2),"C-error: popen not available");

  0019e	8b 54 24 1c	 mov	 edx, DWORD PTR _wam$[esp+12]
  001a2	8b 47 f8	 mov	 eax, DWORD PTR [edi-8]
  001a5	52		 push	 edx
  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JHPLEMGG@C?9error?3?5popen?5not?5available?$AA@
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 _local_error
  001b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b4	5b		 pop	 ebx
  001b5	5e		 pop	 esi
  001b6	5d		 pop	 ebp
  001b7	5f		 pop	 edi

; 411  : 
; 412  :   return H;
; 413  : }

  001b8	c3		 ret	 0
$LN11@open_strea:
  001b9	5e		 pop	 esi
  001ba	5d		 pop	 ebp
  001bb	5f		 pop	 edi

; 391  :     return LOCAL_ERR(X(3),"unexpected option in open_stream");

  001bc	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _regs$[esp-4], OFFSET ??_C@_0CB@DNAAMOJJ@unexpected?5option?5in?5open_stream@
  001c4	89 44 24 04	 mov	 DWORD PTR _H$[esp-4], eax
  001c8	e9 00 00 00 00	 jmp	 _local_error
$LN13@open_strea:
  001cd	5d		 pop	 ebp
  001ce	5f		 pop	 edi

; 388  :     return LOCAL_ERR(X(2),"bad file name in open_stream");

  001cf	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _regs$[esp-4], OFFSET ??_C@_0BN@FEBOBAAF@bad?5file?5name?5in?5open_stream?$AA@
  001d7	89 44 24 04	 mov	 DWORD PTR _H$[esp-4], eax
  001db	e9 00 00 00 00	 jmp	 _local_error
_open_stream ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CGMIFBDM@C?9error?5in?5pclose?$AA@	; `string'
PUBLIC	??_C@_0BL@PNDDOIDI@bad?5opcode?5in?5close_stream?$AA@ ; `string'
PUBLIC	_close_stream
EXTRN	_fclose:PROC
EXTRN	__pclose:PROC
;	COMDAT ??_C@_0BC@CGMIFBDM@C?9error?5in?5pclose?$AA@
CONST	SEGMENT
??_C@_0BC@CGMIFBDM@C?9error?5in?5pclose?$AA@ DB 'C-error in pclose', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PNDDOIDI@bad?5opcode?5in?5close_stream?$AA@
CONST	SEGMENT
??_C@_0BL@PNDDOIDI@bad?5opcode?5in?5close_stream?$AA@ DB 'bad opcode in c'
	DB	'lose_stream', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _close_stream
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_close_stream PROC					; COMDAT

; 416  : { no retcode; FILE *f=(FILE*)untval(RX(2));

  00000	56		 push	 esi
  00001	8b 74 24 08	 mov	 esi, DWORD PTR _regs$[esp]
  00005	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 _untval

; 417  :   int pclose(FILE*);
; 418  :   if(!INTEGER(X(1)) )

  0000e	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00011	8b d1		 mov	 edx, ecx
  00013	80 e2 03	 and	 dl, 3
  00016	83 c4 04	 add	 esp, 4
  00019	80 fa 01	 cmp	 dl, 1
  0001c	74 15		 je	 SHORT $LN2@close_stre

; 419  :         return (no)LOCAL_ERR(X(1),"bad opcode in close_stream");

  0001e	8b 44 24 0c	 mov	 eax, DWORD PTR _wam$[esp]
  00022	50		 push	 eax
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PNDDOIDI@bad?5opcode?5in?5close_stream?$AA@
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _local_error
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00031	5e		 pop	 esi

; 430  : }

  00032	c3		 ret	 0
$LN2@close_stre:

; 420  :   retcode = (no)(1==(OUTPUT_INT(X(1)))?
; 421  : #if VCC>0
; 422  : 	 _pclose(f)
; 423  : #else
; 424  :      pclose(f)
; 425  : #endif
; 426  :    : fclose(f));

  00033	83 e1 fc	 and	 ecx, -4			; fffffffcH
  00036	50		 push	 eax
  00037	83 f9 04	 cmp	 ecx, 4
  0003a	75 07		 jne	 SHORT $LN5@close_stre
  0003c	e8 00 00 00 00	 call	 __pclose
  00041	eb 05		 jmp	 SHORT $LN7@close_stre
$LN5@close_stre:
  00043	e8 00 00 00 00	 call	 _fclose
$LN7@close_stre:
  00048	83 c4 04	 add	 esp, 4

; 427  : 
; 428  :   if(0!=retcode) return (no)LOCAL_ERR(X(2),"C-error in pclose");

  0004b	85 c0		 test	 eax, eax
  0004d	74 18		 je	 SHORT $LN1@close_stre
  0004f	8b 4c 24 0c	 mov	 ecx, DWORD PTR _wam$[esp]
  00053	8b 56 f8	 mov	 edx, DWORD PTR [esi-8]
  00056	51		 push	 ecx
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CGMIFBDM@C?9error?5in?5pclose?$AA@
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _local_error
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	5e		 pop	 esi

; 430  : }

  00066	c3		 ret	 0
$LN1@close_stre:

; 429  :   return TRUE;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	5e		 pop	 esi

; 430  : }

  0006d	c3		 ret	 0
_close_stream ENDP
_TEXT	ENDS
PUBLIC	_stat_left
; Function compile flags: /Ogtpy
;	COMDAT _stat_left
_TEXT	SEGMENT
_top$ = 8						; size = 4
_s$ = 12						; size = 4
_wam$ = 16						; size = 4
_stat_left PROC						; COMDAT

; 435  :   return (wam[s].margin - top)*sizeof(*top);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _s$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR _wam$[esp-4]
  00008	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  0000b	8b 44 81 14	 mov	 eax, DWORD PTR [ecx+eax*4+20]
  0000f	2b 44 24 04	 sub	 eax, DWORD PTR _top$[esp-4]
  00013	c1 f8 02	 sar	 eax, 2
  00016	03 c0		 add	 eax, eax
  00018	03 c0		 add	 eax, eax

; 436  : }

  0001a	c3		 ret	 0
_stat_left ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@DJIEGLFB@bb_size?5in?5bb_reset?5should?5be?5an@ ; `string'
PUBLIC	_bb_reset
EXTRN	_make_bboard:PROC
EXTRN	_free:PROC
EXTRN	_max:BYTE
;	COMDAT ??_C@_0CJ@DJIEGLFB@bb_size?5in?5bb_reset?5should?5be?5an@
CONST	SEGMENT
??_C@_0CJ@DJIEGLFB@bb_size?5in?5bb_reset?5should?5be?5an@ DB 'bb_size in '
	DB	'bb_reset should be an integer', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _bb_reset
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_bb_reset PROC						; COMDAT

; 452  :   register cell xval;
; 453  :   bp_long useful_data,bb_size;
; 454  :   no ok=TRUE,change_it=FALSE;
; 455  : if(OUTPUT_INT(g.bbgc)>=2)

  00000	a1 fc 00 00 00	 mov	 eax, DWORD PTR _g+252
  00005	55		 push	 ebp
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	83 e0 fc	 and	 eax, -4			; fffffffcH
  0000b	33 ff		 xor	 edi, edi
  0000d	bd 01 00 00 00	 mov	 ebp, 1
  00012	83 f8 08	 cmp	 eax, 8
  00015	0f 8c b9 00 00
	00		 jl	 $LN20@bb_reset

; 456  : { /* 2 means that bboard can dynamically grow/shrink */
; 457  :   /* 1 means that it is gc-able in prolog but will not change size */
; 458  :   change_it=TRUE;
; 459  :   IN_VALUE(1,regs[1]);xval=X(1);

  0001b	8b 74 24 10	 mov	 esi, DWORD PTR _regs$[esp+8]
  0001f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00022	8b fd		 mov	 edi, ebp
  00024	f6 c2 03	 test	 dl, 3
  00027	74 05		 je	 SHORT $LN18@bb_reset
  00029	89 56 fc	 mov	 DWORD PTR [esi-4], edx
  0002c	eb 2a		 jmp	 SHORT $LN11@bb_reset
$LN18@bb_reset:
  0002e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00030	f6 c1 03	 test	 cl, 3
  00033	75 0d		 jne	 SHORT $LN9@bb_reset
$LL10@bb_reset:
  00035	3b d1		 cmp	 edx, ecx
  00037	74 09		 je	 SHORT $LN9@bb_reset
  00039	8b d1		 mov	 edx, ecx
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	f6 c1 03	 test	 cl, 3
  00040	74 f3		 je	 SHORT $LL10@bb_reset
$LN9@bb_reset:
  00042	8b c1		 mov	 eax, ecx
  00044	83 e0 03	 and	 eax, 3
  00047	3c 03		 cmp	 al, 3
  00049	75 0a		 jne	 SHORT $LN16@bb_reset
  0004b	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  00051	74 02		 je	 SHORT $LN16@bb_reset
  00053	8b ca		 mov	 ecx, edx
$LN16@bb_reset:
  00055	89 4e fc	 mov	 DWORD PTR [esi-4], ecx
$LN11@bb_reset:
  00058	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]

; 460  :   if(!INTEGER(xval))

  0005b	8b d1		 mov	 edx, ecx
  0005d	80 e2 03	 and	 dl, 3
  00060	80 fa 01	 cmp	 dl, 1
  00063	74 17		 je	 SHORT $LN8@bb_reset

; 461  :      return(no) LOCAL_ERR(xval,"bb_size in bb_reset should be an integer");

  00065	8b 44 24 14	 mov	 eax, DWORD PTR _wam$[esp+8]
  00069	50		 push	 eax
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@DJIEGLFB@bb_size?5in?5bb_reset?5should?5be?5an@
  0006f	51		 push	 ecx
  00070	e8 00 00 00 00	 call	 _local_error
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5d		 pop	 ebp

; 498  : }

  0007b	c3		 ret	 0
$LN8@bb_reset:

; 462  : 
; 463  :   useful_data=OUTPUT_INT(xval);
; 464  :   /*if(useful_data<0)useful_data=0;*/
; 465  :   bb_size=(g.shared[BBoardStk].margin-g.shared[BBoardStk].base)*sizeof(cell);

  0007c	8b 35 a8 01 00
	00		 mov	 esi, DWORD PTR _g+424
  00082	c1 f9 02	 sar	 ecx, 2
  00085	8b d1		 mov	 edx, ecx
  00087	8b 0d ac 01 00
	00		 mov	 ecx, DWORD PTR _g+428
  0008d	2b ce		 sub	 ecx, esi
  0008f	c1 f9 02	 sar	 ecx, 2
  00092	03 c9		 add	 ecx, ecx
  00094	03 c9		 add	 ecx, ecx

; 466  : #if TRACE > 0
; 467  :   fprintf(STD_err,"bb_reset: useful_data=%ld, bb_size=%ld\n",
; 468  :                    useful_data,bb_size);
; 469  : #endif
; 470  :   if(useful_data > bb_size)

  00096	3b d1		 cmp	 edx, ecx
  00098	7e 0b		 jle	 SHORT $LN7@bb_reset

; 471  :     {   max.BOARD=useful_data<<1;

  0009a	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
  0009d	89 0d 10 00 00
	00		 mov	 DWORD PTR _max+16, ecx
  000a3	eb 35		 jmp	 SHORT $LN2@bb_reset
$LN7@bb_reset:

; 472  :     }
; 473  :   else if(useful_data > (bb_size>>1))

  000a5	8b c1		 mov	 eax, ecx
  000a7	d1 f8		 sar	 eax, 1
  000a9	3b d0		 cmp	 edx, eax
  000ab	7e 08		 jle	 SHORT $LN5@bb_reset

; 474  :     {  max.BOARD=max.BOARD<<1;

  000ad	d1 25 10 00 00
	00		 shl	 DWORD PTR _max+16, 1

; 475  :     }
; 476  :   else if((bb_size>>2)>(g.shared[BBoardStk].over<<4) &&

  000b3	eb 25		 jmp	 SHORT $LN2@bb_reset
$LN5@bb_reset:

; 477  :           useful_data < (bb_size>>2))

  000b5	a1 9c 01 00 00	 mov	 eax, DWORD PTR _g+412
  000ba	c1 f9 02	 sar	 ecx, 2
  000bd	c1 e0 04	 shl	 eax, 4
  000c0	3b c8		 cmp	 ecx, eax
  000c2	7e 0c		 jle	 SHORT $LN3@bb_reset
  000c4	3b d1		 cmp	 edx, ecx
  000c6	7d 08		 jge	 SHORT $LN3@bb_reset

; 478  :     {  max.BOARD=max.BOARD>>1;

  000c8	d1 2d 10 00 00
	00		 shr	 DWORD PTR _max+16, 1

; 479  :     }
; 480  :   else {

  000ce	eb 0a		 jmp	 SHORT $LN2@bb_reset
$LN3@bb_reset:

; 481  :     change_it=FALSE;

  000d0	33 ff		 xor	 edi, edi
  000d2	eb 06		 jmp	 SHORT $LN2@bb_reset
$LN20@bb_reset:
  000d4	8b 35 a8 01 00
	00		 mov	 esi, DWORD PTR _g+424
$LN2@bb_reset:

; 482  :   }
; 483  : }
; 484  : 
; 485  :   g.shared[BBoardStk].top=g.shared[BBoardStk].base;

  000da	89 35 a0 01 00
	00		 mov	 DWORD PTR _g+416, esi

; 486  : 
; 487  :   /* used to trigger tetris bug on Windows - fixed */
; 488  : 
; 489  :   if(change_it)

  000e0	85 ff		 test	 edi, edi
  000e2	74 1b		 je	 SHORT $LN1@bb_reset

; 490  :   {
; 491  :     XFREE(g.shared[BBoardStk].base);

  000e4	56		 push	 esi
  000e5	e8 00 00 00 00	 call	 _free

; 492  :     ok=make_bboard(wam);

  000ea	8b 4c 24 18	 mov	 ecx, DWORD PTR _wam$[esp+12]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 _make_bboard
  000f4	8b 35 a8 01 00
	00		 mov	 esi, DWORD PTR _g+424
  000fa	83 c4 08	 add	 esp, 8
  000fd	8b e8		 mov	 ebp, eax
$LN1@bb_reset:

; 493  :   }
; 494  : 
; 495  :   g.shared[BBoardStk].top=g.shared[BBoardStk].base;

  000ff	5f		 pop	 edi
  00100	89 35 a0 01 00
	00		 mov	 DWORD PTR _g+416, esi
  00106	5e		 pop	 esi

; 496  : 
; 497  :   return ok;

  00107	8b c5		 mov	 eax, ebp
  00109	5d		 pop	 ebp

; 498  : }

  0010a	c3		 ret	 0
_bb_reset ENDP
_TEXT	ENDS
PUBLIC	_stats0
EXTRN	_unify:PROC
EXTRN	_realtime:PROC
EXTRN	_hcount:DWORD
EXTRN	_newatom:DWORD
EXTRN	_lextable:DWORD
EXTRN	_newlex:DWORD
EXTRN	_cputime:PROC
; Function compile flags: /Ogtpy
;	COMDAT _stats0
_TEXT	SEGMENT
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_A$ = 20						; size = 4
_stats0	PROC						; COMDAT

; 502  :   register cell xval;
; 503  :   bp_long ires; bp_long o1,o2;
; 504  :                 IN_VALUE(3,regs[3]);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _regs$[esp-4]
  00004	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00007	53		 push	 ebx
  00008	f6 c1 03	 test	 cl, 3
  0000b	74 05		 je	 SHORT $LN46@stats0
  0000d	89 4a f4	 mov	 DWORD PTR [edx-12], ecx
  00010	eb 28		 jmp	 SHORT $LN20@stats0
$LN46@stats0:
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	a8 03		 test	 al, 3
  00016	75 0c		 jne	 SHORT $LN18@stats0
$LL19@stats0:
  00018	3b c8		 cmp	 ecx, eax
  0001a	74 08		 je	 SHORT $LN18@stats0
  0001c	8b c8		 mov	 ecx, eax
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	a8 03		 test	 al, 3
  00022	74 f4		 je	 SHORT $LL19@stats0
$LN18@stats0:
  00024	8b d8		 mov	 ebx, eax
  00026	83 e3 03	 and	 ebx, 3
  00029	80 fb 03	 cmp	 bl, 3
  0002c	75 09		 jne	 SHORT $LN24@stats0
  0002e	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00033	74 02		 je	 SHORT $LN24@stats0
  00035	8b c1		 mov	 eax, ecx
$LN24@stats0:
  00037	89 42 f4	 mov	 DWORD PTR [edx-12], eax
$LN20@stats0:

; 505  :                 if(!INTEGER(X(3))) return FALSE;

  0003a	8b 42 f4	 mov	 eax, DWORD PTR [edx-12]
  0003d	8b c8		 mov	 ecx, eax
  0003f	80 e1 03	 and	 cl, 3
  00042	80 f9 01	 cmp	 cl, 1
  00045	74 04		 je	 SHORT $LN17@stats0
  00047	33 c0		 xor	 eax, eax
  00049	5b		 pop	 ebx

; 564  :              return TRUE;
; 565  : }

  0004a	c3		 ret	 0
$LN17@stats0:
  0004b	55		 push	 ebp

; 506  :                 ires=OUTPUT_INT(X(3));

  0004c	c1 f8 02	 sar	 eax, 2
  0004f	56		 push	 esi
  00050	57		 push	 edi

; 507  :                 switch(ires)

  00051	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00054	0f 87 ac 01 00
	00		 ja	 $LN3@stats0
  0005a	8b 6c 24 20	 mov	 ebp, DWORD PTR _A$[esp+12]
  0005e	8b 5c 24 1c	 mov	 ebx, DWORD PTR _wam$[esp+12]
  00062	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN52@stats0[eax*4]
$LN14@stats0:

; 508  :                 {
; 509  :                   case STAT_RUNTIME:
; 510  :                   { bp_long t=cputime();

  00069	e8 00 00 00 00	 call	 _cputime
  0006e	8b f0		 mov	 esi, eax

; 511  :                     o1=t;
; 512  :                     o2=t-g.rtime;

  00070	8b fe		 mov	 edi, esi
  00072	2b 3d 24 01 00
	00		 sub	 edi, DWORD PTR _g+292

; 513  :                     g.rtime=t;

  00078	89 35 24 01 00
	00		 mov	 DWORD PTR _g+292, esi

; 514  :                   } break;

  0007e	e9 3a 01 00 00	 jmp	 $LN51@stats0
$LN13@stats0:

; 515  : 
; 516  :                   case STAT_GLOBAL_STACK:
; 517  :                     STAT(H,HeapStk);

  00083	8b 44 24 14	 mov	 eax, DWORD PTR _H$[esp+12]
  00087	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0008a	8b f0		 mov	 esi, eax
  0008c	2b 73 10	 sub	 esi, DWORD PTR [ebx+16]
  0008f	2b f8		 sub	 edi, eax
  00091	c1 fe 02	 sar	 esi, 2
  00094	c1 ff 02	 sar	 edi, 2
  00097	03 f6		 add	 esi, esi
  00099	03 ff		 add	 edi, edi
  0009b	03 f6		 add	 esi, esi
  0009d	03 ff		 add	 edi, edi
  0009f	e9 1d 01 00 00	 jmp	 $LN15@stats0
$LN12@stats0:

; 518  : 
; 519  :                   case STAT_LOCAL_STACK:
; 520  :                     STAT(A,ChoiceStk);

  000a4	8b 7b 5c	 mov	 edi, DWORD PTR [ebx+92]
  000a7	8b f5		 mov	 esi, ebp
  000a9	2b 73 58	 sub	 esi, DWORD PTR [ebx+88]
  000ac	2b fd		 sub	 edi, ebp
  000ae	c1 fe 02	 sar	 esi, 2
  000b1	c1 ff 02	 sar	 edi, 2
  000b4	03 f6		 add	 esi, esi
  000b6	03 ff		 add	 edi, edi
  000b8	03 f6		 add	 esi, esi
  000ba	03 ff		 add	 edi, edi
  000bc	e9 00 01 00 00	 jmp	 $LN15@stats0
$LN11@stats0:

; 521  : 
; 522  :                   case STAT_TRAIL:
; 523  :                     STAT(TR_TOP,TrailStk);

  000c1	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000c4	8b 7b 38	 mov	 edi, DWORD PTR [ebx+56]
  000c7	8b f0		 mov	 esi, eax
  000c9	2b 73 34	 sub	 esi, DWORD PTR [ebx+52]
  000cc	2b f8		 sub	 edi, eax
  000ce	c1 fe 02	 sar	 esi, 2
  000d1	c1 ff 02	 sar	 edi, 2
  000d4	03 f6		 add	 esi, esi
  000d6	03 ff		 add	 edi, edi
  000d8	03 f6		 add	 esi, esi
  000da	03 ff		 add	 edi, edi
  000dc	e9 e0 00 00 00	 jmp	 $LN15@stats0
$LN10@stats0:

; 524  : 
; 525  :                   case STAT_CODE:
; 526  :                     StackSTAT(ctop,InstrStk,g.shared);

  000e1	a1 7c 01 00 00	 mov	 eax, DWORD PTR _g+380
  000e6	8b 3d 88 01 00
	00		 mov	 edi, DWORD PTR _g+392
  000ec	8b f0		 mov	 esi, eax
  000ee	2b 35 84 01 00
	00		 sub	 esi, DWORD PTR _g+388
  000f4	2b f8		 sub	 edi, eax
  000f6	c1 fe 02	 sar	 esi, 2
  000f9	c1 ff 02	 sar	 edi, 2
  000fc	03 f6		 add	 esi, esi
  000fe	03 ff		 add	 edi, edi
  00100	03 f6		 add	 esi, esi
  00102	03 ff		 add	 edi, edi
  00104	e9 b8 00 00 00	 jmp	 $LN15@stats0
$LN9@stats0:

; 527  : 
; 528  :                   case STAT_STRINGS:
; 529  :                     o1=(newlex-lextable);

  00109	a1 00 00 00 00	 mov	 eax, DWORD PTR _newlex

; 530  :                     o2=(lextable+MAXLEX)-newlex;

  0010e	8b 3d 18 00 00
	00		 mov	 edi, DWORD PTR _max+24
  00114	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _lextable
  0011a	c1 e7 04	 shl	 edi, 4
  0011d	8b f0		 mov	 esi, eax
  0011f	2b f8		 sub	 edi, eax
  00121	2b f1		 sub	 esi, ecx
  00123	03 f9		 add	 edi, ecx

; 531  :                   break;

  00125	e9 97 00 00 00	 jmp	 $LN15@stats0
$LN8@stats0:

; 532  : 
; 533  :                   case STAT_SYMBOLS:
; 534  :                     o1=newatom*sizeof(string);

  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR _newatom

; 535  :                     o2=(MAXATOM-newatom)*sizeof(string);

  0012f	8b 3d 18 00 00
	00		 mov	 edi, DWORD PTR _max+24
  00135	2b f8		 sub	 edi, eax
  00137	03 ff		 add	 edi, edi
  00139	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00140	03 ff		 add	 edi, edi

; 536  :                   break;

  00142	eb 7d		 jmp	 SHORT $LN15@stats0
$LN7@stats0:

; 537  : 
; 538  :                   case STAT_HTABLE:
; 539  :                     o1=(hcount+1)*sizeof(struct hentry);

  00144	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _hcount

; 540  :                     o2=(HMAX-(hcount+1))*sizeof(struct hentry);

  0014a	a1 14 00 00 00	 mov	 eax, DWORD PTR _max+20
  0014f	2b c1		 sub	 eax, ecx
  00151	8d 74 49 03	 lea	 esi, DWORD PTR [ecx+ecx*2+3]
  00155	03 f6		 add	 esi, esi
  00157	8d 7c 40 fd	 lea	 edi, DWORD PTR [eax+eax*2-3]
  0015b	03 ff		 add	 edi, edi
  0015d	03 f6		 add	 esi, esi
  0015f	03 ff		 add	 edi, edi

; 541  :                   break;

  00161	eb 5e		 jmp	 SHORT $LN15@stats0
$LN6@stats0:

; 542  : 
; 543  :                   case STAT_BBOARD:
; 544  :                     StackSTAT(g.shared[BBoardStk].top,BBoardStk,g.shared);

  00163	a1 a0 01 00 00	 mov	 eax, DWORD PTR _g+416
  00168	8b 3d ac 01 00
	00		 mov	 edi, DWORD PTR _g+428
  0016e	8b f0		 mov	 esi, eax
  00170	2b 35 a8 01 00
	00		 sub	 esi, DWORD PTR _g+424
  00176	2b f8		 sub	 edi, eax
  00178	c1 fe 02	 sar	 esi, 2
  0017b	c1 ff 02	 sar	 edi, 2
  0017e	03 f6		 add	 esi, esi
  00180	03 ff		 add	 edi, edi
  00182	03 f6		 add	 esi, esi
  00184	03 ff		 add	 edi, edi
  00186	eb 39		 jmp	 SHORT $LN15@stats0
$LN5@stats0:

; 545  :                   break;
; 546  : 
; 547  :                   case STAT_GCTIME:
; 548  :                   {
; 549  :                     g.total_gctime += g.gctime;

  00188	8b 35 28 01 00
	00		 mov	 esi, DWORD PTR _g+296
  0018e	8b 3d 2c 01 00
	00		 mov	 edi, DWORD PTR _g+300
  00194	03 f7		 add	 esi, edi
  00196	89 35 28 01 00
	00		 mov	 DWORD PTR _g+296, esi

; 550  :                     o1 = g.total_gctime;
; 551  :                     o2 = g.gctime; g.gctime=ZERO;

  0019c	c7 05 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR _g+300, 0

; 552  :                   } break;

  001a6	eb 19		 jmp	 SHORT $LN15@stats0
$LN4@stats0:

; 553  : 
; 554  :                   case STAT_REALTIME:
; 555  :                   {
; 556  :                     o1 = realtime(2);

  001a8	6a 02		 push	 2
  001aa	e8 00 00 00 00	 call	 _realtime

; 557  :                     o2 = realtime(1);

  001af	6a 01		 push	 1
  001b1	8b f0		 mov	 esi, eax
  001b3	e8 00 00 00 00	 call	 _realtime
  001b8	83 c4 08	 add	 esp, 8
  001bb	8b f8		 mov	 edi, eax
$LN51@stats0:
  001bd	8b 54 24 18	 mov	 edx, DWORD PTR _regs$[esp+12]
$LN15@stats0:

; 561  :                 }
; 562  :                 PUT_INT_ARG(1,o1)

  001c1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  001c4	55		 push	 ebp
  001c5	53		 push	 ebx
  001c6	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]
  001cd	52		 push	 edx
  001ce	83 c8 01	 or	 eax, 1
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 _unify
  001d7	83 c4 10	 add	 esp, 16			; 00000010H
  001da	85 c0		 test	 eax, eax
  001dc	74 28		 je	 SHORT $LN3@stats0

; 563  :                 PUT_INT_ARG(2,o2)

  001de	8b 4c 24 18	 mov	 ecx, DWORD PTR _regs$[esp+12]
  001e2	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001e5	55		 push	 ebp
  001e6	53		 push	 ebx
  001e7	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  001ee	52		 push	 edx
  001ef	83 c8 01	 or	 eax, 1
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 _unify
  001f8	83 c4 10	 add	 esp, 16			; 00000010H
  001fb	5f		 pop	 edi
  001fc	f7 d8		 neg	 eax
  001fe	5e		 pop	 esi
  001ff	1b c0		 sbb	 eax, eax
  00201	5d		 pop	 ebp
  00202	f7 d8		 neg	 eax
  00204	5b		 pop	 ebx

; 564  :              return TRUE;
; 565  : }

  00205	c3		 ret	 0
$LN3@stats0:
  00206	5f		 pop	 edi
  00207	5e		 pop	 esi
  00208	5d		 pop	 ebp

; 558  :                   } break;
; 559  : 
; 560  :                   default: return FALSE;

  00209	33 c0		 xor	 eax, eax
  0020b	5b		 pop	 ebx

; 564  :              return TRUE;
; 565  : }

  0020c	c3		 ret	 0
  0020d	8d 49 00	 npad	 3
$LN52@stats0:
  00210	00 00 00 00	 DD	 $LN14@stats0
  00214	00 00 00 00	 DD	 $LN13@stats0
  00218	00 00 00 00	 DD	 $LN12@stats0
  0021c	00 00 00 00	 DD	 $LN11@stats0
  00220	00 00 00 00	 DD	 $LN10@stats0
  00224	00 00 00 00	 DD	 $LN9@stats0
  00228	00 00 00 00	 DD	 $LN8@stats0
  0022c	00 00 00 00	 DD	 $LN7@stats0
  00230	00 00 00 00	 DD	 $LN6@stats0
  00234	00 00 00 00	 DD	 $LN5@stats0
  00238	00 00 00 00	 DD	 $LN4@stats0
_stats0	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DA@GNLIEPLO@1?9st?5arg?5of?5new_name?12?5should?5be@ ; `string'
PUBLIC	??_C@_0M@DEPOBDDI@v?$CFu?$CFlu?$CFs?$CFlu?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_new_name
EXTRN	_sprintf:PROC
EXTRN	_rand:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__chkstk:PROC
;	COMDAT ??_C@_0DA@GNLIEPLO@1?9st?5arg?5of?5new_name?12?5should?5be@
CONST	SEGMENT
??_C@_0DA@GNLIEPLO@1?9st?5arg?5of?5new_name?12?5should?5be@ DB '1-st arg '
	DB	'of new_name/2 should be an identfifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DEPOBDDI@v?$CFu?$CFlu?$CFs?$CFlu?$AA@
CONST	SEGMENT
??_C@_0M@DEPOBDDI@v?$CFu?$CFlu?$CFs?$CFlu?$AA@ DB 'v%u%lu%s%lu', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _new_name
_TEXT	SEGMENT
_sbuf$ = -65540						; size = 65536
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_wam$ = 12						; size = 4
_new_name PROC						; COMDAT

; 567  : cell new_name(cell x,register stack wam) {

  00000	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 00 00
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+65540], eax
  00018	8b 84 24 08 00
	01 00		 mov	 eax, DWORD PTR _x$[esp+65536]
  0001f	8b 8c 24 0c 00
	01 00		 mov	 ecx, DWORD PTR _wam$[esp+65536]

; 568  :   static no ctr=0;
; 569  :   char sbuf[MAXNBUF];
; 570  :   if(!SYMCONST(x))

  00026	8b d0		 mov	 edx, eax
  00028	83 e2 03	 and	 edx, 3
  0002b	80 fa 03	 cmp	 dl, 3
  0002e	75 6d		 jne	 SHORT $LN1@new_name
  00030	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00035	75 66		 jne	 SHORT $LN1@new_name

; 573  :   sprintf(sbuf,"v%u%lu%s%lu",VERSION%100,MOD(g.rtime+rand(),1024),NAME(x),ctr++);

  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ctr@?1??new_name@@9@9
  0003d	51		 push	 ecx
  0003e	41		 inc	 ecx
  0003f	c1 e8 02	 shr	 eax, 2
  00042	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ctr@?1??new_name@@9@9, ecx
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _atomtable
  0004e	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  00053	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 _rand
  0005c	03 05 24 01 00
	00		 add	 eax, DWORD PTR _g+292
  00062	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00067	50		 push	 eax
  00068	6a 00		 push	 0
  0006a	8d 44 24 10	 lea	 eax, DWORD PTR _sbuf$[esp+65556]
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DEPOBDDI@v?$CFu?$CFlu?$CFs?$CFlu?$AA@
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _sprintf

; 574  :   return INPUT_STRING(sbuf);

  00079	8d 4c 24 18	 lea	 ecx, DWORD PTR _sbuf$[esp+65564]
  0007d	6a 00		 push	 0
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 _new_func
  00085	83 c4 20	 add	 esp, 32			; 00000020H

; 575  : }

  00088	8b 8c 24 00 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65540]
  0008f	33 cc		 xor	 ecx, esp
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	81 c4 04 00 01
	00		 add	 esp, 65540		; 00010004H
  0009c	c3		 ret	 0
$LN1@new_name:

; 571  :     return (cell)LOCAL_ERR(x,
; 572  :        "1-st arg of new_name/2 should be an identfifier");

  0009d	51		 push	 ecx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GNLIEPLO@1?9st?5arg?5of?5new_name?12?5should?5be@
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _local_error

; 575  : }

  000a9	8b 8c 24 0c 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65552]
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b3	33 cc		 xor	 ecx, esp
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	81 c4 04 00 01
	00		 add	 esp, 65540		; 00010004H
  000c0	c3		 ret	 0
_new_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@PPLLNBGE@symcat?13?3?5bad?5arguments?$AA@ ; `string'
PUBLIC	??_C@_0L@LHOLKKGE@?$CF?4250s_?$CFld?$AA@	; `string'
PUBLIC	??_C@_0M@BAJEFOCJ@?$CF?4250s__?$CFld?$AA@	; `string'
PUBLIC	??_C@_0O@DOKBFKOC@?$CF?4250s_?$CF?4250s?$AA@	; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_symcat
EXTRN	_warnmes:PROC
;	COMDAT ??_C@_0BI@PPLLNBGE@symcat?13?3?5bad?5arguments?$AA@
CONST	SEGMENT
??_C@_0BI@PPLLNBGE@symcat?13?3?5bad?5arguments?$AA@ DB 'symcat/3: bad arg'
	DB	'uments', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LHOLKKGE@?$CF?4250s_?$CFld?$AA@
CONST	SEGMENT
??_C@_0L@LHOLKKGE@?$CF?4250s_?$CFld?$AA@ DB '%.250s_%ld', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BAJEFOCJ@?$CF?4250s__?$CFld?$AA@
CONST	SEGMENT
??_C@_0M@BAJEFOCJ@?$CF?4250s__?$CFld?$AA@ DB '%.250s__%ld', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOKBFKOC@?$CF?4250s_?$CF?4250s?$AA@
CONST	SEGMENT
??_C@_0O@DOKBFKOC@?$CF?4250s_?$CF?4250s?$AA@ DB '%.250s_%.250s', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _symcat
_TEXT	SEGMENT
_sbuf$ = -65540						; size = 65536
__$ArrayPad$ = -4					; size = 4
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_symcat	PROC						; COMDAT

; 578  : { cell x1=X(1), x2=X(2);

  00000	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 00 00
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+65540], eax
  00018	8b 8c 24 08 00
	01 00		 mov	 ecx, DWORD PTR _regs$[esp+65536]
  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00022	8b 49 f8	 mov	 ecx, DWORD PTR [ecx-8]

; 579  :   char sbuf[MAXNBUF];
; 580  :   if(!SYMCONST(x1))

  00025	8b d0		 mov	 edx, eax
  00027	83 e2 03	 and	 edx, 3
  0002a	56		 push	 esi
  0002b	8b b4 24 10 00
	01 00		 mov	 esi, DWORD PTR _wam$[esp+65540]
  00032	80 fa 03	 cmp	 dl, 3
  00035	0f 85 b1 00 00
	00		 jne	 $LN5@symcat
  0003b	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00040	0f 85 a6 00 00
	00		 jne	 $LN5@symcat

; 582  :   if(SYMCONST(x2))

  00046	8b d1		 mov	 edx, ecx
  00048	83 e2 03	 and	 edx, 3
  0004b	83 fa 03	 cmp	 edx, 3
  0004e	75 2e		 jne	 SHORT $LN4@symcat
  00050	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  00056	75 26		 jne	 SHORT $LN4@symcat

; 583  :     sprintf(sbuf,"%.250s_%.250s",NAME(x1),NAME(x2));

  00058	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _atomtable
  0005e	c1 e9 02	 shr	 ecx, 2
  00061	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  00067	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  0006a	c1 e8 02	 shr	 eax, 2
  0006d	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  00072	8b 14 82	 mov	 edx, DWORD PTR [edx+eax*4]
  00075	51		 push	 ecx
  00076	52		 push	 edx
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DOKBFKOC@?$CF?4250s_?$CF?4250s?$AA@
  0007c	eb 3c		 jmp	 SHORT $LN9@symcat
$LN4@symcat:

; 584  :   else if(VAR(x2))
; 585  :     sprintf(sbuf,"%.250s__%ld",NAME(x1),
; 586  :       (cell)((term)x2-(term)wam[HeapStk].base));

  0007e	c1 e8 02	 shr	 eax, 2
  00081	85 d2		 test	 edx, edx
  00083	75 1d		 jne	 SHORT $LN2@symcat
  00085	2b 4e 10	 sub	 ecx, DWORD PTR [esi+16]
  00088	c1 f9 02	 sar	 ecx, 2
  0008b	51		 push	 ecx
  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _atomtable
  00092	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  00097	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0009a	52		 push	 edx
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BAJEFOCJ@?$CF?4250s__?$CFld?$AA@

; 587  :   else

  000a0	eb 18		 jmp	 SHORT $LN9@symcat
$LN2@symcat:

; 588  :     sprintf(sbuf,"%.250s_%ld",NAME(x1),OUTPUT_INT(x2));

  000a2	c1 f9 02	 sar	 ecx, 2
  000a5	51		 push	 ecx
  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _atomtable
  000ac	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  000b1	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000b4	52		 push	 edx
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LHOLKKGE@?$CF?4250s_?$CFld?$AA@
$LN9@symcat:
  000ba	8d 44 24 10	 lea	 eax, DWORD PTR _sbuf$[esp+65556]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 _sprintf
  000c4	83 c4 10	 add	 esp, 16			; 00000010H

; 589  :   return INPUT_STRING(sbuf);

  000c7	8d 4c 24 04	 lea	 ecx, DWORD PTR _sbuf$[esp+65544]
  000cb	6a 00		 push	 0
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 _new_func
  000d3	83 c4 08	 add	 esp, 8
  000d6	5e		 pop	 esi

; 590  : }

  000d7	8b 8c 24 00 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65540]
  000de	33 cc		 xor	 ecx, esp
  000e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e5	81 c4 04 00 01
	00		 add	 esp, 65540		; 00010004H
  000eb	c3		 ret	 0
$LN5@symcat:

; 581  :     ERREXIT("symcat/3: bad arguments")

  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PPLLNBGE@symcat?13?3?5bad?5arguments?$AA@
  000f1	e8 00 00 00 00	 call	 _warnmes

; 590  : }

  000f6	8b 8c 24 08 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65548]
  000fd	83 c4 04	 add	 esp, 4
  00100	5e		 pop	 esi
  00101	33 cc		 xor	 ecx, esp
  00103	33 c0		 xor	 eax, eax
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	81 c4 04 00 01
	00		 add	 esp, 65540		; 00010004H
  00110	c3		 ret	 0
_symcat	ENDP
_TEXT	ENDS
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_03JALODAI@?$CFld?$AA@			; `string'
PUBLIC	??_C@_0BI@PMMODJNG@namecat?13?3?5bad?53?9nd?5arg?$AA@ ; `string'
PUBLIC	??_C@_0BI@OLLFCNJF@namecat?13?3?5bad?52?9nd?5arg?$AA@ ; `string'
PUBLIC	??_C@_0BI@NHOHOOMF@namecat?13?3?5bad?51?9st?5arg?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_namecat
EXTRN	_strncpy:PROC
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT
??_C@_03JALODAI@?$CFld?$AA@ DB '%ld', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PMMODJNG@namecat?13?3?5bad?53?9nd?5arg?$AA@
CONST	SEGMENT
??_C@_0BI@PMMODJNG@namecat?13?3?5bad?53?9nd?5arg?$AA@ DB 'namecat/3: bad '
	DB	'3-nd arg', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OLLFCNJF@namecat?13?3?5bad?52?9nd?5arg?$AA@
CONST	SEGMENT
??_C@_0BI@OLLFCNJF@namecat?13?3?5bad?52?9nd?5arg?$AA@ DB 'namecat/3: bad '
	DB	'2-nd arg', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NHOHOOMF@namecat?13?3?5bad?51?9st?5arg?$AA@
CONST	SEGMENT
??_C@_0BI@NHOHOOMF@namecat?13?3?5bad?51?9st?5arg?$AA@ DB 'namecat/3: bad '
	DB	'1-st arg', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _namecat
_TEXT	SEGMENT
_ibuf2$ = -114692					; size = 16416
_ibuf1$ = -98308					; size = 16384
_ibuf3$ = -81924					; size = 16416
_sbuf$ = -65540						; size = 65536
__$ArrayPad$ = -4					; size = 4
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_namecat PROC						; COMDAT

; 600  : { register cell x1=X(1), x2=X(2), x3=X(3);

  00000	b8 04 c0 01 00	 mov	 eax, 114692		; 0001c004H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 00 c0
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+114692], eax
  00018	8b 84 24 08 c0
	01 00		 mov	 eax, DWORD PTR _regs$[esp+114688]
  0001f	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00022	56		 push	 esi
  00023	8b 70 f8	 mov	 esi, DWORD PTR [eax-8]
  00026	57		 push	 edi
  00027	8b 78 f4	 mov	 edi, DWORD PTR [eax-12]

; 601  :   char sbuf[MAXNBUF];
; 602  :   char ibuf1[IBUFMAX];
; 603  :   char ibuf2[IBUFMAX];
; 604  :   char ibuf3[IBUFMAX];
; 605  :   ATOMIZE(x1);ATOMIZE(x2);ATOMIZE(x3);

  0002a	8b c1		 mov	 eax, ecx
  0002c	83 e0 03	 and	 eax, 3
  0002f	74 0d		 je	 SHORT $LN18@namecat
  00031	83 f8 01	 cmp	 eax, 1
  00034	74 0a		 je	 SHORT $LN15@namecat
  00036	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  0003c	74 02		 je	 SHORT $LN15@namecat
$LN18@namecat:
  0003e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN15@namecat:
  00040	8b c6		 mov	 eax, esi
  00042	83 e0 03	 and	 eax, 3
  00045	74 0d		 je	 SHORT $LN19@namecat
  00047	83 f8 01	 cmp	 eax, 1
  0004a	74 0a		 je	 SHORT $LN13@namecat
  0004c	f7 c6 00 00 00
	ff		 test	 esi, -16777216		; ff000000H
  00052	74 02		 je	 SHORT $LN13@namecat
$LN19@namecat:
  00054	8b 36		 mov	 esi, DWORD PTR [esi]
$LN13@namecat:
  00056	8b c7		 mov	 eax, edi
  00058	83 e0 03	 and	 eax, 3
  0005b	74 0d		 je	 SHORT $LN20@namecat
  0005d	83 f8 01	 cmp	 eax, 1
  00060	74 0a		 je	 SHORT $LN11@namecat
  00062	f7 c7 00 00 00
	ff		 test	 edi, -16777216		; ff000000H
  00068	74 02		 je	 SHORT $LN11@namecat
$LN20@namecat:
  0006a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN11@namecat:

; 606  : 
; 607  :   if(VAR(x1))

  0006c	8b c1		 mov	 eax, ecx
  0006e	83 e0 03	 and	 eax, 3
  00071	75 26		 jne	 SHORT $LN9@namecat

; 608  :     ERREXIT("namecat/3: bad 1-st arg")

  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NHOHOOMF@namecat?13?3?5bad?51?9st?5arg?$AA@
  00078	e8 00 00 00 00	 call	 _warnmes
  0007d	83 c4 04	 add	 esp, 4
  00080	5f		 pop	 edi
  00081	33 c0		 xor	 eax, eax
  00083	5e		 pop	 esi

; 620  : }

  00084	8b 8c 24 00 c0
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+114692]
  0008b	33 cc		 xor	 ecx, esp
  0008d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00092	81 c4 04 c0 01
	00		 add	 esp, 114692		; 0001c004H
  00098	c3		 ret	 0
$LN9@namecat:
  00099	53		 push	 ebx

; 609  :   if(VAR(x2))

  0009a	8b de		 mov	 ebx, esi
  0009c	83 e3 03	 and	 ebx, 3
  0009f	75 27		 jne	 SHORT $LN8@namecat

; 610  :     ERREXIT("namecat/3: bad 2-nd arg")

  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OLLFCNJF@namecat?13?3?5bad?52?9nd?5arg?$AA@
  000a6	e8 00 00 00 00	 call	 _warnmes
  000ab	83 c4 04	 add	 esp, 4
  000ae	5b		 pop	 ebx
  000af	5f		 pop	 edi
  000b0	33 c0		 xor	 eax, eax
  000b2	5e		 pop	 esi

; 620  : }

  000b3	8b 8c 24 00 c0
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+114692]
  000ba	33 cc		 xor	 ecx, esp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	81 c4 04 c0 01
	00		 add	 esp, 114692		; 0001c004H
  000c7	c3		 ret	 0
$LN8@namecat:
  000c8	55		 push	 ebp

; 611  :   if(VAR(x3))

  000c9	8b ef		 mov	 ebp, edi
  000cb	83 e5 03	 and	 ebp, 3
  000ce	75 14		 jne	 SHORT $LN7@namecat

; 612  :     ERREXIT("namecat/3: bad 3-nd arg")

  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PMMODJNG@namecat?13?3?5bad?53?9nd?5arg?$AA@
  000d5	e8 00 00 00 00	 call	 _warnmes
  000da	83 c4 04	 add	 esp, 4
  000dd	33 c0		 xor	 eax, eax
  000df	e9 f6 00 00 00	 jmp	 $LN22@namecat
$LN7@namecat:

; 613  : 
; 614  :   INT2S(x1,ibuf1);

  000e4	83 f8 01	 cmp	 eax, 1
  000e7	75 18		 jne	 SHORT $LN6@namecat
  000e9	c1 f9 02	 sar	 ecx, 2
  000ec	51		 push	 ecx
  000ed	8d 84 24 14 40
	00 00		 lea	 eax, DWORD PTR _ibuf1$[esp+114712]
  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld?$AA@
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _sprintf
  000ff	eb 25		 jmp	 SHORT $LN23@namecat
$LN6@namecat:
  00101	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _atomtable
  00107	c1 e9 02	 shr	 ecx, 2
  0010a	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  00110	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00113	68 00 40 00 00	 push	 16384			; 00004000H
  00118	50		 push	 eax
  00119	8d 8c 24 18 40
	00 00		 lea	 ecx, DWORD PTR _ibuf1$[esp+114716]
  00120	51		 push	 ecx
  00121	e8 00 00 00 00	 call	 _strncpy
$LN23@namecat:
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH

; 615  :   INT2S(x2,ibuf2);

  00129	8d 54 24 10	 lea	 edx, DWORD PTR _ibuf2$[esp+114708]
  0012d	83 fb 01	 cmp	 ebx, 1
  00130	75 11		 jne	 SHORT $LN4@namecat
  00132	c1 fe 02	 sar	 esi, 2
  00135	56		 push	 esi
  00136	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld?$AA@
  0013b	52		 push	 edx
  0013c	e8 00 00 00 00	 call	 _sprintf
  00141	eb 1d		 jmp	 SHORT $LN24@namecat
$LN4@namecat:
  00143	a1 00 00 00 00	 mov	 eax, DWORD PTR _atomtable
  00148	c1 ee 02	 shr	 esi, 2
  0014b	81 e6 ff ff 3f
	00		 and	 esi, 4194303		; 003fffffH
  00151	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00154	68 00 40 00 00	 push	 16384			; 00004000H
  00159	51		 push	 ecx
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 _strncpy
$LN24@namecat:
  00160	83 c4 0c	 add	 esp, 12			; 0000000cH

; 616  :   INT2S(x3,ibuf3);

  00163	8d 84 24 10 80
	00 00		 lea	 eax, DWORD PTR _ibuf3$[esp+114708]
  0016a	83 fd 01	 cmp	 ebp, 1
  0016d	75 11		 jne	 SHORT $LN2@namecat
  0016f	c1 ff 02	 sar	 edi, 2
  00172	57		 push	 edi
  00173	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld?$AA@
  00178	50		 push	 eax
  00179	e8 00 00 00 00	 call	 _sprintf
  0017e	eb 1e		 jmp	 SHORT $LN25@namecat
$LN2@namecat:
  00180	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _atomtable
  00186	c1 ef 02	 shr	 edi, 2
  00189	81 e7 ff ff 3f
	00		 and	 edi, 4194303		; 003fffffH
  0018f	8b 14 b9	 mov	 edx, DWORD PTR [ecx+edi*4]
  00192	68 00 40 00 00	 push	 16384			; 00004000H
  00197	52		 push	 edx
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 _strncpy
$LN25@namecat:
  0019e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 617  : 
; 618  :   sprintf(sbuf,"%s%s%s",ibuf1,ibuf2,ibuf3);

  001a1	8d 8c 24 10 80
	00 00		 lea	 ecx, DWORD PTR _ibuf3$[esp+114708]
  001a8	51		 push	 ecx
  001a9	8d 54 24 14	 lea	 edx, DWORD PTR _ibuf2$[esp+114712]
  001ad	52		 push	 edx
  001ae	8d 84 24 18 40
	00 00		 lea	 eax, DWORD PTR _ibuf1$[esp+114716]
  001b5	50		 push	 eax
  001b6	8d 8c 24 1c c0
	00 00		 lea	 ecx, DWORD PTR _sbuf$[esp+114720]
  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
  001c2	51		 push	 ecx
  001c3	e8 00 00 00 00	 call	 _sprintf

; 619  :   return INPUT_STRING(sbuf);

  001c8	8d 94 24 24 c0
	00 00		 lea	 edx, DWORD PTR _sbuf$[esp+114728]
  001cf	6a 00		 push	 0
  001d1	52		 push	 edx
  001d2	e8 00 00 00 00	 call	 _new_func
  001d7	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN22@namecat:

; 620  : }

  001da	8b 8c 24 10 c0
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+114708]
  001e1	5d		 pop	 ebp
  001e2	5b		 pop	 ebx
  001e3	5f		 pop	 edi
  001e4	5e		 pop	 esi
  001e5	33 cc		 xor	 ecx, esp
  001e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ec	81 c4 04 c0 01
	00		 add	 esp, 114692		; 0001c004H
  001f2	c3		 ret	 0
_namecat ENDP
_TEXT	ENDS
EXTRN	__fstat64i32:PROC
; Function compile flags: /Ogtpy
; File c:\a15\ms_vs10.0\vc\include\sys\stat.inl
;	COMDAT _fstat
_TEXT	SEGMENT
_fstat	PROC						; COMDAT
; __Desc$ = ecx
; __Stat$ = eax

; 53   :     _STATIC_ASSERT( sizeof(struct stat) == sizeof(struct _stat64i32) );
; 54   :     return _fstat64i32(_Desc,(struct _stat64i32 *)_Stat);

  00000	50		 push	 eax
  00001	51		 push	 ecx
  00002	e8 00 00 00 00	 call	 __fstat64i32
  00007	83 c4 08	 add	 esp, 8

; 55   : }

  0000a	c3		 ret	 0
_fstat	ENDP
_TEXT	ENDS
EXTRN	__stat64i32:PROC
; Function compile flags: /Ogtpy
;	COMDAT _stat
_TEXT	SEGMENT
_stat	PROC						; COMDAT
; __Filename$ = ecx
; __Stat$ = eax

; 58   :     _STATIC_ASSERT( sizeof(struct stat) == sizeof(struct _stat64i32) );
; 59   :     return _stat64i32(_Filename,(struct _stat64i32 *)_Stat);

  00000	50		 push	 eax
  00001	51		 push	 ecx
  00002	e8 00 00 00 00	 call	 __stat64i32
  00007	83 c4 08	 add	 esp, 8

; 60   : }

  0000a	c3		 ret	 0
_stat	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@IGKPECPI@bad?5file?5ar?5in?5fsize?11?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_fsize
EXTRN	_fileno:PROC
;	COMDAT ??_C@_0BH@IGKPECPI@bad?5file?5ar?5in?5fsize?11?$AA@
CONST	SEGMENT
??_C@_0BH@IGKPECPI@bad?5file?5ar?5in?5fsize?11?$AA@ DB 'bad file ar in fs'
	DB	'ize/1', 00H					; `string'
; Function compile flags: /Ogtpy
; File c:\a17\prolog\ptarau_prolog\src\builtins.c
CONST	ENDS
;	COMDAT _fsize
_TEXT	SEGMENT
_cbuf$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_cf$ = 8						; size = 4
_fsize	PROC						; COMDAT

; 625  : {

  00000	83 ec 34	 sub	 esp, 52			; 00000034H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 30	 mov	 DWORD PTR __$ArrayPad$[esp+52], eax
  0000e	8b 44 24 38	 mov	 eax, DWORD PTR _cf$[esp+48]

; 626  :   struct stat cbuf;
; 627  :   if (-1==fstat(fileno(cf),&cbuf)) ERREXIT("bad file ar in fsize/1")

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _fileno
  00018	8d 4c 24 04	 lea	 ecx, DWORD PTR _cbuf$[esp+56]
  0001c	51		 push	 ecx
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 __fstat64i32
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	83 f8 ff	 cmp	 eax, -1
  00029	75 1e		 jne	 SHORT $LN1@fsize
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IGKPECPI@bad?5file?5ar?5in?5fsize?11?$AA@
  00030	e8 00 00 00 00	 call	 _warnmes
  00035	83 c4 04	 add	 esp, 4
  00038	33 c0		 xor	 eax, eax

; 628  :   return cbuf.st_size;
; 629  : }

  0003a	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  0003e	33 cc		 xor	 ecx, esp
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	83 c4 34	 add	 esp, 52			; 00000034H
  00048	c3		 ret	 0
$LN1@fsize:
  00049	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  0004d	8b 44 24 14	 mov	 eax, DWORD PTR _cbuf$[esp+72]
  00051	33 cc		 xor	 ecx, esp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	83 c4 34	 add	 esp, 52			; 00000034H
  0005b	c3		 ret	 0
_fsize	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@FDDKFNGF@file?5error?5on?52?5arg?5in?5older_fil@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_older_file0
;	COMDAT ??_C@_0CE@FDDKFNGF@file?5error?5on?52?5arg?5in?5older_fil@
; File c:\a15\ms_vs10.0\vc\include\sys\stat.inl
CONST	SEGMENT
??_C@_0CE@FDDKFNGF@file?5error?5on?52?5arg?5in?5older_fil@ DB 'file error'
	DB	' on 2 arg in older_file/2', 00H		; `string'
; Function compile flags: /Ogtpy
; File c:\a17\prolog\ptarau_prolog\src\builtins.c
CONST	ENDS
;	COMDAT _older_file0
_TEXT	SEGMENT
_obuf$ = -100						; size = 48
_cbuf$ = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_of$ = 8						; size = 4
_cf$ = 12						; size = 4
_older_file0 PROC					; COMDAT

; 632  : {

  00000	83 ec 64	 sub	 esp, 100		; 00000064H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 60	 mov	 DWORD PTR __$ArrayPad$[esp+100], eax
  0000e	8b 44 24 6c	 mov	 eax, DWORD PTR _cf$[esp+96]
  00012	56		 push	 esi
  00013	8b 74 24 6c	 mov	 esi, DWORD PTR _of$[esp+100]

; 633  :   struct stat obuf, cbuf;
; 634  :   if (-1==stat(cf,&cbuf)) ERREXIT("file error on 2 arg in older_file/2")

  00017	8d 4c 24 34	 lea	 ecx, DWORD PTR _cbuf$[esp+104]
  0001b	51		 push	 ecx
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 __stat64i32
  00022	83 c4 08	 add	 esp, 8
  00025	83 f8 ff	 cmp	 eax, -1
  00028	75 1f		 jne	 SHORT $LN2@older_file
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FDDKFNGF@file?5error?5on?52?5arg?5in?5older_fil@
  0002f	e8 00 00 00 00	 call	 _warnmes
  00034	83 c4 04	 add	 esp, 4

; 636  :   return obuf.st_mtime<cbuf.st_mtime;

  00037	33 c0		 xor	 eax, eax
  00039	5e		 pop	 esi

; 637  : }

  0003a	8b 4c 24 60	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+100]
  0003e	33 cc		 xor	 ecx, esp
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	83 c4 64	 add	 esp, 100		; 00000064H
  00048	c3		 ret	 0
$LN2@older_file:

; 635  :   if (-1==stat(of,&obuf)) return 1;

  00049	8d 54 24 04	 lea	 edx, DWORD PTR _obuf$[esp+104]
  0004d	52		 push	 edx
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 __stat64i32
  00054	83 c4 08	 add	 esp, 8
  00057	83 f8 ff	 cmp	 eax, -1
  0005a	75 15		 jne	 SHORT $LN1@older_file
$LN11@older_file:
  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	5e		 pop	 esi

; 637  : }

  00062	8b 4c 24 60	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+100]
  00066	33 cc		 xor	 ecx, esp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	83 c4 64	 add	 esp, 100		; 00000064H
  00070	c3		 ret	 0
$LN1@older_file:

; 636  :   return obuf.st_mtime<cbuf.st_mtime;

  00071	8b 44 24 28	 mov	 eax, DWORD PTR _obuf$[esp+140]
  00075	3b 44 24 58	 cmp	 eax, DWORD PTR _cbuf$[esp+140]
  00079	7f 0c		 jg	 SHORT $LN5@older_file
  0007b	7c df		 jl	 SHORT $LN11@older_file
  0007d	8b 4c 24 24	 mov	 ecx, DWORD PTR _obuf$[esp+136]
  00081	3b 4c 24 54	 cmp	 ecx, DWORD PTR _cbuf$[esp+136]
  00085	72 d5		 jb	 SHORT $LN11@older_file
$LN5@older_file:

; 637  : }

  00087	8b 4c 24 64	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+104]
  0008b	5e		 pop	 esi
  0008c	33 cc		 xor	 ecx, esp
  0008e	33 c0		 xor	 eax, eax
  00090	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00095	83 c4 64	 add	 esp, 100		; 00000064H
  00098	c3		 ret	 0
_older_file0 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@BEIGKCJI@bad?5old?5file?5name?5in?5older_file?1@ ; `string'
PUBLIC	??_C@_0CC@PMLMILOB@bad?5new?5file?5name?5in?5older_file?1@ ; `string'
PUBLIC	_older_file
;	COMDAT ??_C@_0CC@BEIGKCJI@bad?5old?5file?5name?5in?5older_file?1@
CONST	SEGMENT
??_C@_0CC@BEIGKCJI@bad?5old?5file?5name?5in?5older_file?1@ DB 'bad old fi'
	DB	'le name in older_file/2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PMLMILOB@bad?5new?5file?5name?5in?5older_file?1@
CONST	SEGMENT
??_C@_0CC@PMLMILOB@bad?5new?5file?5name?5in?5older_file?1@ DB 'bad new fi'
	DB	'le name in older_file/2', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _older_file
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_older_file PROC					; COMDAT

; 641  :   register cell xval;
; 642  :   string of,cf;
; 643  :   xval=X(1);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _regs$[esp-4]
  00004	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 644  :   if(VAR(xval) || INTEGER(xval))

  00007	8b d0		 mov	 edx, eax
  00009	83 e2 03	 and	 edx, 3
  0000c	74 55		 je	 SHORT $LN3@older_file@2
  0000e	83 fa 01	 cmp	 edx, 1
  00011	74 50		 je	 SHORT $LN3@older_file@2

; 646  :   of=NAME(xval);
; 647  : 
; 648  :   xval=X(2);

  00013	8b 49 f8	 mov	 ecx, DWORD PTR [ecx-8]
  00016	c1 e8 02	 shr	 eax, 2
  00019	56		 push	 esi
  0001a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _atomtable
  00020	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  00025	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]

; 649  :   if(VAR(xval) || INTEGER(xval))

  00028	8b d1		 mov	 edx, ecx
  0002a	83 e2 03	 and	 edx, 3
  0002d	74 1f		 je	 SHORT $LN1@older_file@2
  0002f	83 fa 01	 cmp	 edx, 1
  00032	74 1a		 je	 SHORT $LN1@older_file@2

; 651  :   cf=NAME(xval);

  00034	c1 e9 02	 shr	 ecx, 2
  00037	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  0003d	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  00040	5e		 pop	 esi

; 652  : 
; 653  :   return older_file0(of,cf);

  00041	89 4c 24 08	 mov	 DWORD PTR _wam$[esp-4], ecx
  00045	89 44 24 04	 mov	 DWORD PTR _regs$[esp-4], eax
  00049	e9 00 00 00 00	 jmp	 _older_file0
$LN1@older_file@2:

; 650  :     return (no)LOCAL_ERR(xval,"bad new file name in older_file/2");

  0004e	8b 44 24 0c	 mov	 eax, DWORD PTR _wam$[esp]
  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@PMLMILOB@bad?5new?5file?5name?5in?5older_file?1@
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 _local_error
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	5e		 pop	 esi

; 654  : }

  00062	c3		 ret	 0
$LN3@older_file@2:

; 645  :     return (no)LOCAL_ERR(xval,"bad old file name in older_file/2");

  00063	8b 4c 24 08	 mov	 ecx, DWORD PTR _wam$[esp-4]
  00067	51		 push	 ecx
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BEIGKCJI@bad?5old?5file?5name?5in?5older_file?1@
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _local_error
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 654  : }

  00076	c3		 ret	 0
_older_file ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@LONLEFPO@bad?5file?5name?5in?5see?5or?5tell?$AA@ ; `string'
PUBLIC	??_C@_0N@GLAKPFBI@hdef?5in?5tell?$AA@		; `string'
PUBLIC	??_C@_0N@DANBKALO@hset?5in?5tell?$AA@		; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_02BOGAIONP@ab?$AA@			; `string'
PUBLIC	??_C@_0CF@CPBLHCCL@unimplemented?5bad?5see_tell?5opera@ ; `string'
PUBLIC	??_C@_0M@GJLFECND@hdef?5in?5see?$AA@		; `string'
PUBLIC	??_C@_0O@PIGFAEDC@hset?5in?5see?11?$AA@		; `string'
PUBLIC	??_C@_0BN@DKNPLOKF@unable?5to?5reopen?5to?5see?5file?$AA@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	_see_tell
;	COMDAT ??_C@_0BN@LONLEFPO@bad?5file?5name?5in?5see?5or?5tell?$AA@
CONST	SEGMENT
??_C@_0BN@LONLEFPO@bad?5file?5name?5in?5see?5or?5tell?$AA@ DB 'bad file n'
	DB	'ame in see or tell', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GLAKPFBI@hdef?5in?5tell?$AA@
CONST	SEGMENT
??_C@_0N@GLAKPFBI@hdef?5in?5tell?$AA@ DB 'hdef in tell', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DANBKALO@hset?5in?5tell?$AA@
CONST	SEGMENT
??_C@_0N@DANBKALO@hset?5in?5tell?$AA@ DB 'hset in tell', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BOGAIONP@ab?$AA@
CONST	SEGMENT
??_C@_02BOGAIONP@ab?$AA@ DB 'ab', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CPBLHCCL@unimplemented?5bad?5see_tell?5opera@
CONST	SEGMENT
??_C@_0CF@CPBLHCCL@unimplemented?5bad?5see_tell?5opera@ DB 'unimplemented'
	DB	' bad see_tell operation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GJLFECND@hdef?5in?5see?$AA@
CONST	SEGMENT
??_C@_0M@GJLFECND@hdef?5in?5see?$AA@ DB 'hdef in see', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIGFAEDC@hset?5in?5see?11?$AA@
CONST	SEGMENT
??_C@_0O@PIGFAEDC@hset?5in?5see?11?$AA@ DB 'hset in see/1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DKNPLOKF@unable?5to?5reopen?5to?5see?5file?$AA@
CONST	SEGMENT
??_C@_0BN@DKNPLOKF@unable?5to?5reopen?5to?5see?5file?$AA@ DB 'unable to r'
	DB	'eopen to see file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _see_tell
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_see_tell PROC						; COMDAT

; 658  :   byte op=(byte)OUTPUT_INT(X(1));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR _regs$[esp-4]
  00004	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00007	57		 push	 edi

; 659  :   register cell xval=X(2);

  00008	8b 79 f8	 mov	 edi, DWORD PTR [ecx-8]

; 660  :   FILE *f; string fname;
; 661  :   if(VAR(xval) || INTEGER(xval))

  0000b	8b cf		 mov	 ecx, edi
  0000d	c1 f8 02	 sar	 eax, 2
  00010	83 e1 03	 and	 ecx, 3
  00013	0f 84 2a 02 00
	00		 je	 $LN24@see_tell
  00019	83 f9 01	 cmp	 ecx, 1
  0001c	0f 84 21 02 00
	00		 je	 $LN24@see_tell

; 663  :   fname=NAME(xval);

  00022	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _atomtable
  00028	8b cf		 mov	 ecx, edi
  0002a	53		 push	 ebx
  0002b	c1 e9 02	 shr	 ecx, 2
  0002e	55		 push	 ebp
  0002f	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  00035	8b 2c 8a	 mov	 ebp, DWORD PTR [edx+ecx*4]
  00038	56		 push	 esi

; 664  :   if(0==op) /*see */

  00039	84 c0		 test	 al, al
  0003b	0f 85 00 01 00
	00		 jne	 $LN23@see_tell

; 665  :       {
; 666  :         if(xval==g.user) g.seefile=STD_in;

  00041	3b 3d 84 00 00
	00		 cmp	 edi, DWORD PTR _g+132
  00047	75 1a		 jne	 SHORT $LN22@see_tell
  00049	a1 38 01 00 00	 mov	 eax, DWORD PTR _g+312
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	5b		 pop	 ebx
  00051	a3 30 01 00 00	 mov	 DWORD PTR _g+304, eax

; 685  :          }
; 686  :          g.seefunc = xval;

  00056	89 3d 8c 00 00
	00		 mov	 DWORD PTR _g+140, edi

; 715  :   return TRUE;

  0005c	b8 01 00 00 00	 mov	 eax, 1
  00061	5f		 pop	 edi

; 716  : }

  00062	c3		 ret	 0
$LN22@see_tell:

; 667  :         else
; 668  :         {
; 669  :           f = (FILE *) hget(g.seemark, xval);

  00063	8b 0d 70 00 00
	00		 mov	 ecx, DWORD PTR _g+112
  00069	57		 push	 edi
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 _hget
  00070	8b f0		 mov	 esi, eax
  00072	83 c4 08	 add	 esp, 8

; 670  :           if ((cell) f == g.closed_file)

  00075	3b 35 88 00 00
	00		 cmp	 esi, DWORD PTR _g+136
  0007b	75 5b		 jne	 SHORT $LN20@see_tell

; 671  :             {
; 672  :               f = fopen(fname, "rb");g.lineno=0;

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  00082	55		 push	 ebp
  00083	e8 00 00 00 00	 call	 _fopen
  00088	8b f0		 mov	 esi, eax
  0008a	83 c4 08	 add	 esp, 8
  0008d	c7 05 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR _g+320, 0

; 673  :               if (!f) ERREXIT("unable to reopen to see file")

  00097	85 f6		 test	 esi, esi
  00099	75 14		 jne	 SHORT $LN19@see_tell
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DKNPLOKF@unable?5to?5reopen?5to?5see?5file?$AA@

; 699  :                 ERREXIT ("hset in tell")

  000a0	e8 00 00 00 00	 call	 _warnmes
  000a5	83 c4 04	 add	 esp, 4
$LN33@see_tell:
  000a8	5e		 pop	 esi
  000a9	5d		 pop	 ebp
  000aa	5b		 pop	 ebx
  000ab	33 c0		 xor	 eax, eax
  000ad	5f		 pop	 edi

; 716  : }

  000ae	c3		 ret	 0
$LN19@see_tell:

; 674  :               if (!hset(g.seemark, xval, (cell)f)) ERREXIT("hset in see/1")

  000af	8b 15 70 00 00
	00		 mov	 edx, DWORD PTR _g+112
  000b5	56		 push	 esi
  000b6	57		 push	 edi
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 _hset
  000bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c0	85 c0		 test	 eax, eax
  000c2	75 67		 jne	 SHORT $LN14@see_tell
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PIGFAEDC@hset?5in?5see?11?$AA@

; 699  :                 ERREXIT ("hset in tell")

  000c9	e8 00 00 00 00	 call	 _warnmes
  000ce	83 c4 04	 add	 esp, 4
  000d1	5e		 pop	 esi
  000d2	5d		 pop	 ebp
  000d3	5b		 pop	 ebx
  000d4	33 c0		 xor	 eax, eax
  000d6	5f		 pop	 edi

; 716  : }

  000d7	c3		 ret	 0
$LN20@see_tell:

; 675  :             }
; 676  :           else if (!f)

  000d8	85 f6		 test	 esi, esi
  000da	75 4f		 jne	 SHORT $LN14@see_tell

; 677  :             {
; 678  :               f = fopen(fname, "rb");g.lineno=0;

  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb?$AA@
  000e1	55		 push	 ebp
  000e2	e8 00 00 00 00	 call	 _fopen
  000e7	8b f0		 mov	 esi, eax
  000e9	83 c4 08	 add	 esp, 8
  000ec	c7 05 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR _g+320, 0

; 679  :               if (!f) return FALSE;

  000f6	85 f6		 test	 esi, esi
  000f8	74 ae		 je	 SHORT $LN33@see_tell

; 680  :               if (!hdef(g.seemark, xval,(cell)f,g.timestamp))

  000fa	0f b6 05 70 01
	00 00		 movzx	 eax, BYTE PTR _g+368
  00101	8b 0d 70 00 00
	00		 mov	 ecx, DWORD PTR _g+112
  00107	50		 push	 eax
  00108	56		 push	 esi
  00109	57		 push	 edi
  0010a	51		 push	 ecx
  0010b	e8 00 00 00 00	 call	 _hdef
  00110	83 c4 10	 add	 esp, 16			; 00000010H
  00113	85 c0		 test	 eax, eax
  00115	75 14		 jne	 SHORT $LN14@see_tell

; 681  :                  ERREXIT("hdef in see")

  00117	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GJLFECND@hdef?5in?5see?$AA@

; 699  :                 ERREXIT ("hset in tell")

  0011c	e8 00 00 00 00	 call	 _warnmes
  00121	83 c4 04	 add	 esp, 4
  00124	5e		 pop	 esi
  00125	5d		 pop	 ebp
  00126	5b		 pop	 ebx
  00127	33 c0		 xor	 eax, eax
  00129	5f		 pop	 edi

; 716  : }

  0012a	c3		 ret	 0
$LN14@see_tell:

; 682  :             }
; 683  :           /* else already opened and ok; */
; 684  :           g.seefile = f;

  0012b	89 35 30 01 00
	00		 mov	 DWORD PTR _g+304, esi
  00131	5e		 pop	 esi
  00132	5d		 pop	 ebp
  00133	5b		 pop	 ebx

; 685  :          }
; 686  :          g.seefunc = xval;

  00134	89 3d 8c 00 00
	00		 mov	 DWORD PTR _g+140, edi

; 715  :   return TRUE;

  0013a	b8 01 00 00 00	 mov	 eax, 1
  0013f	5f		 pop	 edi

; 716  : }

  00140	c3		 ret	 0
$LN23@see_tell:

; 687  :       }
; 688  :   else if (1==op || 2==op) /* tell */

  00141	3c 01		 cmp	 al, 1
  00143	74 18		 je	 SHORT $LN11@see_tell
  00145	3c 02		 cmp	 al, 2
  00147	74 14		 je	 SHORT $LN11@see_tell

; 712  :       }
; 713  :   else
; 714  :     ERREXIT("unimplemented bad see_tell operation")

  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CPBLHCCL@unimplemented?5bad?5see_tell?5opera@
  0014e	e8 00 00 00 00	 call	 _warnmes
  00153	83 c4 04	 add	 esp, 4
  00156	5e		 pop	 esi
  00157	5d		 pop	 ebp
  00158	5b		 pop	 ebx
  00159	33 c0		 xor	 eax, eax
  0015b	5f		 pop	 edi

; 716  : }

  0015c	c3		 ret	 0
$LN11@see_tell:

; 689  :       {
; 690  :         if(xval==g.user) g.tellfile=STD_out;

  0015d	3b 3d 84 00 00
	00		 cmp	 edi, DWORD PTR _g+132
  00163	75 1c		 jne	 SHORT $LN10@see_tell
  00165	8b 15 3c 01 00
	00		 mov	 edx, DWORD PTR _g+316
  0016b	5e		 pop	 esi
  0016c	5d		 pop	 ebp
  0016d	5b		 pop	 ebx

; 710  :          }
; 711  :          g.tellfunc=xval;

  0016e	89 3d 90 00 00
	00		 mov	 DWORD PTR _g+144, edi
  00174	89 15 34 01 00
	00		 mov	 DWORD PTR _g+308, edx

; 715  :   return TRUE;

  0017a	b8 01 00 00 00	 mov	 eax, 1
  0017f	5f		 pop	 edi

; 716  : }

  00180	c3		 ret	 0
$LN10@see_tell:

; 691  :         else
; 692  :         { string mode= ((2==op) ? "ab":"wb");

  00181	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_02BOGAIONP@ab?$AA@
  00186	3c 02		 cmp	 al, 2
  00188	74 05		 je	 SHORT $LN29@see_tell
  0018a	bb 00 00 00 00	 mov	 ebx, OFFSET ??_C@_02GMLFBBN@wb?$AA@
$LN29@see_tell:

; 693  :           f=(FILE *)hget(g.tellmark,xval);

  0018f	a1 74 00 00 00	 mov	 eax, DWORD PTR _g+116
  00194	57		 push	 edi
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 _hget
  0019b	8b f0		 mov	 esi, eax
  0019d	83 c4 08	 add	 esp, 8

; 694  :           if((cell)f==g.closed_file)

  001a0	3b 35 88 00 00
	00		 cmp	 esi, DWORD PTR _g+136
  001a6	75 3d		 jne	 SHORT $LN8@see_tell

; 695  :             {
; 696  :               f=fopen(fname,mode);

  001a8	53		 push	 ebx
  001a9	55		 push	 ebp
  001aa	e8 00 00 00 00	 call	 _fopen
  001af	8b f0		 mov	 esi, eax
  001b1	83 c4 08	 add	 esp, 8

; 697  :               if(!f) return FALSE;

  001b4	85 f6		 test	 esi, esi
  001b6	0f 84 ec fe ff
	ff		 je	 $LN33@see_tell

; 698  :               if(!hset(g.tellmark,xval,(cell)f))

  001bc	8b 0d 74 00 00
	00		 mov	 ecx, DWORD PTR _g+116
  001c2	56		 push	 esi
  001c3	57		 push	 edi
  001c4	51		 push	 ecx
  001c5	e8 00 00 00 00	 call	 _hset
  001ca	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cd	85 c0		 test	 eax, eax
  001cf	75 5c		 jne	 SHORT $LN2@see_tell

; 699  :                 ERREXIT ("hset in tell")

  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DANBKALO@hset?5in?5tell?$AA@
  001d6	e8 00 00 00 00	 call	 _warnmes
  001db	83 c4 04	 add	 esp, 4
  001de	5e		 pop	 esi
  001df	5d		 pop	 ebp
  001e0	5b		 pop	 ebx
  001e1	33 c0		 xor	 eax, eax
  001e3	5f		 pop	 edi

; 716  : }

  001e4	c3		 ret	 0
$LN8@see_tell:

; 700  :             }
; 701  :           else if(!f)

  001e5	85 f6		 test	 esi, esi
  001e7	75 44		 jne	 SHORT $LN2@see_tell

; 702  :             {
; 703  :               f=fopen(fname,mode);

  001e9	53		 push	 ebx
  001ea	55		 push	 ebp
  001eb	e8 00 00 00 00	 call	 _fopen
  001f0	8b f0		 mov	 esi, eax
  001f2	83 c4 08	 add	 esp, 8

; 704  :               if(!f) return FALSE;

  001f5	85 f6		 test	 esi, esi
  001f7	0f 84 ab fe ff
	ff		 je	 $LN33@see_tell

; 705  :               if(!hdef(g.tellmark,xval,(cell)f,g.timestamp))

  001fd	0f b6 15 70 01
	00 00		 movzx	 edx, BYTE PTR _g+368
  00204	a1 74 00 00 00	 mov	 eax, DWORD PTR _g+116
  00209	52		 push	 edx
  0020a	56		 push	 esi
  0020b	57		 push	 edi
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 _hdef
  00212	83 c4 10	 add	 esp, 16			; 00000010H
  00215	85 c0		 test	 eax, eax
  00217	75 14		 jne	 SHORT $LN2@see_tell

; 706  :                 ERREXIT("hdef in tell")

  00219	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GLAKPFBI@hdef?5in?5tell?$AA@
  0021e	e8 00 00 00 00	 call	 _warnmes
  00223	83 c4 04	 add	 esp, 4
  00226	5e		 pop	 esi
  00227	5d		 pop	 ebp
  00228	5b		 pop	 ebx
  00229	33 c0		 xor	 eax, eax
  0022b	5f		 pop	 edi

; 716  : }

  0022c	c3		 ret	 0
$LN2@see_tell:

; 707  :             }
; 708  :           /* else already opened and ok */
; 709  :           g.tellfile=f;

  0022d	89 35 34 01 00
	00		 mov	 DWORD PTR _g+308, esi
  00233	5e		 pop	 esi
  00234	5d		 pop	 ebp
  00235	5b		 pop	 ebx

; 710  :          }
; 711  :          g.tellfunc=xval;

  00236	89 3d 90 00 00
	00		 mov	 DWORD PTR _g+144, edi

; 715  :   return TRUE;

  0023c	b8 01 00 00 00	 mov	 eax, 1
  00241	5f		 pop	 edi

; 716  : }

  00242	c3		 ret	 0
$LN24@see_tell:

; 662  :     return (no)LOCAL_ERR(xval,"bad file name in see or tell");

  00243	8b 4c 24 0c	 mov	 ecx, DWORD PTR _wam$[esp]
  00247	51		 push	 ecx
  00248	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LONLEFPO@bad?5file?5name?5in?5see?5or?5tell?$AA@
  0024d	57		 push	 edi
  0024e	e8 00 00 00 00	 call	 _local_error
  00253	83 c4 0c	 add	 esp, 12			; 0000000cH
  00256	5f		 pop	 edi

; 716  : }

  00257	c3		 ret	 0
_see_tell ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@HCMPMOJE@unimplemented?5see_at?5or?5tell_at?5@ ; `string'
PUBLIC	??_C@_0CN@MFBPNODI@arg?51?5of?5see_at?5or?5tell_at?11?5mus@ ; `string'
PUBLIC	_see_tell_at
EXTRN	_fseek:PROC
;	COMDAT ??_C@_0CK@HCMPMOJE@unimplemented?5see_at?5or?5tell_at?5@
CONST	SEGMENT
??_C@_0CK@HCMPMOJE@unimplemented?5see_at?5or?5tell_at?5@ DB 'unimplemente'
	DB	'd see_at or tell_at operation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MFBPNODI@arg?51?5of?5see_at?5or?5tell_at?11?5mus@
CONST	SEGMENT
??_C@_0CN@MFBPNODI@arg?51?5of?5see_at?5or?5tell_at?11?5mus@ DB 'arg 1 of '
	DB	'see_at or tell_at/1 must be integer', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _see_tell_at
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_see_tell_at PROC					; COMDAT

; 722  :   byte op=(byte)OUTPUT_INT(X(1));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 723  :   register cell xval=X(2);

  00007	8b 40 f8	 mov	 eax, DWORD PTR [eax-8]

; 724  :   bp_long ires; no ok=TRUE;
; 725  :   if(!INTEGER(xval))

  0000a	8b d0		 mov	 edx, eax
  0000c	80 e2 03	 and	 dl, 3
  0000f	c1 f9 02	 sar	 ecx, 2
  00012	56		 push	 esi
  00013	be 01 00 00 00	 mov	 esi, 1
  00018	80 fa 01	 cmp	 dl, 1
  0001b	74 15		 je	 SHORT $LN7@see_tell_a

; 726  :     return (no)LOCAL_ERR(xval,
; 727  :        "arg 1 of see_at or tell_at/1 must be integer");

  0001d	8b 4c 24 0c	 mov	 ecx, DWORD PTR _wam$[esp]
  00021	51		 push	 ecx
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MFBPNODI@arg?51?5of?5see_at?5or?5tell_at?11?5mus@
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _local_error
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00030	5e		 pop	 esi

; 744  : }

  00031	c3		 ret	 0
$LN7@see_tell_a:

; 728  :   ires=OUTPUT_INT(xval);

  00032	c1 f8 02	 sar	 eax, 2

; 729  : 
; 730  :   if (0==op) /* fseek for see */

  00035	84 c9		 test	 cl, cl
  00037	75 0c		 jne	 SHORT $LN6@see_tell_a

; 731  :       {
; 732  :          if(-1 == fseek(g.seefile, ires, SEEK_SET)) ok=FALSE;

  00039	8b 15 30 01 00
	00		 mov	 edx, DWORD PTR _g+304
  0003f	6a 00		 push	 0
  00041	50		 push	 eax
  00042	52		 push	 edx

; 733  :       }
; 734  :   else if (1==op) /* fseek for tell */

  00043	eb 0e		 jmp	 SHORT $LN11@see_tell_a
$LN6@see_tell_a:
  00045	80 f9 01	 cmp	 cl, 1
  00048	75 1c		 jne	 SHORT $LN3@see_tell_a

; 735  :       {
; 736  :          if(-1 == fseek(g.tellfile, ires, SEEK_SET)) ok=FALSE;

  0004a	6a 00		 push	 0
  0004c	50		 push	 eax
  0004d	a1 34 01 00 00	 mov	 eax, DWORD PTR _g+308
  00052	50		 push	 eax
$LN11@see_tell_a:
  00053	e8 00 00 00 00	 call	 _fseek
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	83 f8 ff	 cmp	 eax, -1
  0005e	75 02		 jne	 SHORT $LN2@see_tell_a
  00060	33 f6		 xor	 esi, esi
$LN2@see_tell_a:

; 741  :       }
; 742  : 
; 743  :   return ok;

  00062	8b c6		 mov	 eax, esi
  00064	5e		 pop	 esi

; 744  : }

  00065	c3		 ret	 0
$LN3@see_tell_a:

; 737  :       }
; 738  :   else
; 739  :       { ok = FALSE;
; 740  :         ERREXIT("unimplemented see_at or tell_at operation")

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@HCMPMOJE@unimplemented?5see_at?5or?5tell_at?5@
  0006b	e8 00 00 00 00	 call	 _warnmes
  00070	83 c4 04	 add	 esp, 4
  00073	33 c0		 xor	 eax, eax
  00075	5e		 pop	 esi

; 744  : }

  00076	c3		 ret	 0
_see_tell_at ENDP
_TEXT	ENDS
PUBLIC	_seeing_telling_at
EXTRN	_ftell:PROC
; Function compile flags: /Ogtpy
;	COMDAT _seeing_telling_at
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_seeing_telling_at PROC					; COMDAT

; 748  :   bp_long ires;
; 749  :   byte op=(byte)OUTPUT_INT(X(1));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
  00007	c1 f8 02	 sar	 eax, 2

; 750  : 
; 751  :   if (0==op) /* fseek for seeing */

  0000a	84 c0		 test	 al, al
  0000c	75 17		 jne	 SHORT $LN4@seeing_tel

; 752  :       {
; 753  :          ires = ftell(g.seefile);

  0000e	8b 0d 30 01 00
	00		 mov	 ecx, DWORD PTR _g+304
  00014	51		 push	 ecx

; 756  :       {
; 757  :          ires = ftell(g.tellfile);

  00015	e8 00 00 00 00	 call	 _ftell

; 761  : 
; 762  :   return INPUT_INT(ires);

  0001a	03 c0		 add	 eax, eax
  0001c	03 c0		 add	 eax, eax
  0001e	83 c4 04	 add	 esp, 4
  00021	83 c8 01	 or	 eax, 1

; 763  : }

  00024	c3		 ret	 0
$LN4@seeing_tel:

; 754  :       }
; 755  :   else if (1==op) /* fseek for telling */

  00025	3c 01		 cmp	 al, 1
  00027	75 17		 jne	 SHORT $LN2@seeing_tel

; 756  :       {
; 757  :          ires = ftell(g.tellfile);

  00029	8b 15 34 01 00
	00		 mov	 edx, DWORD PTR _g+308
  0002f	52		 push	 edx
  00030	e8 00 00 00 00	 call	 _ftell

; 761  : 
; 762  :   return INPUT_INT(ires);

  00035	03 c0		 add	 eax, eax
  00037	03 c0		 add	 eax, eax
  00039	83 c4 04	 add	 esp, 4
  0003c	83 c8 01	 or	 eax, 1

; 763  : }

  0003f	c3		 ret	 0
$LN2@seeing_tel:

; 758  :       }
; 759  :   else
; 760  :      ERREXIT("unimplemented see_at or tell_at operation")

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@HCMPMOJE@unimplemented?5see_at?5or?5tell_at?5@
  00045	e8 00 00 00 00	 call	 _warnmes
  0004a	83 c4 04	 add	 esp, 4
  0004d	33 c0		 xor	 eax, eax

; 763  : }

  0004f	c3		 ret	 0
_seeing_telling_at ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@BHDHLEGG@unimplemented?5option?5in?5seen_tel@ ; `string'
PUBLIC	_seen_told
EXTRN	_fflush:PROC
;	COMDAT ??_C@_0CC@BHDHLEGG@unimplemented?5option?5in?5seen_tel@
CONST	SEGMENT
??_C@_0CC@BHDHLEGG@unimplemented?5option?5in?5seen_tel@ DB 'unimplemented'
	DB	' option in seen_tell', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _seen_told
_TEXT	SEGMENT
_op$ = 8						; size = 1
_seen_told PROC						; COMDAT

; 767  :  switch(op) {

  00000	0f b6 44 24 04	 movzx	 eax, BYTE PTR _op$[esp-4]
  00005	83 e8 00	 sub	 eax, 0
  00008	0f 84 ab 00 00
	00		 je	 $LN12@seen_told
  0000e	48		 dec	 eax
  0000f	74 1e		 je	 SHORT $LN7@seen_told
  00011	48		 dec	 eax
  00012	74 0d		 je	 SHORT $LN2@seen_told

; 800  :  break;
; 801  : 
; 802  :  default:
; 803  :    warnmes("unimplemented option in seen_tell");

  00014	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR _op$[esp-4], OFFSET ??_C@_0CC@BHDHLEGG@unimplemented?5option?5in?5seen_tel@
  0001c	e9 00 00 00 00	 jmp	 _warnmes
$LN2@seen_told:

; 795  :  }
; 796  :  break;
; 797  : 
; 798  :  case 2: /* flush */
; 799  :    fflush(g.tellfile);

  00021	a1 34 01 00 00	 mov	 eax, DWORD PTR _g+308
  00026	89 44 24 04	 mov	 DWORD PTR _op$[esp-4], eax
  0002a	e9 00 00 00 00	 jmp	 _fflush
$LN7@seen_told:

; 780  :  }
; 781  :  break;
; 782  : 
; 783  :  case 1: /* told */ {
; 784  :   if(g.tellfile!=STD_out)

  0002f	8b 0d 34 01 00
	00		 mov	 ecx, DWORD PTR _g+308
  00035	3b 0d 3c 01 00
	00		 cmp	 ecx, DWORD PTR _g+316
  0003b	74 63		 je	 SHORT $LN5@seen_told

; 785  :     { cell f=hget(g.tellmark,g.tellfunc);

  0003d	8b 15 90 00 00
	00		 mov	 edx, DWORD PTR _g+144
  00043	a1 74 00 00 00	 mov	 eax, DWORD PTR _g+116
  00048	52		 push	 edx
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _hget

; 786  :       if(f!=g.closed_file)

  0004f	8b 0d 88 00 00
	00		 mov	 ecx, DWORD PTR _g+136
  00055	83 c4 08	 add	 esp, 8
  00058	3b c1		 cmp	 eax, ecx
  0005a	74 44		 je	 SHORT $LN5@seen_told

; 787  :         {
; 788  :           if(f) hset(g.tellmark,g.tellfunc,g.closed_file);

  0005c	8b 15 74 00 00
	00		 mov	 edx, DWORD PTR _g+116
  00062	85 c0		 test	 eax, eax
  00064	74 13		 je	 SHORT $LN4@seen_told
  00066	51		 push	 ecx
  00067	8b 0d 90 00 00
	00		 mov	 ecx, DWORD PTR _g+144
  0006d	51		 push	 ecx
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 _hset
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
  00077	eb 19		 jmp	 SHORT $LN3@seen_told
$LN4@seen_told:

; 789  :           else hdef(g.tellmark,g.tellfunc,g.closed_file,g.timestamp);

  00079	0f b6 05 70 01
	00 00		 movzx	 eax, BYTE PTR _g+368
  00080	50		 push	 eax
  00081	51		 push	 ecx
  00082	8b 0d 90 00 00
	00		 mov	 ecx, DWORD PTR _g+144
  00088	51		 push	 ecx
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 _hdef
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@seen_told:

; 790  :           fclose(g.tellfile);

  00092	a1 34 01 00 00	 mov	 eax, DWORD PTR _g+308
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _fclose
  0009d	83 c4 04	 add	 esp, 4
$LN5@seen_told:

; 791  :         }
; 792  :     }
; 793  :   g.tellfile=STD_out;

  000a0	8b 0d 3c 01 00
	00		 mov	 ecx, DWORD PTR _g+316

; 794  :   g.tellfunc=g.user;

  000a6	8b 15 84 00 00
	00		 mov	 edx, DWORD PTR _g+132
  000ac	89 0d 34 01 00
	00		 mov	 DWORD PTR _g+308, ecx
  000b2	89 15 90 00 00
	00		 mov	 DWORD PTR _g+144, edx

; 804  :  }
; 805  : }

  000b8	c3		 ret	 0
$LN12@seen_told:

; 768  :  case 0: /* seen */ {
; 769  :   if(g.seefile!=STD_in)

  000b9	a1 30 01 00 00	 mov	 eax, DWORD PTR _g+304
  000be	3b 05 38 01 00
	00		 cmp	 eax, DWORD PTR _g+312
  000c4	74 64		 je	 SHORT $LN10@seen_told

; 770  :     { cell f=hget(g.seemark,g.seefunc);

  000c6	8b 0d 8c 00 00
	00		 mov	 ecx, DWORD PTR _g+140
  000cc	8b 15 70 00 00
	00		 mov	 edx, DWORD PTR _g+112
  000d2	51		 push	 ecx
  000d3	52		 push	 edx
  000d4	e8 00 00 00 00	 call	 _hget

; 771  :       if(f!=g.closed_file)

  000d9	8b 0d 88 00 00
	00		 mov	 ecx, DWORD PTR _g+136
  000df	83 c4 08	 add	 esp, 8
  000e2	3b c1		 cmp	 eax, ecx
  000e4	74 44		 je	 SHORT $LN10@seen_told

; 772  :         {
; 773  :           if(f) hset(g.seemark,g.seefunc,g.closed_file);

  000e6	85 c0		 test	 eax, eax
  000e8	a1 8c 00 00 00	 mov	 eax, DWORD PTR _g+140
  000ed	74 13		 je	 SHORT $LN9@seen_told
  000ef	51		 push	 ecx
  000f0	8b 0d 70 00 00
	00		 mov	 ecx, DWORD PTR _g+112
  000f6	50		 push	 eax
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 _hset
  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00100	eb 19		 jmp	 SHORT $LN8@seen_told
$LN9@seen_told:

; 774  :           else hdef(g.seemark,g.seefunc,g.closed_file,g.timestamp);

  00102	0f b6 15 70 01
	00 00		 movzx	 edx, BYTE PTR _g+368
  00109	52		 push	 edx
  0010a	51		 push	 ecx
  0010b	8b 0d 70 00 00
	00		 mov	 ecx, DWORD PTR _g+112
  00111	50		 push	 eax
  00112	51		 push	 ecx
  00113	e8 00 00 00 00	 call	 _hdef
  00118	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@seen_told:

; 775  :           fclose(g.seefile);

  0011b	8b 15 30 01 00
	00		 mov	 edx, DWORD PTR _g+304
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 _fclose
  00127	83 c4 04	 add	 esp, 4
$LN10@seen_told:

; 776  :         }
; 777  :     }
; 778  :   g.seefile=STD_in;

  0012a	a1 38 01 00 00	 mov	 eax, DWORD PTR _g+312

; 779  :   g.seefunc=g.user;

  0012f	8b 0d 84 00 00
	00		 mov	 ecx, DWORD PTR _g+132
  00135	a3 30 01 00 00	 mov	 DWORD PTR _g+304, eax
  0013a	89 0d 8c 00 00
	00		 mov	 DWORD PTR _g+140, ecx

; 804  :  }
; 805  : }

  00140	c3		 ret	 0
_seen_told ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@CPMNHII@bad?5command?5in?5system?12?$AA@ ; `string'
PUBLIC	_system0
EXTRN	_system:PROC
;	COMDAT ??_C@_0BI@CPMNHII@bad?5command?5in?5system?12?$AA@
CONST	SEGMENT
??_C@_0BI@CPMNHII@bad?5command?5in?5system?12?$AA@ DB 'bad command in sys'
	DB	'tem/2', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _system0
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_system0 PROC						; COMDAT

; 808  : { register cell xval=X(1); bp_long ires;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]

; 809  :   ATOMIZE(xval);

  00007	8b c8		 mov	 ecx, eax
  00009	83 e1 03	 and	 ecx, 3
  0000c	74 0c		 je	 SHORT $LN4@system0
  0000e	83 f9 01	 cmp	 ecx, 1
  00011	74 09		 je	 SHORT $LN5@system0
  00013	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00018	74 02		 je	 SHORT $LN5@system0
$LN4@system0:
  0001a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@system0:

; 810  :   if(!SYMCONST(xval))

  0001c	8b c8		 mov	 ecx, eax
  0001e	83 e1 03	 and	 ecx, 3
  00021	80 f9 03	 cmp	 cl, 3
  00024	75 2b		 jne	 SHORT $LN2@system0
  00026	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  0002b	75 24		 jne	 SHORT $LN2@system0

; 814  :     }
; 815  :   else
; 816  :     {
; 817  :       string s=NAME(xval);

  0002d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _atomtable
  00033	c1 e8 02	 shr	 eax, 2
  00036	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  0003b	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]

; 818  :       ires=system(s);

  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _system

; 819  : #if TRACE>1
; 820  :       fprintf(STD_err,"system--->%ld\n",ires);
; 821  : #endif
; 822  :     }
; 823  :   xval=INPUT_INT(ires>>8);

  00044	c1 f8 06	 sar	 eax, 6
  00047	83 e0 fd	 and	 eax, -3			; fffffffdH
  0004a	83 c4 04	 add	 esp, 4
  0004d	83 c8 01	 or	 eax, 1

; 824  :   return xval;
; 825  : }

  00050	c3		 ret	 0
$LN2@system0:

; 811  :     {
; 812  :       (void)LOCAL_ERR(xval,"bad command in system/2");

  00051	8b 4c 24 08	 mov	 ecx, DWORD PTR _wam$[esp-4]
  00055	51		 push	 ecx
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CPMNHII@bad?5command?5in?5system?12?$AA@
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _local_error

; 813  :       ires=1;

  00061	b8 01 00 00 00	 mov	 eax, 1

; 819  : #if TRACE>1
; 820  :       fprintf(STD_err,"system--->%ld\n",ires);
; 821  : #endif
; 822  :     }
; 823  :   xval=INPUT_INT(ires>>8);

  00066	c1 f8 06	 sar	 eax, 6
  00069	83 e0 fd	 and	 eax, -3			; fffffffdH
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	83 c8 01	 or	 eax, 1

; 824  :   return xval;
; 825  : }

  00072	c3		 ret	 0
_system0 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_add_instr
EXTRN	_insert_op:PROC
; Function compile flags: /Ogtpy
;	COMDAT _add_instr
_TEXT	SEGMENT
_sbuf$ = -65540						; size = 65536
__$ArrayPad$ = -4					; size = 4
_regs$ = 8						; size = 4
_code$ = 12						; size = 4
_add_instr PROC						; COMDAT

; 828  : {       char sbuf[MAXNBUF]; string name;

  00000	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 00 00
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+65540], eax
  00018	53		 push	 ebx
  00019	8b 9c 24 10 00
	01 00		 mov	 ebx, DWORD PTR _code$[esp+65540]
  00020	56		 push	 esi
  00021	8b b4 24 10 00
	01 00		 mov	 esi, DWORD PTR _regs$[esp+65544]

; 829  :                  if(INTEGER(X(3)))

  00028	8b 46 f4	 mov	 eax, DWORD PTR [esi-12]
  0002b	8b c8		 mov	 ecx, eax
  0002d	80 e1 03	 and	 cl, 3
  00030	57		 push	 edi
  00031	80 f9 01	 cmp	 cl, 1
  00034	75 1a		 jne	 SHORT $LN4@add_instr

; 830  :                    {name=sbuf;
; 831  : 					 BP_LONG2STR(name,OUTPUT_INT(X(3)));

  00036	c1 f8 02	 sar	 eax, 2
  00039	50		 push	 eax
  0003a	8d 7c 24 10	 lea	 edi, DWORD PTR _sbuf$[esp+65556]
  0003e	8b d7		 mov	 edx, edi
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld?$AA@
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _sprintf
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 832  : 				   }
; 833  :                  else

  0004e	eb 11		 jmp	 SHORT $LN3@add_instr
$LN4@add_instr:

; 834  :                    name=NAME(X(3));

  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _atomtable
  00056	c1 e8 02	 shr	 eax, 2
  00059	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  0005e	8b 3c 81	 mov	 edi, DWORD PTR [ecx+eax*4]
$LN3@add_instr:

; 835  :                  if(!insert_op(
; 836  :                             (no)OUTPUT_INT(X(1)),
; 837  :                             (no)OUTPUT_INT(X(2)),
; 838  :                             name,
; 839  :                             (no)OUTPUT_INT(X(4)),
; 840  :                             code /* shared[InstrStk] contains the code */
; 841  :                         ))

  00061	8b 56 f0	 mov	 edx, DWORD PTR [esi-16]
  00064	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  00067	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  0006a	53		 push	 ebx
  0006b	c1 fa 02	 sar	 edx, 2
  0006e	52		 push	 edx
  0006f	57		 push	 edi
  00070	c1 f8 02	 sar	 eax, 2
  00073	50		 push	 eax
  00074	c1 f9 02	 sar	 ecx, 2
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _insert_op

; 842  :                    return FALSE;
; 843  :                  else
; 844  :                    return TRUE;
; 845  : }

  0007d	8b 8c 24 20 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65572]
  00084	83 c4 14	 add	 esp, 20			; 00000014H
  00087	5f		 pop	 edi
  00088	f7 d8		 neg	 eax
  0008a	5e		 pop	 esi
  0008b	1b c0		 sbb	 eax, eax
  0008d	5b		 pop	 ebx
  0008e	33 cc		 xor	 ecx, esp
  00090	f7 d8		 neg	 eax
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	81 c4 04 00 01
	00		 add	 esp, 65540		; 00010004H
  0009d	c3		 ret	 0
_add_instr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ocompare
_TEXT	SEGMENT
_vr$ = 8						; size = 4
_ocompare PROC						; COMDAT
; _vl$ = eax

; 848  : {       register bp_long ires;

  00000	55		 push	 ebp
  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR _vr$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f8		 mov	 edi, eax

; 849  :   ires=(!!NONVAR(vl)<<1) | (!INTEGER(vl));
; 850  :   ires-=(!!NONVAR(vr)<<1) | (!INTEGER(vr));

  00009	8b c5		 mov	 eax, ebp
  0000b	83 e0 03	 and	 eax, 3
  0000e	b9 00 00 00 00	 mov	 ecx, 0
  00013	0f 95 c1	 setne	 cl
  00016	33 d2		 xor	 edx, edx
  00018	8b f7		 mov	 esi, edi
  0001a	03 c9		 add	 ecx, ecx
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	0f 95 c2	 setne	 dl
  00022	33 c0		 xor	 eax, eax
  00024	0b ca		 or	 ecx, edx
  00026	83 e6 03	 and	 esi, 3
  00029	0f 95 c0	 setne	 al
  0002c	33 d2		 xor	 edx, edx
  0002e	03 c0		 add	 eax, eax
  00030	83 fe 01	 cmp	 esi, 1
  00033	0f 95 c2	 setne	 dl
  00036	0b c2		 or	 eax, edx
  00038	2b c1		 sub	 eax, ecx

; 851  :   if(0==ires)

  0003a	75 67		 jne	 SHORT $LN1@ocompare

; 852  :   {
; 853  :     if(VAR(vl)) ires=vl-vr;

  0003c	85 f6		 test	 esi, esi
  0003e	74 5f		 je	 SHORT $LN15@ocompare

; 854  :     else if(INTEGER(vl))

  00040	83 fe 01	 cmp	 esi, 1
  00043	75 08		 jne	 SHORT $LN3@ocompare

; 855  :       ires=OUTPUT_INT(vl)-OUTPUT_INT(vr);

  00045	c1 ff 02	 sar	 edi, 2
  00048	c1 fd 02	 sar	 ebp, 2

; 856  :     else

  0004b	eb 52		 jmp	 SHORT $LN15@ocompare
$LN3@ocompare:

; 857  :       {
; 858  :         ires=strcmp(NAME(vl),NAME(vr));

  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR _atomtable
  00052	8b cd		 mov	 ecx, ebp
  00054	c1 e9 02	 shr	 ecx, 2
  00057	8b d7		 mov	 edx, edi
  00059	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  0005f	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00062	c1 ea 02	 shr	 edx, 2
  00065	81 e2 ff ff 3f
	00		 and	 edx, 4194303		; 003fffffH
  0006b	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0006e	8b ff		 npad	 2
$LL11@ocompare:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN12@ocompare
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN13@ocompare
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN12@ocompare
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL11@ocompare
$LN13@ocompare:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN14@ocompare
$LN12@ocompare:
  00090	1b c0		 sbb	 eax, eax
  00092	83 d8 ff	 sbb	 eax, -1
$LN14@ocompare:

; 859  :         if(0==ires)

  00095	85 c0		 test	 eax, eax
  00097	75 0a		 jne	 SHORT $LN1@ocompare

; 860  :           ires=GETARITY(vl)-GETARITY(vr);

  00099	c1 ef 18	 shr	 edi, 24			; 00000018H
  0009c	c1 ed 18	 shr	 ebp, 24			; 00000018H
$LN15@ocompare:
  0009f	2b fd		 sub	 edi, ebp
  000a1	8b c7		 mov	 eax, edi
$LN1@ocompare:

; 861  :       }
; 862  :   }
; 863  :   return (ires>0) ? !!ires: -!!ires;

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5d		 pop	 ebp
  000a6	85 c0		 test	 eax, eax
  000a8	7e 0a		 jle	 SHORT $LN9@ocompare
  000aa	33 c9		 xor	 ecx, ecx
  000ac	85 c0		 test	 eax, eax
  000ae	0f 95 c1	 setne	 cl
  000b1	8b c1		 mov	 eax, ecx

; 864  : }

  000b3	c3		 ret	 0
$LN9@ocompare:

; 861  :       }
; 862  :   }
; 863  :   return (ires>0) ? !!ires: -!!ires;

  000b4	33 d2		 xor	 edx, edx
  000b6	85 c0		 test	 eax, eax
  000b8	0f 95 c2	 setne	 dl
  000bb	f7 da		 neg	 edx
  000bd	8b c2		 mov	 eax, edx

; 864  : }

  000bf	c3		 ret	 0
_ocompare ENDP
_TEXT	ENDS
PUBLIC	_compare
EXTRN	_float_compare:PROC
; Function compile flags: /Ogtpy
;	COMDAT _compare
_TEXT	SEGMENT
_l$ = 8							; size = 4
tv178 = 12						; size = 4
_r$ = 12						; size = 4
_compare PROC						; COMDAT

; 868  :   register cell vl,vr;
; 869  :   DEREF2(l,vl); DEREF2(r,vr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _l$[esp-4]
  00004	53		 push	 ebx
  00005	8b 18		 mov	 ebx, DWORD PTR [eax]
  00007	55		 push	 ebp
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	f6 c3 03	 test	 bl, 3
  0000d	75 12		 jne	 SHORT $LN15@compare
  0000f	90		 npad	 1
$LL11@compare:
  00010	39 5c 24 14	 cmp	 DWORD PTR _l$[esp+12], ebx
  00014	74 0b		 je	 SHORT $LN15@compare
  00016	89 5c 24 14	 mov	 DWORD PTR _l$[esp+12], ebx
  0001a	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  0001c	f6 c3 03	 test	 bl, 3
  0001f	74 ef		 je	 SHORT $LL11@compare
$LN15@compare:
  00021	8b 6c 24 18	 mov	 ebp, DWORD PTR _r$[esp+12]
  00025	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00028	a8 03		 test	 al, 3
  0002a	75 10		 jne	 SHORT $LN8@compare
  0002c	8d 64 24 00	 npad	 4
$LL9@compare:
  00030	3b e8		 cmp	 ebp, eax
  00032	74 08		 je	 SHORT $LN8@compare
  00034	8b e8		 mov	 ebp, eax
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	a8 03		 test	 al, 3
  0003a	74 f4		 je	 SHORT $LL9@compare
$LN8@compare:

; 870  : 
; 871  :   if(NUMERIC(vl) && NUMERIC(vr))

  0003c	8b 3d 94 00 00
	00		 mov	 edi, DWORD PTR _g+148
  00042	8b f3		 mov	 esi, ebx
  00044	83 e6 03	 and	 esi, 3
  00047	83 fe 01	 cmp	 esi, 1
  0004a	74 04		 je	 SHORT $LN6@compare
  0004c	3b fb		 cmp	 edi, ebx
  0004e	75 0e		 jne	 SHORT $LN7@compare
$LN6@compare:
  00050	8b c8		 mov	 ecx, eax
  00052	80 e1 03	 and	 cl, 3
  00055	80 f9 01	 cmp	 cl, 1
  00058	74 58		 je	 SHORT $LN5@compare
  0005a	3b f8		 cmp	 edi, eax
  0005c	74 54		 je	 SHORT $LN5@compare
$LN7@compare:

; 873  : 
; 874  :   ires=ocompare(vl,vr);

  0005e	50		 push	 eax
  0005f	8b c3		 mov	 eax, ebx
  00061	e8 00 00 00 00	 call	 _ocompare
  00066	83 c4 04	 add	 esp, 4

; 875  :   if(0==ires && COMPOUND(vl))

  00069	85 c0		 test	 eax, eax
  0006b	75 53		 jne	 SHORT $LN12@compare
  0006d	83 fe 03	 cmp	 esi, 3
  00070	75 4e		 jne	 SHORT $LN12@compare
  00072	8b d3		 mov	 edx, ebx
  00074	c1 ea 18	 shr	 edx, 24			; 00000018H
  00077	89 54 24 18	 mov	 DWORD PTR tv178[esp+12], edx
  0007b	85 d2		 test	 edx, edx
  0007d	74 41		 je	 SHORT $LN12@compare

; 876  :     for(vr=GETARITY(vl),vl=1; 0==ires && vl<=vr; vl++)

  0007f	8b 4c 24 14	 mov	 ecx, DWORD PTR _l$[esp+12]
  00083	8b dd		 mov	 ebx, ebp
  00085	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00088	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0008b	2b d9		 sub	 ebx, ecx
  0008d	eb 05		 jmp	 SHORT $LN3@compare
  0008f	90		 npad	 1
$LL21@compare:
  00090	8b 54 24 18	 mov	 edx, DWORD PTR tv178[esp+12]
$LN3@compare:
  00094	3b fa		 cmp	 edi, edx
  00096	77 28		 ja	 SHORT $LN12@compare

; 877  :       ires=compare(l+vl,r+vl);

  00098	8d 14 33	 lea	 edx, DWORD PTR [ebx+esi]
  0009b	52		 push	 edx
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 _compare
  000a2	83 c4 08	 add	 esp, 8
  000a5	47		 inc	 edi
  000a6	83 c6 04	 add	 esi, 4
  000a9	85 c0		 test	 eax, eax
  000ab	74 e3		 je	 SHORT $LL21@compare
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5d		 pop	 ebp
  000b0	5b		 pop	 ebx

; 878  :   return ires;
; 879  : }

  000b1	c3		 ret	 0
$LN5@compare:

; 872  :     return float_compare(l,r);

  000b2	8b 44 24 14	 mov	 eax, DWORD PTR _l$[esp+12]
  000b6	55		 push	 ebp
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _float_compare
  000bd	83 c4 08	 add	 esp, 8
$LN12@compare:

; 878  :   return ires;
; 879  : }

  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5d		 pop	 ebp
  000c3	5b		 pop	 ebx
  000c4	c3		 ret	 0
_compare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@IMLEDNGP@functor?5has?5bad?5arity?$AA@ ; `string'
PUBLIC	??_C@_0L@CDLABIOJ@arity?$DN?$CFld?6?$AA@	; `string'
PUBLIC	_functor
EXTRN	_fprintf:PROC
;	COMDAT ??_C@_0BG@IMLEDNGP@functor?5has?5bad?5arity?$AA@
CONST	SEGMENT
??_C@_0BG@IMLEDNGP@functor?5has?5bad?5arity?$AA@ DB 'functor has bad arit'
	DB	'y', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CDLABIOJ@arity?$DN?$CFld?6?$AA@
CONST	SEGMENT
??_C@_0L@CDLABIOJ@arity?$DN?$CFld?6?$AA@ DB 'arity=%ld', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _functor
_TEXT	SEGMENT
_H$ = 8							; size = 4
_t$ = 12						; size = 4
_wam$ = 16						; size = 4
_A$ = 20						; size = 4
_functor PROC						; COMDAT

; 884  : { register cell r,arity;

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	57		 push	 edi

; 885  :   register term f=t+1;

  00004	8b 7c 24 18	 mov	 edi, DWORD PTR _t$[esp+12]

; 886  :   register term n=t+2;
; 887  :   DEREF2(t,r);

  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
  0000d	8d 6f 08	 lea	 ebp, DWORD PTR [edi+8]
  00010	a8 03		 test	 al, 3
  00012	75 0c		 jne	 SHORT $LN25@functor
$LL26@functor:
  00014	3b f8		 cmp	 edi, eax
  00016	74 08		 je	 SHORT $LN25@functor
  00018	8b f8		 mov	 edi, eax
  0001a	8b 00		 mov	 eax, DWORD PTR [eax]
  0001c	a8 03		 test	 al, 3
  0001e	74 f4		 je	 SHORT $LL26@functor
$LN25@functor:

; 888  :   if(NONVAR(r))

  00020	8b c8		 mov	 ecx, eax
  00022	83 e1 03	 and	 ecx, 3
  00025	74 6e		 je	 SHORT $LN30@functor

; 889  :     {
; 890  :       if(INTEGER(r) || !(arity=GETARITY(r)))

  00027	83 f9 01	 cmp	 ecx, 1
  0002a	74 4b		 je	 SHORT $LN22@functor
  0002c	8b f0		 mov	 esi, eax
  0002e	c1 ee 18	 shr	 esi, 24			; 00000018H
  00031	85 f6		 test	 esi, esi
  00033	74 42		 je	 SHORT $LN22@functor

; 894  :         }
; 895  :       else
; 896  :         {
; 897  :           UNITEST(T2C(f),PUTARITY(r,0));

  00035	8b 7c 24 20	 mov	 edi, DWORD PTR _A$[esp+12]
  00039	8b 5c 24 1c	 mov	 ebx, DWORD PTR _wam$[esp+12]
  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00044	50		 push	 eax
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 _unify
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	85 c0		 test	 eax, eax
  00050	74 1e		 je	 SHORT $LN6@functor

; 898  :           UNITEST(T2C(n),INPUT_INT(arity));

  00052	57		 push	 edi
  00053	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]
  0005a	53		 push	 ebx
  0005b	83 c8 01	 or	 eax, 1
  0005e	50		 push	 eax
$LN39@functor:
  0005f	55		 push	 ebp
$LN40@functor:
  00060	e8 00 00 00 00	 call	 _unify
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	85 c0		 test	 eax, eax
  0006a	0f 85 f5 00 00
	00		 jne	 $LN38@functor
$LN6@functor:
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5d		 pop	 ebp

; 922  :         }
; 923  :       else return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	5b		 pop	 ebx

; 926  : }

  00076	c3		 ret	 0
$LN22@functor:

; 891  :         {
; 892  :           UNITEST(T2C(f),r);

  00077	8b 74 24 20	 mov	 esi, DWORD PTR _A$[esp+12]
  0007b	8b 7c 24 1c	 mov	 edi, DWORD PTR _wam$[esp+12]
  0007f	56		 push	 esi
  00080	57		 push	 edi
  00081	50		 push	 eax
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 _unify
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	85 c0		 test	 eax, eax
  0008d	74 e1		 je	 SHORT $LN6@functor

; 893  :           UNITEST(T2C(n),INPUT_INT(0));

  0008f	56		 push	 esi
  00090	57		 push	 edi
  00091	6a 01		 push	 1
  00093	eb ca		 jmp	 SHORT $LN39@functor
$LN30@functor:

; 899  :         }
; 900  :     }
; 901  :   else /* t is a variable */
; 902  :     { register cell i;
; 903  :       DEREF2(f,r);

  00095	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00097	f6 c1 03	 test	 cl, 3
  0009a	75 11		 jne	 SHORT $LN31@functor
  0009c	8d 64 24 00	 npad	 4
$LL15@functor:
  000a0	3b d1		 cmp	 edx, ecx
  000a2	74 09		 je	 SHORT $LN31@functor
  000a4	8b d1		 mov	 edx, ecx
  000a6	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000a8	f6 c1 03	 test	 cl, 3
  000ab	74 f3		 je	 SHORT $LL15@functor
$LN31@functor:

; 904  :       DEREF2(n,i);

  000ad	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  000b0	a8 03		 test	 al, 3
  000b2	75 0c		 jne	 SHORT $LN12@functor
$LL13@functor:
  000b4	3b e8		 cmp	 ebp, eax
  000b6	74 08		 je	 SHORT $LN12@functor
  000b8	8b e8		 mov	 ebp, eax
  000ba	8b 00		 mov	 eax, DWORD PTR [eax]
  000bc	a8 03		 test	 al, 3
  000be	74 f4		 je	 SHORT $LL13@functor
$LN12@functor:

; 905  :       if(!INTEGER(i)) return NULL;

  000c0	8b d0		 mov	 edx, eax
  000c2	80 e2 03	 and	 dl, 3
  000c5	80 fa 01	 cmp	 dl, 1
  000c8	75 a6		 jne	 SHORT $LN6@functor

; 906  :       arity=OUTPUT_INT(i);
; 907  :       if(INTEGER(r))

  000ca	8b d1		 mov	 edx, ecx
  000cc	83 e2 03	 and	 edx, 3
  000cf	c1 f8 02	 sar	 eax, 2
  000d2	83 fa 01	 cmp	 edx, 1
  000d5	75 15		 jne	 SHORT $LN10@functor

; 908  :         {
; 909  :           if(0!=arity) return NULL;

  000d7	85 c0		 test	 eax, eax
  000d9	75 95		 jne	 SHORT $LN6@functor

; 910  :           UNITEST(T2C(t),r);

  000db	8b 44 24 20	 mov	 eax, DWORD PTR _A$[esp+12]
  000df	8b 54 24 1c	 mov	 edx, DWORD PTR _wam$[esp+12]
  000e3	50		 push	 eax
  000e4	52		 push	 edx
  000e5	51		 push	 ecx
  000e6	57		 push	 edi
  000e7	e9 74 ff ff ff	 jmp	 $LN40@functor
$LN10@functor:

; 911  :         }
; 912  :       else if(NONVAR(r))

  000ec	85 d2		 test	 edx, edx
  000ee	74 80		 je	 SHORT $LN6@functor

; 913  :         {
; 914  :           register term s=H;

  000f0	8b 74 24 14	 mov	 esi, DWORD PTR _H$[esp+12]
  000f4	8b d6		 mov	 edx, esi

; 915  :           if(arity>=MAXARITY)

  000f6	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  000fb	72 28		 jb	 SHORT $LN5@functor

; 916  :             { fprintf(STD_err,"arity=%ld\n",arity);

  000fd	50		 push	 eax
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CDLABIOJ@arity?$DN?$CFld?6?$AA@
  00103	e8 00 00 00 00	 call	 ___iob_func
  00108	83 c0 40	 add	 eax, 64			; 00000040H
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 _fprintf

; 917  :               ERREXIT("functor has bad arity")

  00111	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IMLEDNGP@functor?5has?5bad?5arity?$AA@
  00116	e8 00 00 00 00	 call	 _warnmes
  0011b	83 c4 10	 add	 esp, 16			; 00000010H
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5d		 pop	 ebp

; 922  :         }
; 923  :       else return NULL;

  00121	33 c0		 xor	 eax, eax
  00123	5b		 pop	 ebx

; 926  : }

  00124	c3		 ret	 0
$LN5@functor:

; 918  :             }
; 919  :           PUSHVAL(PUTARITY(r,arity));

  00125	8b d8		 mov	 ebx, eax
  00127	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0012d	c1 e3 18	 shl	 ebx, 24			; 00000018H
  00130	0b cb		 or	 ecx, ebx
  00132	89 0e		 mov	 DWORD PTR [esi], ecx
  00134	83 c6 04	 add	 esi, 4

; 920  :           while(arity--) {SETREF(H,H); H++;}

  00137	85 c0		 test	 eax, eax
  00139	74 0d		 je	 SHORT $LN36@functor
  0013b	eb 03 8d 49 00	 npad	 5
$LL4@functor:
  00140	89 36		 mov	 DWORD PTR [esi], esi
  00142	83 c6 04	 add	 esi, 4
  00145	48		 dec	 eax
  00146	75 f8		 jne	 SHORT $LL4@functor
$LN36@functor:

; 921  :           UNITEST(T2C(t),T2C(s));

  00148	8b 44 24 20	 mov	 eax, DWORD PTR _A$[esp+12]
  0014c	8b 4c 24 1c	 mov	 ecx, DWORD PTR _wam$[esp+12]
  00150	50		 push	 eax
  00151	51		 push	 ecx
  00152	52		 push	 edx
  00153	57		 push	 edi
  00154	e8 00 00 00 00	 call	 _unify
  00159	83 c4 10	 add	 esp, 16			; 00000010H
  0015c	85 c0		 test	 eax, eax
  0015e	75 09		 jne	 SHORT $LN2@functor
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5d		 pop	 ebp
  00163	5b		 pop	 ebx

; 926  : }

  00164	c3		 ret	 0
$LN38@functor:

; 921  :           UNITEST(T2C(t),T2C(s));

  00165	8b 74 24 14	 mov	 esi, DWORD PTR _H$[esp+12]
$LN2@functor:
  00169	5f		 pop	 edi

; 924  :     }
; 925  : return H;

  0016a	8b c6		 mov	 eax, esi
  0016c	5e		 pop	 esi
  0016d	5d		 pop	 ebp
  0016e	5b		 pop	 ebx

; 926  : }

  0016f	c3		 ret	 0
_functor ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _name2buf
_TEXT	SEGMENT
_name2buf PROC						; COMDAT
; _vt$ = eax
; _buf$ = esi

; 930  :   if(INTEGER(vt))

  00000	8b c8		 mov	 ecx, eax
  00002	80 e1 03	 and	 cl, 3
  00005	80 f9 01	 cmp	 cl, 1
  00008	75 15		 jne	 SHORT $LN4@name2buf

; 931  :     {
; 932  :        BP_LONG2STR(buf,OUTPUT_INT(vt));

  0000a	c1 f8 02	 sar	 eax, 2
  0000d	50		 push	 eax
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld?$AA@
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 _sprintf
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 933  :        return buf;

  0001c	8b c6		 mov	 eax, esi

; 941  :     }
; 942  : }

  0001e	c3		 ret	 0
$LN4@name2buf:

; 934  :     }
; 935  :   else
; 936  :     {
; 937  :       if(!GETARITY(vt))

  0001f	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00024	75 12		 jne	 SHORT $LN2@name2buf

; 938  :         return NAME(vt);

  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _atomtable
  0002c	c1 e8 02	 shr	 eax, 2
  0002f	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  00034	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]

; 941  :     }
; 942  : }

  00037	c3		 ret	 0
$LN2@name2buf:

; 939  :       else
; 940  :         return NULL;

  00038	33 c0		 xor	 eax, eax

; 941  :     }
; 942  : }

  0003a	c3		 ret	 0
_name2buf ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@JGHDALFP@string?5buffer?5overflow?5in?5list2b@ ; `string'
PUBLIC	_list2buf
;	COMDAT ??_C@_0CD@JGHDALFP@string?5buffer?5overflow?5in?5list2b@
CONST	SEGMENT
??_C@_0CD@JGHDALFP@string?5buffer?5overflow?5in?5list2b@ DB 'string buffe'
	DB	'r overflow in list2buf', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _list2buf
_TEXT	SEGMENT
_l$ = 8							; size = 4
_vl$ = 12						; size = 4
_name$ = 16						; size = 4
_len$ = 20						; size = 4
_list2buf PROC						; COMDAT

; 946  :   /*if(max.QUIET==INPUT_INT(0))warnmes("entering list2buf");*/
; 947  :   while(IS_LIST(vl)) {

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _vl$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 10	 mov	 esi, DWORD PTR _name$[esp]
  00009	57		 push	 edi
  0000a	39 05 24 00 00
	00		 cmp	 DWORD PTR _g+36, eax
  00010	75 62		 jne	 SHORT $LN9@list2buf
  00012	8b 7c 24 18	 mov	 edi, DWORD PTR _len$[esp+4]
  00016	8b 4c 24 0c	 mov	 ecx, DWORD PTR _l$[esp+4]
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL10@list2buf:

; 948  :     car = ++l;
; 949  :     DEREF2(car,vl);

  00020	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00023	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  00026	a8 03		 test	 al, 3
  00028	75 12		 jne	 SHORT $LN7@list2buf
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL8@list2buf:
  00030	3b d0		 cmp	 edx, eax
  00032	74 08		 je	 SHORT $LN7@list2buf
  00034	8b d0		 mov	 edx, eax
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	a8 03		 test	 al, 3
  0003a	74 f4		 je	 SHORT $LL8@list2buf
$LN7@list2buf:

; 950  : 
; 951  :     if(INTEGER(vl)) {

  0003c	8b d0		 mov	 edx, eax
  0003e	80 e2 03	 and	 dl, 3
  00041	80 fa 01	 cmp	 dl, 1
  00044	75 4e		 jne	 SHORT $LN6@list2buf

; 952  : 	    if(--len<2) {

  00046	4f		 dec	 edi
  00047	83 ff 02	 cmp	 edi, 2
  0004a	7c 3b		 jl	 SHORT $LN16@list2buf

; 955  :       }
; 956  :       *name++=(char)OUTPUT_INT(vl);

  0004c	c1 f8 02	 sar	 eax, 2

; 957  :     }
; 958  :     else
; 959  :       return FALSE;
; 960  : 
; 961  :     ++l; DEREF2(l,vl);

  0004f	83 c1 08	 add	 ecx, 8
  00052	88 06		 mov	 BYTE PTR [esi], al
  00054	8b 01		 mov	 eax, DWORD PTR [ecx]
  00056	46		 inc	 esi
  00057	a8 03		 test	 al, 3
  00059	75 11		 jne	 SHORT $LN2@list2buf
  0005b	eb 03 8d 49 00	 npad	 5
$LL3@list2buf:
  00060	3b c8		 cmp	 ecx, eax
  00062	74 08		 je	 SHORT $LN2@list2buf
  00064	8b c8		 mov	 ecx, eax
  00066	8b 00		 mov	 eax, DWORD PTR [eax]
  00068	a8 03		 test	 al, 3
  0006a	74 f4		 je	 SHORT $LL3@list2buf
$LN2@list2buf:

; 946  :   /*if(max.QUIET==INPUT_INT(0))warnmes("entering list2buf");*/
; 947  :   while(IS_LIST(vl)) {

  0006c	39 05 24 00 00
	00		 cmp	 DWORD PTR _g+36, eax
  00072	74 ac		 je	 SHORT $LL10@list2buf
$LN9@list2buf:

; 962  :   }
; 963  :   if(g.NIL!=vl) return FALSE;

  00074	39 05 20 00 00
	00		 cmp	 DWORD PTR _g+32, eax
  0007a	75 18		 jne	 SHORT $LN6@list2buf

; 964  : 
; 965  :   *name='\0';

  0007c	5f		 pop	 edi
  0007d	c6 06 00	 mov	 BYTE PTR [esi], 0

; 966  :   return TRUE;

  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	5e		 pop	 esi

; 967  : }

  00086	c3		 ret	 0
$LN16@list2buf:

; 953  : 		    warnmes("string buffer overflow in list2buf");

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JGHDALFP@string?5buffer?5overflow?5in?5list2b@
  0008c	e8 00 00 00 00	 call	 _warnmes
  00091	83 c4 04	 add	 esp, 4
$LN6@list2buf:

; 954  : 		    return FALSE;

  00094	5f		 pop	 edi
  00095	33 c0		 xor	 eax, eax
  00097	5e		 pop	 esi

; 967  : }

  00098	c3		 ret	 0
_list2buf ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@PGIILNLH@string2list?12?$AA@		; `string'
PUBLIC	_string2list
EXTRN	_overflow_by:PROC
;	COMDAT ??_C@_0O@PGIILNLH@string2list?12?$AA@
CONST	SEGMENT
??_C@_0O@PGIILNLH@string2list?12?$AA@ DB 'string2list/2', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _string2list
_TEXT	SEGMENT
_H$ = 8							; size = 4
_name$ = 12						; size = 4
_wam$ = 16						; size = 4
_string2list PROC					; COMDAT

; 970  :    IF_OVER("string2list/2",(term *)(H+(strlen(name)<<1)),HeapStk,NO());

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _name$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	56		 push	 esi
  00007	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL8@string2lis:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $LL8@string2lis
  00017	2b c6		 sub	 eax, esi
  00019	8b 74 24 10	 mov	 esi, DWORD PTR _wam$[esp]
  0001d	8b d0		 mov	 edx, eax
  0001f	8b 44 24 08	 mov	 eax, DWORD PTR _H$[esp]
  00023	8d 14 d0	 lea	 edx, DWORD PTR [eax+edx*8]
  00026	3b 56 14	 cmp	 edx, DWORD PTR [esi+20]
  00029	72 27		 jb	 SHORT $LN6@string2lis
  0002b	57		 push	 edi
  0002c	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0002f	90		 npad	 1
$LL9@string2lis:
  00030	8a 11		 mov	 dl, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 d2		 test	 dl, dl
  00035	75 f9		 jne	 SHORT $LL9@string2lis
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PGIILNLH@string2list?12?$AA@
  0003c	2b cf		 sub	 ecx, edi
  0003e	56		 push	 esi
  0003f	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
  00042	6a 00		 push	 0
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _overflow_by
  0004a	83 c4 10	 add	 esp, 16			; 00000010H
  0004d	5f		 pop	 edi
  0004e	33 c0		 xor	 eax, eax
  00050	5e		 pop	 esi

; 974  :    return H;
; 975  : }

  00051	c3		 ret	 0
$LN6@string2lis:

; 971  :    while(*name)

  00052	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00055	74 2b		 je	 SHORT $LN1@string2lis
  00057	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL2@string2lis:

; 972  :      PUSH_LIST(INPUT_INT((bp_short)(*name++)))

  00060	8b 15 24 00 00
	00		 mov	 edx, DWORD PTR _g+36
  00066	89 10		 mov	 DWORD PTR [eax], edx
  00068	66 0f be 11	 movsx	 dx, BYTE PTR [ecx]
  0006c	0f b7 d2	 movzx	 edx, dx
  0006f	03 d2		 add	 edx, edx
  00071	03 d2		 add	 edx, edx
  00073	83 ca 01	 or	 edx, 1
  00076	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00079	41		 inc	 ecx
  0007a	83 c0 08	 add	 eax, 8
  0007d	80 39 00	 cmp	 BYTE PTR [ecx], 0
  00080	75 de		 jne	 SHORT $LL2@string2lis
$LN1@string2lis:

; 973  :    PUSH_NIL();

  00082	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR _g+32
  00088	89 08		 mov	 DWORD PTR [eax], ecx
  0008a	83 c0 04	 add	 eax, 4
  0008d	5e		 pop	 esi

; 974  :    return H;
; 975  : }

  0008e	c3		 ret	 0
_string2list ENDP
_TEXT	ENDS
PUBLIC	_string2list_with_length
; Function compile flags: /Ogtpy
;	COMDAT _string2list_with_length
_TEXT	SEGMENT
_H$ = 8							; size = 4
_name$ = 12						; size = 4
_wam$ = 16						; size = 4
_count$ = 20						; size = 4
_string2list_with_length PROC				; COMDAT

; 978  :    IF_OVER("string2list/2",(term *)(H+(count<<2)),HeapStk,NO());

  00000	8b 4c 24 10	 mov	 ecx, DWORD PTR _count$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR _H$[esp-4]
  00008	8b d1		 mov	 edx, ecx
  0000a	c1 e2 04	 shl	 edx, 4
  0000d	56		 push	 esi
  0000e	8b 74 24 10	 mov	 esi, DWORD PTR _wam$[esp]
  00012	03 d0		 add	 edx, eax
  00014	3b 56 14	 cmp	 edx, DWORD PTR [esi+20]
  00017	72 15		 jb	 SHORT $LN6@string2lis@2
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PGIILNLH@string2list?12?$AA@
  0001e	56		 push	 esi
  0001f	6a 00		 push	 0
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 _overflow_by
  00027	83 c4 10	 add	 esp, 16			; 00000010H
  0002a	33 c0		 xor	 eax, eax
  0002c	5e		 pop	 esi

; 982  :    return H;
; 983  : }

  0002d	c3		 ret	 0
$LN6@string2lis@2:

; 979  :    while(count-->0)

  0002e	85 c9		 test	 ecx, ecx
  00030	7e 30		 jle	 SHORT $LN7@string2lis@2
  00032	8b 54 24 0c	 mov	 edx, DWORD PTR _name$[esp]
  00036	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL2@string2lis@2:

; 980  :      PUSH_LIST(INPUT_INT((bp_short)(*name++)))

  00040	8b 35 24 00 00
	00		 mov	 esi, DWORD PTR _g+36
  00046	89 30		 mov	 DWORD PTR [eax], esi
  00048	66 0f be 32	 movsx	 si, BYTE PTR [edx]
  0004c	0f b7 f6	 movzx	 esi, si
  0004f	03 f6		 add	 esi, esi
  00051	03 f6		 add	 esi, esi
  00053	83 ce 01	 or	 esi, 1
  00056	49		 dec	 ecx
  00057	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0005a	83 c0 08	 add	 eax, 8
  0005d	42		 inc	 edx
  0005e	85 c9		 test	 ecx, ecx
  00060	7f de		 jg	 SHORT $LL2@string2lis@2
$LN7@string2lis@2:

; 981  :    PUSH_NIL();

  00062	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR _g+32
  00068	89 08		 mov	 DWORD PTR [eax], ecx
  0006a	83 c0 04	 add	 eax, 4
  0006d	5e		 pop	 esi

; 982  :    return H;
; 983  : }

  0006e	c3		 ret	 0
_string2list_with_length ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@CMCIONPO@bad?5data?5in?5args?$CI2?$CJ?5of?5name?12?$AA@ ; `string'
PUBLIC	??_C@_0BO@JBOCIBDA@bad?5data?5in?5args?$CI1?$CJ?5of?5name?12?$AA@ ; `string'
PUBLIC	??_C@_0CI@EOEMOECO@both?5args?5of?5name?12?5cannot?5be?5va@ ; `string'
PUBLIC	??_C@_0CH@KIFADCGP@string2list?5overflow?5in?5name2lis@ ; `string'
PUBLIC	_A$GSCopy$
PUBLIC	_wam$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_name2list
EXTRN	_input_fun:PROC
;	COMDAT ??_C@_0BO@CMCIONPO@bad?5data?5in?5args?$CI2?$CJ?5of?5name?12?$AA@
CONST	SEGMENT
??_C@_0BO@CMCIONPO@bad?5data?5in?5args?$CI2?$CJ?5of?5name?12?$AA@ DB 'bad'
	DB	' data in args(2) of name/2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JBOCIBDA@bad?5data?5in?5args?$CI1?$CJ?5of?5name?12?$AA@
CONST	SEGMENT
??_C@_0BO@JBOCIBDA@bad?5data?5in?5args?$CI1?$CJ?5of?5name?12?$AA@ DB 'bad'
	DB	' data in args(1) of name/2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EOEMOECO@both?5args?5of?5name?12?5cannot?5be?5va@
CONST	SEGMENT
??_C@_0CI@EOEMOECO@both?5args?5of?5name?12?5cannot?5be?5va@ DB 'both args'
	DB	' of name/2 cannot be variables', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KIFADCGP@string2list?5overflow?5in?5name2lis@
CONST	SEGMENT
??_C@_0CH@KIFADCGP@string2list?5overflow?5in?5name2lis@ DB 'string2list o'
	DB	'verflow in name2list(...)', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _name2list
_TEXT	SEGMENT
_vl$ = -65556						; size = 4
_wam$GSCopy$ = -65552					; size = 4
_A$GSCopy$ = -65548					; size = 4
tv200 = -65544						; size = 4
_sbuf$ = -65540						; size = 65536
__$ArrayPad$ = -4					; size = 4
_H$ = 8							; size = 4
_t$ = 12						; size = 4
_l$ = 16						; size = 4
_wam$ = 20						; size = 4
_A$ = 24						; size = 4
_name2list PROC						; COMDAT

; 986  : { register cell vt,vl; register string name;

  00000	b8 14 00 01 00	 mov	 eax, 65556		; 00010014H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 10 00
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+65556], eax

; 1010 :   else
; 1011 :       return LOCAL_ERR(vl,"bad data in args(2) of name/2");

  00018	8b 84 24 24 00
	01 00		 mov	 eax, DWORD PTR _wam$[esp+65552]
  0001f	8b 8c 24 28 00
	01 00		 mov	 ecx, DWORD PTR _A$[esp+65552]
  00026	53		 push	 ebx
  00027	55		 push	 ebp
  00028	8b ac 24 20 00
	01 00		 mov	 ebp, DWORD PTR _H$[esp+65560]
  0002f	56		 push	 esi
  00030	8b b4 24 28 00
	01 00		 mov	 esi, DWORD PTR _t$[esp+65564]
  00037	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00039	57		 push	 edi
  0003a	8b bc 24 30 00
	01 00		 mov	 edi, DWORD PTR _l$[esp+65568]
  00041	89 44 24 14	 mov	 DWORD PTR _wam$GSCopy$[esp+65572], eax

; 1012 :   return H;

  00045	89 4c 24 18	 mov	 DWORD PTR _A$GSCopy$[esp+65572], ecx
  00049	f6 c3 03	 test	 bl, 3
  0004c	75 0f		 jne	 SHORT $LN25@name2list
  0004e	8b ff		 npad	 2
$LL15@name2list:

; 987  : 
; 988  : #if THREADS>0 && 10==VCC
; 989  :   static // os x bug - better: use MAXNBUF
; 990  : #endif
; 991  :      char sbuf[MAXNBUF];
; 992  : 
; 993  :   DEREF2(t,vt); DEREF2(l,vl);

  00050	3b f3		 cmp	 esi, ebx
  00052	74 09		 je	 SHORT $LN25@name2list
  00054	8b f3		 mov	 esi, ebx
  00056	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00058	f6 c3 03	 test	 bl, 3
  0005b	74 f3		 je	 SHORT $LL15@name2list
$LN25@name2list:
  0005d	8b 07		 mov	 eax, DWORD PTR [edi]
  0005f	89 44 24 10	 mov	 DWORD PTR _vl$[esp+65572], eax
  00063	a8 03		 test	 al, 3
  00065	75 10		 jne	 SHORT $LN12@name2list
$LL13@name2list:
  00067	3b f8		 cmp	 edi, eax
  00069	74 0c		 je	 SHORT $LN12@name2list
  0006b	8b f8		 mov	 edi, eax
  0006d	8b 00		 mov	 eax, DWORD PTR [eax]
  0006f	89 44 24 10	 mov	 DWORD PTR _vl$[esp+65572], eax
  00073	a8 03		 test	 al, 3
  00075	74 f0		 je	 SHORT $LL13@name2list
$LN12@name2list:

; 994  : 
; 995  :   if(NONVAR(vl) && list2buf(l,vl,sbuf,MAXNBUF)) {

  00077	8b c8		 mov	 ecx, eax
  00079	83 e1 03	 and	 ecx, 3
  0007c	89 4c 24 1c	 mov	 DWORD PTR tv200[esp+65572], ecx
  00080	74 4c		 je	 SHORT $LN11@name2list
  00082	68 00 00 01 00	 push	 65536			; 00010000H
  00087	8d 54 24 24	 lea	 edx, DWORD PTR _sbuf$[esp+65576]
  0008b	52		 push	 edx
  0008c	50		 push	 eax
  0008d	57		 push	 edi
  0008e	e8 00 00 00 00	 call	 _list2buf
  00093	83 c4 10	 add	 esp, 16			; 00000010H
  00096	85 c0		 test	 eax, eax
  00098	74 30		 je	 SHORT $LN30@name2list

; 996  :       UNITEST(T2C(t),input_fun(sbuf,0));

  0009a	8b 44 24 18	 mov	 eax, DWORD PTR _A$GSCopy$[esp+65572]
  0009e	8b 4c 24 14	 mov	 ecx, DWORD PTR _wam$GSCopy$[esp+65572]
  000a2	50		 push	 eax
  000a3	51		 push	 ecx
  000a4	8d 54 24 28	 lea	 edx, DWORD PTR _sbuf$[esp+65580]
  000a8	6a 00		 push	 0
  000aa	52		 push	 edx
  000ab	e8 00 00 00 00	 call	 _input_fun
  000b0	83 c4 08	 add	 esp, 8
  000b3	50		 push	 eax
$LN37@name2list:
  000b4	56		 push	 esi
  000b5	e8 00 00 00 00	 call	 _unify
  000ba	83 c4 10	 add	 esp, 16			; 00000010H
  000bd	85 c0		 test	 eax, eax
  000bf	0f 85 85 00 00
	00		 jne	 $LN6@name2list
  000c5	e9 c3 00 00 00	 jmp	 $LN16@name2list
$LN30@name2list:

; 994  : 
; 995  :   if(NONVAR(vl) && list2buf(l,vl,sbuf,MAXNBUF)) {

  000ca	8b 44 24 10	 mov	 eax, DWORD PTR _vl$[esp+65572]
$LN11@name2list:

; 997  :     }
; 998  :   else if(NONVAR(vt) && ( name = name2buf(vt,sbuf) )) {

  000ce	8b d3		 mov	 edx, ebx
  000d0	83 e2 03	 and	 edx, 3
  000d3	74 79		 je	 SHORT $LN31@name2list
  000d5	83 fa 01	 cmp	 edx, 1
  000d8	75 1c		 jne	 SHORT $LN21@name2list
  000da	c1 fb 02	 sar	 ebx, 2
  000dd	53		 push	 ebx
  000de	8d 44 24 24	 lea	 eax, DWORD PTR _sbuf$[esp+65576]
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_03JALODAI@?$CFld?$AA@
  000e7	50		 push	 eax
  000e8	e8 00 00 00 00	 call	 _sprintf
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	8d 4c 24 20	 lea	 ecx, DWORD PTR _sbuf$[esp+65572]
  000f4	eb 20		 jmp	 SHORT $LN28@name2list
$LN21@name2list:
  000f6	f7 c3 00 00 00
	ff		 test	 ebx, -16777216		; ff000000H
  000fc	75 50		 jne	 SHORT $LN31@name2list
  000fe	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR _atomtable
  00104	8b cb		 mov	 ecx, ebx
  00106	c1 e9 02	 shr	 ecx, 2
  00109	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  0010f	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  00112	85 c9		 test	 ecx, ecx
  00114	74 38		 je	 SHORT $LN31@name2list
$LN28@name2list:

; 999  :       term r=H;
; 1000 :       H=string2list(H,name,wam);

  00116	8b 5c 24 14	 mov	 ebx, DWORD PTR _wam$GSCopy$[esp+65572]
  0011a	53		 push	 ebx
  0011b	51		 push	 ecx
  0011c	55		 push	 ebp
  0011d	8b f5		 mov	 esi, ebp
  0011f	e8 00 00 00 00	 call	 _string2list
  00124	8b e8		 mov	 ebp, eax
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1001 :       /* was: if(!H) return H; */
; 1002 :       if(!H) {warnmes("string2list overflow in name2list(...)"); return H;}

  00129	85 ed		 test	 ebp, ebp
  0012b	75 11		 jne	 SHORT $LN7@name2list
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@KIFADCGP@string2list?5overflow?5in?5name2lis@
  00132	e8 00 00 00 00	 call	 _warnmes
  00137	83 c4 04	 add	 esp, 4
  0013a	33 c0		 xor	 eax, eax
  0013c	eb 4f		 jmp	 SHORT $LN16@name2list
$LN7@name2list:

; 1003 : 
; 1004 :       UNITEST(T2C(r),T2C(l));

  0013e	8b 54 24 18	 mov	 edx, DWORD PTR _A$GSCopy$[esp+65572]
  00142	52		 push	 edx
  00143	53		 push	 ebx
  00144	57		 push	 edi
  00145	e9 6a ff ff ff	 jmp	 $LN37@name2list
$LN6@name2list:

; 1012 :   return H;

  0014a	8b c5		 mov	 eax, ebp
  0014c	eb 3f		 jmp	 SHORT $LN16@name2list
$LN31@name2list:

; 1005 :     }
; 1006 :   else if(VAR(vt) && VAR(vl))

  0014e	85 d2		 test	 edx, edx
  00150	75 1b		 jne	 SHORT $LN35@name2list
  00152	39 54 24 1c	 cmp	 DWORD PTR tv200[esp+65572], edx
  00156	75 11		 jne	 SHORT $LN4@name2list

; 1007 :       ERREXIT("both args of name/2 cannot be variables")

  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EOEMOECO@both?5args?5of?5name?12?5cannot?5be?5va@
  0015d	e8 00 00 00 00	 call	 _warnmes
  00162	83 c4 04	 add	 esp, 4
  00165	33 c0		 xor	 eax, eax
  00167	eb 24		 jmp	 SHORT $LN16@name2list
$LN4@name2list:

; 1008 :   else if(NONVAR(vt))

  00169	85 d2		 test	 edx, edx
  0016b	74 0d		 je	 SHORT $LN2@name2list
$LN35@name2list:

; 1009 :       return LOCAL_ERR(vt,"bad data in args(1) of name/2");

  0016d	8b 44 24 14	 mov	 eax, DWORD PTR _wam$GSCopy$[esp+65572]
  00171	50		 push	 eax
  00172	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JBOCIBDA@bad?5data?5in?5args?$CI1?$CJ?5of?5name?12?$AA@
  00177	53		 push	 ebx
  00178	eb 0b		 jmp	 SHORT $LN36@name2list
$LN2@name2list:

; 1010 :   else
; 1011 :       return LOCAL_ERR(vl,"bad data in args(2) of name/2");

  0017a	8b 4c 24 14	 mov	 ecx, DWORD PTR _wam$GSCopy$[esp+65572]
  0017e	51		 push	 ecx
  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CMCIONPO@bad?5data?5in?5args?$CI2?$CJ?5of?5name?12?$AA@
  00184	50		 push	 eax
$LN36@name2list:
  00185	e8 00 00 00 00	 call	 _local_error
  0018a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@name2list:

; 1013 : }

  0018d	8b 8c 24 20 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65572]
  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5d		 pop	 ebp
  00197	5b		 pop	 ebx
  00198	33 cc		 xor	 ecx, esp
  0019a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019f	81 c4 14 00 01
	00		 add	 esp, 65556		; 00010014H
  001a5	c3		 ret	 0
_name2list ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@DFIPOGMG@bad?5first?5arg?5?$CIfunction?5address?$CJ@ ; `string'
PUBLIC	??_C@_0CF@LJJBCGLA@bad?5data?5returned?5in?5call_extern@ ; `string'
PUBLIC	??_C@_0DB@GDOMKHOH@char?5list?5second?5arg?5expected?5in@ ; `string'
PUBLIC	??_C@_0DF@MPNHBMGJ@list?5of?5chars?5second?5arg?5expecte@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_call_external
;	COMDAT ??_C@_0DE@DFIPOGMG@bad?5first?5arg?5?$CIfunction?5address?$CJ@
CONST	SEGMENT
??_C@_0DE@DFIPOGMG@bad?5first?5arg?5?$CIfunction?5address?$CJ@ DB 'bad fi'
	DB	'rst arg (function address) in call_external/3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LJJBCGLA@bad?5data?5returned?5in?5call_extern@
CONST	SEGMENT
??_C@_0CF@LJJBCGLA@bad?5data?5returned?5in?5call_extern@ DB 'bad data ret'
	DB	'urned in call_external/3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GDOMKHOH@char?5list?5second?5arg?5expected?5in@
CONST	SEGMENT
??_C@_0DB@GDOMKHOH@char?5list?5second?5arg?5expected?5in@ DB 'char list s'
	DB	'econd arg expected in call_external/3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MPNHBMGJ@list?5of?5chars?5second?5arg?5expecte@
CONST	SEGMENT
??_C@_0DF@MPNHBMGJ@list?5of?5chars?5second?5arg?5expecte@ DB 'list of cha'
	DB	'rs second arg expected in call_external/3', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _call_external
_TEXT	SEGMENT
_buf$ = -65540						; size = 65536
__$ArrayPad$ = -4					; size = 4
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_call_external PROC					; COMDAT

; 1032 : term call_external(register term H, register term regs, register stack wam) {

  00000	b8 04 00 01 00	 mov	 eax, 65540		; 00010004H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 00 00
	01 00		 mov	 DWORD PTR __$ArrayPad$[esp+65540], eax
  00018	55		 push	 ebp
  00019	8b ac 24 0c 00
	01 00		 mov	 ebp, DWORD PTR _H$[esp+65540]
  00020	56		 push	 esi
  00021	8b b4 24 14 00
	01 00		 mov	 esi, DWORD PTR _regs$[esp+65544]

; 1033 :   register term xref;
; 1034 :   register cell xval;
; 1035 :   bp_long ires;
; 1036 :   char buf[MAXNBUF];
; 1037 : 
; 1038 :   if(!INTEGER(X(1)) || NULL==INT2PTR(X(1)))

  00028	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  0002b	8b c8		 mov	 ecx, eax
  0002d	80 e1 03	 and	 cl, 3
  00030	57		 push	 edi
  00031	8b bc 24 1c 00
	01 00		 mov	 edi, DWORD PTR _wam$[esp+65548]
  00038	80 f9 01	 cmp	 cl, 1
  0003b	0f 85 9c 00 00
	00		 jne	 $LN7@call_exter
  00041	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]
  00044	85 d2		 test	 edx, edx
  00046	0f 84 91 00 00
	00		 je	 $LN7@call_exter

; 1040 : 
; 1041 :   xref=RX(2);

  0004c	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]
  0004f	53		 push	 ebx

; 1042 : 
; 1043 :   if(g.NIL==T2C(xref)) {

  00050	39 05 20 00 00
	00		 cmp	 DWORD PTR _g+32, eax
  00056	75 1b		 jne	 SHORT $LN6@call_exter

; 1044 :     buf[0]='\0';

  00058	c6 44 24 10 00	 mov	 BYTE PTR _buf$[esp+65556], 0

; 1045 :     xval=(cell)xref;

  0005d	8b d8		 mov	 ebx, eax
$LN3@call_exter:

; 1054 :     }
; 1055 : 
; 1056 :   xref=INT2PTR(X(1));

  0005f	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]

; 1057 : 
; 1058 :   ires=SFUNCALL(xref,(buf));

  00062	8d 54 24 10	 lea	 edx, DWORD PTR _buf$[esp+65556]
  00066	4e		 dec	 esi
  00067	52		 push	 edx
  00068	ff d6		 call	 esi
  0006a	83 c4 04	 add	 esp, 4

; 1059 :   if(!ires) return NULL;

  0006d	85 c0		 test	 eax, eax
  0006f	75 51		 jne	 SHORT $LN2@call_exter
  00071	eb 36		 jmp	 SHORT $LN11@call_exter
$LN6@call_exter:

; 1046 :   }
; 1047 :   else {
; 1048 :     if(NONVAR(xref))

  00073	a8 03		 test	 al, 3
  00075	74 09		 je	 SHORT $LN4@call_exter

; 1049 :       return LOCAL_ERR(T2C(xref),"list of chars second arg expected in call_external/3");

  00077	57		 push	 edi
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@MPNHBMGJ@list?5of?5chars?5second?5arg?5expecte@
  0007d	50		 push	 eax
  0007e	eb 21		 jmp	 SHORT $LN13@call_exter
$LN4@call_exter:

; 1050 : 
; 1051 :     xval=GETCELL(xref);

  00080	8b 18		 mov	 ebx, DWORD PTR [eax]

; 1052 :     if(FALSE==list2buf(xref,xval,buf,MAXNBUF))

  00082	68 00 00 01 00	 push	 65536			; 00010000H
  00087	8d 4c 24 14	 lea	 ecx, DWORD PTR _buf$[esp+65560]
  0008b	51		 push	 ecx
  0008c	53		 push	 ebx
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 _list2buf
  00093	83 c4 10	 add	 esp, 16			; 00000010H
  00096	85 c0		 test	 eax, eax
  00098	75 c5		 jne	 SHORT $LN3@call_exter

; 1053 :       return LOCAL_ERR(xval,"char list second arg expected in call_external/3");

  0009a	57		 push	 edi
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@GDOMKHOH@char?5list?5second?5arg?5expected?5in@
$LN12@call_exter:
  000a0	53		 push	 ebx
$LN13@call_exter:
  000a1	e8 00 00 00 00	 call	 _local_error
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@call_exter:
  000a9	5b		 pop	 ebx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5d		 pop	 ebp

; 1064 : 
; 1065 :   return H;
; 1066 : }

  000ad	8b 8c 24 00 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65540]
  000b4	33 cc		 xor	 ecx, esp
  000b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bb	81 c4 04 00 01
	00		 add	 esp, 65540		; 00010004H
  000c1	c3		 ret	 0
$LN2@call_exter:

; 1060 : 
; 1061 :   xref=H;
; 1062 :   if(!(H=string2list(H,buf,wam)))

  000c2	57		 push	 edi
  000c3	8d 44 24 14	 lea	 eax, DWORD PTR _buf$[esp+65560]
  000c7	50		 push	 eax
  000c8	55		 push	 ebp
  000c9	e8 00 00 00 00	 call	 _string2list
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	85 c0		 test	 eax, eax
  000d3	75 d4		 jne	 SHORT $LN11@call_exter

; 1063 :     return LOCAL_ERR(xval,"bad data returned in call_external/3");

  000d5	57		 push	 edi
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@LJJBCGLA@bad?5data?5returned?5in?5call_extern@
  000db	eb c3		 jmp	 SHORT $LN12@call_exter
$LN7@call_exter:

; 1039 :     return LOCAL_ERR(X(1),"bad first arg (function address) in call_external/3");

  000dd	57		 push	 edi
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@DFIPOGMG@bad?5first?5arg?5?$CIfunction?5address?$CJ@
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 _local_error

; 1064 : 
; 1065 :   return H;
; 1066 : }

  000e9	8b 8c 24 18 00
	01 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+65564]
  000f0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5d		 pop	 ebp
  000f6	33 cc		 xor	 ecx, esp
  000f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fd	81 c4 04 00 01
	00		 add	 esp, 65540		; 00010004H
  00103	c3		 ret	 0
_call_external ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@MMNNOJNC@bad?5constructor?5starts?51st?5arg?5o@ ; `string'
PUBLIC	_det_append0
;	COMDAT ??_C@_0CP@MMNNOJNC@bad?5constructor?5starts?51st?5arg?5o@
CONST	SEGMENT
??_C@_0CP@MMNNOJNC@bad?5constructor?5starts?51st?5arg?5o@ DB 'bad constru'
	DB	'ctor starts 1st arg of det_append/3', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _det_append0
_TEXT	SEGMENT
_car$ = 8						; size = 4
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_det_append0 PROC					; COMDAT

; 1071 :   register term xref;
; 1072 :   register cell xval;
; 1073 :   register cell cons;
; 1074 :   term car;
; 1075 : 
; 1076 :   PUSHVAL(g.DIF);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _H$[esp-4]
  00004	a1 28 00 00 00	 mov	 eax, DWORD PTR _g+40

; 1077 :   car=H++;
; 1078 :   xref=C2T(X(1));

  00009	8b 4c 24 08	 mov	 ecx, DWORD PTR _regs$[esp-4]
  0000d	53		 push	 ebx
  0000e	89 02		 mov	 DWORD PTR [edx], eax
  00010	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00013	83 c2 04	 add	 edx, 4
  00016	55		 push	 ebp
  00017	89 54 24 0c	 mov	 DWORD PTR _car$[esp+4], edx
  0001b	56		 push	 esi
  0001c	83 c2 04	 add	 edx, 4
  0001f	57		 push	 edi

; 1079 : #if(TRACE > 1)
; 1080 :   fprintf(STD_err,"det_append0   : base=%ld H=%ld margin=%ld end=%ld\n",
; 1081 :     wam[HeapStk].base,H,wam[HeapStk].margin,wam[HeapStk].end);
; 1082 : #endif
; 1083 :   if(VAR(T2C(xref)))

  00020	f6 c1 03	 test	 cl, 3
  00023	0f 85 8a 00 00
	00		 jne	 $LN6@det_append

; 1084 :     { cons=xval=GETREF(xref);

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	8b d8		 mov	 ebx, eax

; 1085 :       if(NONVAR(xval))

  0002d	a8 03		 test	 al, 3
  0002f	0f 84 7e 00 00
	00		 je	 $LN6@det_append

; 1086 :         { register bp_long hmax =((term)wam[HeapStk].margin-H)>>1; /* should be 1/2 as we build 2!!! */

  00035	8b 74 24 1c	 mov	 esi, DWORD PTR _wam$[esp+12]
  00039	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  0003c	2b ea		 sub	 ebp, edx
  0003e	c1 fd 03	 sar	 ebp, 3

; 1087 : 
; 1088 :           if(hmax<1) hmax=1; /* has to iterate at least once, anyway, bug otherwise */

  00041	83 fd 01	 cmp	 ebp, 1
  00044	7d 05		 jge	 SHORT $LN10@det_append
  00046	bd 01 00 00 00	 mov	 ebp, 1
$LN10@det_append:

; 1089 :           if(2!=GETARITY(cons))

  0004b	8b f8		 mov	 edi, eax
  0004d	81 e7 00 00 00
	ff		 and	 edi, -16777216		; ff000000H
  00053	81 ff 00 00 00
	02		 cmp	 edi, 33554432		; 02000000H
  00059	74 15		 je	 SHORT $LL8@det_append

; 1090 :             return LOCAL_ERR(cons,
; 1091 :               "bad constructor starts 1st arg of det_append/3");

  0005b	56		 push	 esi
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@MMNNOJNC@bad?5constructor?5starts?51st?5arg?5o@
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _local_error
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5d		 pop	 ebp
  0006d	5b		 pop	 ebx

; 1130 :   return H;
; 1131 : }

  0006e	c3		 ret	 0
  0006f	90		 npad	 1
$LL8@det_append:

; 1092 : 
; 1093 : #if(TRACE > 1)
; 1094 :   fprintf(STD_err,"det_append0 bf: base=%ld H=%ld margin=%ld end=%ld\n",
; 1095 :     wam[HeapStk].base,H,wam[HeapStk].margin,wam[HeapStk].end);
; 1096 : #endif
; 1097 :           do
; 1098 :             {
; 1099 : 
; 1100 : #if(TRACE > 1)
; 1101 :               if(!INSPACE(H,(term)wam[HeapStk].base,(term)wam[HeapStk].end)) {
; 1102 :                 fprintf(STD_err,"det_append0 do: base=%ld H=%ld margin=%ld end=%ld\n",
; 1103 :                   wam[HeapStk].base,H,wam[HeapStk].margin,wam[HeapStk].end);
; 1104 :                  ASSERT2(INSPACE(H,(term)wam[HeapStk].base,(term)wam[HeapStk].margin),H);
; 1105 :               }
; 1106 : #endif
; 1107 :               H[0]=cons;
; 1108 : #if EAGER_DEREF>1
; 1109 :               { register term xcar;
; 1110 :                 FDEREF3(xref+1,xcar,xval);
; 1111 :                 if(COMPOUND(xval)) H[1]=T2C(xcar);
; 1112 :                 else H[1]=xval;
; 1113 :               }
; 1114 : #elif EAGER_DEREF>0
; 1115 :               xval=xref[1];

  00070	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  00073	89 1a		 mov	 DWORD PTR [edx], ebx
  00075	8b 37		 mov	 esi, DWORD PTR [edi]

; 1116 :               if(COMPOUND(xval)) H[1]=T2C(xref+1);

  00077	8b c6		 mov	 eax, esi
  00079	83 e0 03	 and	 eax, 3
  0007c	3c 03		 cmp	 al, 3
  0007e	75 0d		 jne	 SHORT $LN5@det_append
  00080	f7 c6 00 00 00
	ff		 test	 esi, -16777216		; ff000000H
  00086	74 05		 je	 SHORT $LN5@det_append
  00088	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  0008b	eb 03		 jmp	 SHORT $LN4@det_append
$LN5@det_append:

; 1117 :               else H[1]=xval;

  0008d	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN4@det_append:

; 1118 : #else
; 1119 :               H[1]=T2C(xref+1);
; 1120 : #endif
; 1121 :               H+=2;
; 1122 :               xref+=2;
; 1123 :               DEREF2(xref,xval);

  00090	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00093	83 c1 08	 add	 ecx, 8
  00096	83 c2 08	 add	 edx, 8
  00099	a8 03		 test	 al, 3
  0009b	75 0f		 jne	 SHORT $LN7@det_append
  0009d	8d 49 00	 npad	 3
$LL3@det_append:
  000a0	3b c8		 cmp	 ecx, eax
  000a2	74 08		 je	 SHORT $LN7@det_append
  000a4	8b c8		 mov	 ecx, eax
  000a6	8b 00		 mov	 eax, DWORD PTR [eax]
  000a8	a8 03		 test	 al, 3
  000aa	74 f4		 je	 SHORT $LL3@det_append
$LN7@det_append:

; 1124 :             }
; 1125 :           while(cons==xval && --hmax);

  000ac	3b d8		 cmp	 ebx, eax
  000ae	75 03		 jne	 SHORT $LN6@det_append
  000b0	4d		 dec	 ebp
  000b1	75 bd		 jne	 SHORT $LL8@det_append
$LN6@det_append:

; 1126 :         }
; 1127 :     }
; 1128 :   PUSHVAL(X(2));

  000b3	8b 44 24 18	 mov	 eax, DWORD PTR _regs$[esp+12]
  000b7	8b 40 f8	 mov	 eax, DWORD PTR [eax-8]
  000ba	5f		 pop	 edi
  000bb	89 02		 mov	 DWORD PTR [edx], eax

; 1129 :   SETREF(car,xref);

  000bd	8b 44 24 10	 mov	 eax, DWORD PTR _car$[esp+8]
  000c1	5e		 pop	 esi
  000c2	5d		 pop	 ebp
  000c3	89 08		 mov	 DWORD PTR [eax], ecx
  000c5	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  000c8	5b		 pop	 ebx

; 1130 :   return H;
; 1131 : }

  000c9	c3		 ret	 0
_det_append0 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@KPCLJLL@unexpected?51st?5arg?5of?5list2term?1@ ; `string'
PUBLIC	??_C@_0DE@IDHHKANB@atomic?5terminator?5should?5end?51st@ ; `string'
PUBLIC	??_C@_0CG@FJHJHMJM@bad?5functor?5in?51st?5arg?5of?5list2t@ ; `string'
PUBLIC	??_C@_0M@CBBDOLOK@list2term?12?$AA@		; `string'
PUBLIC	??_C@_0CD@BPHDEBGB@list?5too?5big?3?51st?5arg?5of?5list2te@ ; `string'
PUBLIC	??_C@_0CO@LPALGMMD@bad?5constructor?5starts?51st?5arg?5o@ ; `string'
PUBLIC	_list2term
;	COMDAT ??_C@_0CC@KPCLJLL@unexpected?51st?5arg?5of?5list2term?1@
CONST	SEGMENT
??_C@_0CC@KPCLJLL@unexpected?51st?5arg?5of?5list2term?1@ DB 'unexpected 1'
	DB	'st arg of list2term/2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@IDHHKANB@atomic?5terminator?5should?5end?51st@
CONST	SEGMENT
??_C@_0DE@IDHHKANB@atomic?5terminator?5should?5end?51st@ DB 'atomic termi'
	DB	'nator should end 1st arg of list2term/2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FJHJHMJM@bad?5functor?5in?51st?5arg?5of?5list2t@
CONST	SEGMENT
??_C@_0CG@FJHJHMJM@bad?5functor?5in?51st?5arg?5of?5list2t@ DB 'bad functo'
	DB	'r in 1st arg of list2term/2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CBBDOLOK@list2term?12?$AA@
CONST	SEGMENT
??_C@_0M@CBBDOLOK@list2term?12?$AA@ DB 'list2term/2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BPHDEBGB@list?5too?5big?3?51st?5arg?5of?5list2te@
CONST	SEGMENT
??_C@_0CD@BPHDEBGB@list?5too?5big?3?51st?5arg?5of?5list2te@ DB 'list too '
	DB	'big: 1st arg of list2term', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LPALGMMD@bad?5constructor?5starts?51st?5arg?5o@
CONST	SEGMENT
??_C@_0CO@LPALGMMD@bad?5constructor?5starts?51st?5arg?5o@ DB 'bad constru'
	DB	'ctor starts 1st arg of list2term/2', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _list2term
_TEXT	SEGMENT
_H$ = 8							; size = 4
_t$9343 = 12						; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_list2term PROC						; COMDAT

; 1135 :   register term xref;
; 1136 :   register cell xval;
; 1137 :   register cell cons;
; 1138 :   xref=C2T(X(1));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 1139 :   if(VAR(T2C(xref)))

  00007	f6 c2 03	 test	 dl, 3
  0000a	0f 85 50 01 00
	00		 jne	 $LN22@list2term

; 1140 :     { term t=H++; term f=xref+1; bp_long arity=0;

  00010	8b 44 24 04	 mov	 eax, DWORD PTR _H$[esp-4]
  00014	53		 push	 ebx
  00015	56		 push	 esi

; 1141 :       cons=GETREF(xref);

  00016	8b 32		 mov	 esi, DWORD PTR [edx]

; 1142 :       if(2!=GETARITY(cons))

  00018	8b ce		 mov	 ecx, esi
  0001a	57		 push	 edi
  0001b	89 44 24 14	 mov	 DWORD PTR _t$9343[esp+8], eax
  0001f	81 e1 00 00 00
	ff		 and	 ecx, -16777216		; ff000000H
  00025	83 c0 04	 add	 eax, 4
  00028	33 ff		 xor	 edi, edi
  0002a	8d 5a 04	 lea	 ebx, DWORD PTR [edx+4]
  0002d	81 f9 00 00 00
	02		 cmp	 ecx, 33554432		; 02000000H
  00033	74 17		 je	 SHORT $LN21@list2term

; 1143 :         return LOCAL_ERR(cons,
; 1144 :           "bad constructor starts 1st arg of list2term/2");

  00035	8b 54 24 18	 mov	 edx, DWORD PTR _wam$[esp+8]
  00039	52		 push	 edx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@LPALGMMD@bad?5constructor?5starts?51st?5arg?5o@
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 _local_error
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx

; 1169 :   return H;
; 1170 : }

  0004b	c3		 ret	 0
$LN21@list2term:

; 1145 :       xref += 2;
; 1146 :       DEREF2(xref,xval);

  0004c	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0004f	83 c2 08	 add	 edx, 8
  00052	f6 c1 03	 test	 cl, 3
  00055	75 0d		 jne	 SHORT $LN26@list2term
$LL20@list2term:
  00057	3b d1		 cmp	 edx, ecx
  00059	74 09		 je	 SHORT $LN26@list2term
  0005b	8b d1		 mov	 edx, ecx
  0005d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005f	f6 c1 03	 test	 cl, 3
  00062	74 f3		 je	 SHORT $LL20@list2term
$LN26@list2term:
  00064	55		 push	 ebp

; 1147 :       while(cons==xval)

  00065	8b 6c 24 1c	 mov	 ebp, DWORD PTR _wam$[esp+12]
  00069	3b f1		 cmp	 esi, ecx
  0006b	75 69		 jne	 SHORT $LN11@list2term
  0006d	8d 49 00	 npad	 3
$LL18@list2term:

; 1148 :          { arity++;

  00070	47		 inc	 edi

; 1149 :            IF_OVER("list2term/2",(term *)H,HeapStk,NO());

  00071	3b 45 14	 cmp	 eax, DWORD PTR [ebp+20]
  00074	73 48		 jae	 SHORT $LN29@list2term

; 1150 :            PUSHVAL(T2C(xref+1));

  00076	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  00079	89 08		 mov	 DWORD PTR [eax], ecx

; 1151 :            FDEREF(T2C(xref+2));

  0007b	83 c2 08	 add	 edx, 8
  0007e	83 c0 04	 add	 eax, 4
  00081	f6 c2 03	 test	 dl, 3
  00084	74 04		 je	 SHORT $LN27@list2term
  00086	8b ca		 mov	 ecx, edx
  00088	eb 14		 jmp	 SHORT $LN12@list2term
$LN27@list2term:
  0008a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0008c	f6 c1 03	 test	 cl, 3
  0008f	75 0d		 jne	 SHORT $LN12@list2term
$LL13@list2term:
  00091	3b d1		 cmp	 edx, ecx
  00093	74 09		 je	 SHORT $LN12@list2term
  00095	8b d1		 mov	 edx, ecx
  00097	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00099	f6 c1 03	 test	 cl, 3
  0009c	74 f3		 je	 SHORT $LL13@list2term
$LN12@list2term:

; 1147 :       while(cons==xval)

  0009e	3b f1		 cmp	 esi, ecx
  000a0	74 ce		 je	 SHORT $LL18@list2term

; 1152 :          }
; 1153 :       if(arity>=MAXARITY) ERREXIT("list too big: 1st arg of list2term")

  000a2	81 ff 00 01 00
	00		 cmp	 edi, 256		; 00000100H
  000a8	72 2c		 jb	 SHORT $LN11@list2term
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BPHDEBGB@list?5too?5big?3?51st?5arg?5of?5list2te@
  000af	e8 00 00 00 00	 call	 _warnmes
  000b4	83 c4 04	 add	 esp, 4
  000b7	5d		 pop	 ebp
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	33 c0		 xor	 eax, eax
  000bc	5b		 pop	 ebx

; 1169 :   return H;
; 1170 : }

  000bd	c3		 ret	 0
$LN29@list2term:

; 1149 :            IF_OVER("list2term/2",(term *)H,HeapStk,NO());

  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CBBDOLOK@list2term?12?$AA@
  000c3	55		 push	 ebp
  000c4	6a 00		 push	 0
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 _overflow_by
  000cc	83 c4 10	 add	 esp, 16			; 00000010H
  000cf	5d		 pop	 ebp
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	33 c0		 xor	 eax, eax
  000d4	5b		 pop	 ebx

; 1169 :   return H;
; 1170 : }

  000d5	c3		 ret	 0
$LN11@list2term:

; 1154 : 
; 1155 :       if(!ATOMIC(xval))

  000d6	8b d1		 mov	 edx, ecx
  000d8	83 e2 03	 and	 edx, 3
  000db	74 6f		 je	 SHORT $LN9@list2term
  000dd	83 fa 01	 cmp	 edx, 1
  000e0	74 08		 je	 SHORT $LN10@list2term
  000e2	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  000e8	75 62		 jne	 SHORT $LN9@list2term
$LN10@list2term:

; 1158 :       FDEREF(T2C(f));

  000ea	8b d3		 mov	 edx, ebx
  000ec	f6 c3 03	 test	 bl, 3
  000ef	74 04		 je	 SHORT $LN28@list2term
  000f1	8b cb		 mov	 ecx, ebx
  000f3	eb 18		 jmp	 SHORT $LN5@list2term
$LN28@list2term:
  000f5	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000f7	f6 c1 03	 test	 cl, 3
  000fa	75 11		 jne	 SHORT $LN5@list2term
  000fc	8d 64 24 00	 npad	 4
$LL6@list2term:
  00100	3b d1		 cmp	 edx, ecx
  00102	74 09		 je	 SHORT $LN5@list2term
  00104	8b d1		 mov	 edx, ecx
  00106	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00108	f6 c1 03	 test	 cl, 3
  0010b	74 f3		 je	 SHORT $LL6@list2term
$LN5@list2term:

; 1159 :       if(VAR(xval) || (INTEGER(xval) && arity))

  0010d	8b d1		 mov	 edx, ecx
  0010f	83 e2 03	 and	 edx, 3
  00112	74 24		 je	 SHORT $LN3@list2term
  00114	83 fa 01	 cmp	 edx, 1
  00117	75 04		 jne	 SHORT $LN4@list2term
  00119	85 ff		 test	 edi, edi
  0011b	75 1b		 jne	 SHORT $LN3@list2term
$LN4@list2term:

; 1162 :       if(IDENTIFIER(xval))

  0011d	83 fa 03	 cmp	 edx, 3
  00120	75 0b		 jne	 SHORT $LN2@list2term

; 1163 :         xval=PUTARITY(xval,arity);

  00122	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00128	c1 e7 18	 shl	 edi, 24			; 00000018H
  0012b	0b cf		 or	 ecx, edi
$LN2@list2term:

; 1164 :       SETCELL(t,xval);

  0012d	8b 54 24 18	 mov	 edx, DWORD PTR _t$9343[esp+12]
  00131	5d		 pop	 ebp
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	89 0a		 mov	 DWORD PTR [edx], ecx
  00136	5b		 pop	 ebx

; 1169 :   return H;
; 1170 : }

  00137	c3		 ret	 0
$LN3@list2term:

; 1160 :         return LOCAL_ERR(xval,
; 1161 :           "bad functor in 1st arg of list2term/2");

  00138	55		 push	 ebp
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@FJHJHMJM@bad?5functor?5in?51st?5arg?5of?5list2t@
  0013e	51		 push	 ecx
  0013f	e8 00 00 00 00	 call	 _local_error
  00144	83 c4 0c	 add	 esp, 12			; 0000000cH
  00147	5d		 pop	 ebp
  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx

; 1169 :   return H;
; 1170 : }

  0014b	c3		 ret	 0
$LN9@list2term:

; 1156 :         return LOCAL_ERR(xval,
; 1157 :           "atomic terminator should end 1st arg of list2term/2");

  0014c	55		 push	 ebp
  0014d	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@IDHHKANB@atomic?5terminator?5should?5end?51st@

; 1160 :         return LOCAL_ERR(xval,
; 1161 :           "bad functor in 1st arg of list2term/2");

  00152	51		 push	 ecx
  00153	e8 00 00 00 00	 call	 _local_error
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH
  0015b	5d		 pop	 ebp
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx

; 1169 :   return H;
; 1170 : }

  0015f	c3		 ret	 0
$LN22@list2term:

; 1165 :     }
; 1166 :   else
; 1167 :     return LOCAL_ERR(T2C(xref),
; 1168 :       "unexpected 1st arg of list2term/2");

  00160	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _regs$[esp-4], OFFSET ??_C@_0CC@KPCLJLL@unexpected?51st?5arg?5of?5list2term?1@
  00168	89 54 24 04	 mov	 DWORD PTR _H$[esp-4], edx
  0016c	e9 00 00 00 00	 jmp	 _local_error
_list2term ENDP
_TEXT	ENDS
PUBLIC	_term2list
; Function compile flags: /Ogtpy
;	COMDAT _term2list
_TEXT	SEGMENT
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_term2list PROC						; COMDAT

; 1174 :   register term xref;
; 1175 :   register cell xval;
; 1176 :   register cell cons=X(2); cell nil=X(3);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	53		 push	 ebx
  00005	8b 58 f4	 mov	 ebx, DWORD PTR [eax-12]
  00008	57		 push	 edi
  00009	8b 78 f8	 mov	 edi, DWORD PTR [eax-8]

; 1177 :   register bp_long arity,i;
; 1178 :   if(!IDENTIFIER(cons)) return NULL;

  0000c	8b cf		 mov	 ecx, edi
  0000e	83 e1 03	 and	 ecx, 3
  00011	80 f9 03	 cmp	 cl, 3
  00014	74 05		 je	 SHORT $LN8@term2list
$LN14@term2list:
  00016	5f		 pop	 edi
  00017	33 c0		 xor	 eax, eax
  00019	5b		 pop	 ebx

; 1197 :   return H;
; 1198 : }

  0001a	c3		 ret	 0
$LN8@term2list:

; 1179 :   cons=PUTARITY(cons,2);
; 1180 :   xref=C2T(X(1));

  0001b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001e	81 e7 ff ff ff
	00		 and	 edi, 16777215		; 00ffffffH
  00024	81 cf 00 00 00
	02		 or	 edi, 33554432		; 02000000H

; 1181 :   if(VAR(T2C(xref)))

  0002a	f6 c2 03	 test	 dl, 3
  0002d	75 52		 jne	 SHORT $LN7@term2list

; 1182 :     { register term t=xref;
; 1183 :       xval=GETREF(xref);

  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 1184 :       if(VAR(xval)) return NULL;

  00031	f6 c1 03	 test	 cl, 3
  00034	74 e0		 je	 SHORT $LN14@term2list

; 1185 :       arity=GETARITY(xval);
; 1186 :       H[0]=cons; H[1]=PUTARITY(xval,0); H+=2;

  00036	8b 44 24 0c	 mov	 eax, DWORD PTR _H$[esp+4]
  0003a	56		 push	 esi
  0003b	8b f1		 mov	 esi, ecx
  0003d	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00043	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00046	c1 ee 18	 shr	 esi, 24			; 00000018H
  00049	89 38		 mov	 DWORD PTR [eax], edi

; 1187 : 
; 1188 :       for(i=1; i<arity; i++)

  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	83 c0 08	 add	 eax, 8
  00053	3b f1		 cmp	 esi, ecx
  00055	7e 12		 jle	 SHORT $LN3@term2list
  00057	55		 push	 ebp
$LL5@term2list:

; 1189 :         {
; 1190 :            H[0]=cons; H[1]=t[i]; H+=2;

  00058	89 38		 mov	 DWORD PTR [eax], edi
  0005a	8b 2c 8a	 mov	 ebp, DWORD PTR [edx+ecx*4]
  0005d	89 68 04	 mov	 DWORD PTR [eax+4], ebp
  00060	41		 inc	 ecx
  00061	83 c0 08	 add	 eax, 8
  00064	3b ce		 cmp	 ecx, esi
  00066	7c f0		 jl	 SHORT $LL5@term2list
  00068	5d		 pop	 ebp
$LN3@term2list:

; 1191 :         }
; 1192 :       if(arity) {H[0]=cons; H[1]=T2C(t+i); H+=2;}

  00069	85 f6		 test	 esi, esi
  0006b	5e		 pop	 esi
  0006c	74 1f		 je	 SHORT $LN1@term2list

; 1193 :     }
; 1194 :   else
; 1195 :     { H[0]=cons; H[1]=T2C(xref); H+=2; }

  0006e	89 38		 mov	 DWORD PTR [eax], edi
  00070	8d 14 8a	 lea	 edx, DWORD PTR [edx+ecx*4]
  00073	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00076	83 c0 08	 add	 eax, 8

; 1196 :   PUSHVAL(nil);

  00079	89 18		 mov	 DWORD PTR [eax], ebx
  0007b	5f		 pop	 edi
  0007c	83 c0 04	 add	 eax, 4
  0007f	5b		 pop	 ebx

; 1197 :   return H;
; 1198 : }

  00080	c3		 ret	 0
$LN7@term2list:

; 1193 :     }
; 1194 :   else
; 1195 :     { H[0]=cons; H[1]=T2C(xref); H+=2; }

  00081	8b 44 24 0c	 mov	 eax, DWORD PTR _H$[esp+4]
  00085	89 38		 mov	 DWORD PTR [eax], edi
  00087	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0008a	83 c0 08	 add	 eax, 8
$LN1@term2list:

; 1196 :   PUSHVAL(nil);

  0008d	89 18		 mov	 DWORD PTR [eax], ebx
  0008f	5f		 pop	 edi
  00090	83 c0 04	 add	 eax, 4
  00093	5b		 pop	 ebx

; 1197 :   return H;
; 1198 : }

  00094	c3		 ret	 0
_term2list ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NDFAENJK@term_append?13?$AA@		; `string'
PUBLIC	_term_append
;	COMDAT ??_C@_0O@NDFAENJK@term_append?13?$AA@
CONST	SEGMENT
??_C@_0O@NDFAENJK@term_append?13?$AA@ DB 'term_append/3', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _term_append
_TEXT	SEGMENT
_t$ = -4						; size = 4
_H$ = 8							; size = 4
_c$ = 12						; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_term_append PROC					; COMDAT

; 1201 : {

  00000	51		 push	 ecx

; 1202 :   register term t=RX(1),c=RX(2);

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR _regs$[esp]
  00005	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  00008	53		 push	 ebx
  00009	8b 58 fc	 mov	 ebx, DWORD PTR [eax-4]
  0000c	89 5c 24 04	 mov	 DWORD PTR _t$[esp+8], ebx
  00010	89 4c 24 10	 mov	 DWORD PTR _c$[esp+4], ecx

; 1203 :   register cell val_t,val_c,arity_t,arity_c,arity;
; 1204 :   val_t=NONVAR((cell)t) ? (cell)t : GETREF(t);

  00014	8b c3		 mov	 eax, ebx
  00016	f6 c3 03	 test	 bl, 3
  00019	75 02		 jne	 SHORT $LN16@term_appen
  0001b	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN16@term_appen:

; 1205 :   if(!IDENTIFIER(val_t)) return NULL;

  0001d	8b d0		 mov	 edx, eax
  0001f	83 e2 03	 and	 edx, 3
  00022	80 fa 03	 cmp	 dl, 3
  00025	74 05		 je	 SHORT $LN12@term_appen
$LN25@term_appen:
  00027	33 c0		 xor	 eax, eax
  00029	5b		 pop	 ebx

; 1218 :   return H;
; 1219 : }

  0002a	59		 pop	 ecx
  0002b	c3		 ret	 0
$LN12@term_appen:

; 1206 :   val_c=NONVAR((cell)c) ? (cell)c : GETREF(c);

  0002c	f6 c1 03	 test	 cl, 3
  0002f	75 02		 jne	 SHORT $LN18@term_appen
  00031	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@term_appen:

; 1207 :   if(!IDENTIFIER(val_c)) return NULL;

  00033	8b d1		 mov	 edx, ecx
  00035	83 e2 03	 and	 edx, 3
  00038	80 fa 03	 cmp	 dl, 3
  0003b	75 ea		 jne	 SHORT $LN25@term_appen

; 1208 :   arity_c=GETARITY(val_c);

  0003d	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00040	55		 push	 ebp
  00041	8b e9		 mov	 ebp, ecx

; 1209 :   arity_t=GETARITY(val_t);

  00043	8b c8		 mov	 ecx, eax
  00045	c1 e9 18	 shr	 ecx, 24			; 00000018H

; 1210 :   arity=arity_c+arity_t;

  00048	8d 14 29	 lea	 edx, DWORD PTR [ecx+ebp]

; 1211 :   if(arity>=MAXARITY) return NULL;

  0004b	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  00051	0f 83 92 00 00
	00		 jae	 $LN26@term_appen

; 1212 :   SETCELL(H,PUTARITY(val_t,arity));

  00057	56		 push	 esi
  00058	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0005d	c1 e2 18	 shl	 edx, 24			; 00000018H
  00060	57		 push	 edi
  00061	8b 7c 24 18	 mov	 edi, DWORD PTR _H$[esp+16]
  00065	0b c2		 or	 eax, edx
  00067	89 07		 mov	 DWORD PTR [edi], eax

; 1213 :   if(arity_t) COPY_ARGS(H,t,arity_t);

  00069	85 c9		 test	 ecx, ecx
  0006b	74 2a		 je	 SHORT $LN9@term_appen
  0006d	8d 34 8d fc ff
	ff ff		 lea	 esi, DWORD PTR [ecx*4-4]
  00074	85 f6		 test	 esi, esi
  00076	74 19		 je	 SHORT $LN6@term_appen
  00078	8b d3		 mov	 edx, ebx
  0007a	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]
  0007d	2b d7		 sub	 edx, edi
  0007f	90		 npad	 1
$LL8@term_appen:
  00080	8b 1c 02	 mov	 ebx, DWORD PTR [edx+eax]
  00083	89 18		 mov	 DWORD PTR [eax], ebx
  00085	83 e8 04	 sub	 eax, 4
  00088	83 ee 04	 sub	 esi, 4
  0008b	75 f3		 jne	 SHORT $LL8@term_appen
  0008d	8b 5c 24 10	 mov	 ebx, DWORD PTR _t$[esp+20]
$LN6@term_appen:
  00091	8d 04 8b	 lea	 eax, DWORD PTR [ebx+ecx*4]
  00094	89 04 8f	 mov	 DWORD PTR [edi+ecx*4], eax
$LN9@term_appen:

; 1214 :   H+=arity_t;

  00097	8d 34 8f	 lea	 esi, DWORD PTR [edi+ecx*4]

; 1215 :   if(arity_c) COPY_ARGS(H,c,arity_c);

  0009a	85 ed		 test	 ebp, ebp
  0009c	74 2b		 je	 SHORT $LN5@term_appen
  0009e	8d 0c ad fc ff
	ff ff		 lea	 ecx, DWORD PTR [ebp*4-4]
  000a5	85 c9		 test	 ecx, ecx
  000a7	74 16		 je	 SHORT $LN23@term_appen
  000a9	8b 54 24 1c	 mov	 edx, DWORD PTR _c$[esp+16]
  000ad	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  000b0	2b d6		 sub	 edx, esi
$LL4@term_appen:
  000b2	8b 3c 02	 mov	 edi, DWORD PTR [edx+eax]
  000b5	89 38		 mov	 DWORD PTR [eax], edi
  000b7	83 e8 04	 sub	 eax, 4
  000ba	83 e9 04	 sub	 ecx, 4
  000bd	75 f3		 jne	 SHORT $LL4@term_appen
$LN23@term_appen:
  000bf	8b 4c 24 1c	 mov	 ecx, DWORD PTR _c$[esp+16]
  000c3	8d 14 a9	 lea	 edx, DWORD PTR [ecx+ebp*4]
  000c6	89 14 ae	 mov	 DWORD PTR [esi+ebp*4], edx
$LN5@term_appen:

; 1216 :   H+=arity_c+1;
; 1217 :   IF_OVER("term_append/3",(term *)H,HeapStk,NO());

  000c9	8b 4c 24 20	 mov	 ecx, DWORD PTR _wam$[esp+16]
  000cd	8d 44 ae 04	 lea	 eax, DWORD PTR [esi+ebp*4+4]
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  000d6	72 13		 jb	 SHORT $LN24@term_appen
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NDFAENJK@term_append?13?$AA@
  000dd	51		 push	 ecx
  000de	6a 00		 push	 0
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 _overflow_by
  000e6	83 c4 10	 add	 esp, 16			; 00000010H
$LN26@term_appen:
  000e9	33 c0		 xor	 eax, eax
$LN24@term_appen:
  000eb	5d		 pop	 ebp
  000ec	5b		 pop	 ebx

; 1218 :   return H;
; 1219 : }

  000ed	59		 pop	 ecx
  000ee	c3		 ret	 0
_term_append ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@GPHNMKJP@value_trailing?$AA@		; `string'
;	COMDAT ??_C@_0P@GPHNMKJP@value_trailing?$AA@
CONST	SEGMENT
??_C@_0P@GPHNMKJP@value_trailing?$AA@ DB 'value_trailing', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _copy_term0
_TEXT	SEGMENT
_arity$9896 = -8					; size = 4
_bakTR$ = -4						; size = 4
_ct$ = 8						; size = 4
_h$ = 8							; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_wam$ = 20						; size = 4
_copy_term0 PROC					; COMDAT
; _t0$ = ecx

; 1243 : { register term ct = h;

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	8b 6c 24 14	 mov	 ebp, DWORD PTR _h$[esp+12]
  00009	57		 push	 edi

; 1244 :   register term *TR=TR_TOP;

  0000a	8b 7c 24 24	 mov	 edi, DWORD PTR _wam$[esp+16]
  0000e	8b 5f 2c	 mov	 ebx, DWORD PTR [edi+44]
  00011	8b c5		 mov	 eax, ebp
  00013	89 44 24 18	 mov	 DWORD PTR _ct$[esp+16], eax

; 1245 :   term *bakTR=TR;

  00017	89 5c 24 10	 mov	 DWORD PTR _bakTR$[esp+20], ebx

; 1246 :   if(h>=to) return NULL;

  0001b	3b 6c 24 20	 cmp	 ebp, DWORD PTR _to$[esp+16]
  0001f	72 09		 jb	 SHORT $LN31@copy_term0
  00021	5f		 pop	 edi
  00022	5d		 pop	 ebp
  00023	33 c0		 xor	 eax, eax
  00025	5b		 pop	 ebx

; 1289 : }

  00026	83 c4 08	 add	 esp, 8
  00029	c3		 ret	 0
$LN31@copy_term0:

; 1247 :   ASSERT2(INSPACE(h,from,to),h);
; 1248 :   ASSERT2(!ATOMIC(T2C(t0)),t0);
; 1249 :   SETREF(h++,t0);

  0002a	89 4d 00	 mov	 DWORD PTR [ebp], ecx
  0002d	83 c5 04	 add	 ebp, 4
  00030	56		 push	 esi
$LL30@copy_term0:

; 1250 :   do
; 1251 :     { term t; cell val_t;
; 1252 :       ASSERT2(INSPACE(ct,from,h),ct);
; 1253 :       t = ct; DEREF2(t,val_t);

  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b d0		 mov	 edx, eax
  00035	f6 c1 03	 test	 cl, 3
  00038	0f 85 16 01 00
	00		 jne	 $LN3@copy_term0
  0003e	8b ff		 npad	 2
$LL27@copy_term0:
  00040	3b d1		 cmp	 edx, ecx
  00042	74 09		 je	 SHORT $LN26@copy_term0
  00044	8b d1		 mov	 edx, ecx
  00046	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00048	f6 c1 03	 test	 cl, 3
  0004b	74 f3		 je	 SHORT $LL27@copy_term0
$LN26@copy_term0:

; 1254 :       if (t == ct)

  0004d	3b d0		 cmp	 edx, eax
  0004f	0f 84 ff 00 00
	00		 je	 $LN3@copy_term0

; 1255 :         { ASSERT2(NONVAR(val_t) || INSPACE(C2T(val_t), from, h), val_t);
; 1256 :         }
; 1257 :       else if (ATOMIC(val_t)) SETCELL(ct,val_t);

  00055	8b f1		 mov	 esi, ecx
  00057	83 e6 03	 and	 esi, 3
  0005a	74 14		 je	 SHORT $LN48@copy_term0
  0005c	83 fe 01	 cmp	 esi, 1
  0005f	74 08		 je	 SHORT $LN22@copy_term0
  00061	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  00067	75 07		 jne	 SHORT $LN48@copy_term0
$LN22@copy_term0:
  00069	89 08		 mov	 DWORD PTR [eax], ecx
  0006b	e9 e4 00 00 00	 jmp	 $LN3@copy_term0
$LN48@copy_term0:

; 1258 :       else if (INSPACE(t,from,h)) SETREF(ct,t);

  00070	39 54 24 20	 cmp	 DWORD PTR _from$[esp+20], edx
  00074	77 0b		 ja	 SHORT $LN20@copy_term0
  00076	3b d5		 cmp	 edx, ebp
  00078	73 07		 jae	 SHORT $LN20@copy_term0
  0007a	89 10		 mov	 DWORD PTR [eax], edx
  0007c	e9 d3 00 00 00	 jmp	 $LN3@copy_term0
$LN20@copy_term0:

; 1259 :       else if (VAR(val_t))

  00081	85 f6		 test	 esi, esi
  00083	75 1a		 jne	 SHORT $LN18@copy_term0

; 1260 :         { ASSERT2(VAR(val_t),val_t); Comment("Old var");
; 1261 :           VALUE_TRAIL_IT(val_t,t); SETREF(ct,ct); SETREF(t,ct);

  00085	3b 5f 38	 cmp	 ebx, DWORD PTR [edi+56]
  00088	0f 83 da 00 00
	00		 jae	 $LN43@copy_term0
  0008e	89 13		 mov	 DWORD PTR [ebx], edx
  00090	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  00093	89 00		 mov	 DWORD PTR [eax], eax
  00095	83 c3 08	 add	 ebx, 8
  00098	89 02		 mov	 DWORD PTR [edx], eax

; 1262 :         }
; 1263 :       else

  0009a	e9 b5 00 00 00	 jmp	 $LN3@copy_term0
$LN18@copy_term0:

; 1264 :         { ASSERT2(COMPOUND(val_t),t);
; 1265 :           ASSERT2(!INSPACE(t,from,to),t);
; 1266 :           SETREF(ct,h); Comment("Old structure");

  0009f	89 28		 mov	 DWORD PTR [eax], ebp
$LL15@copy_term0:

; 1267 :           do
; 1268 :             { cell arity;
; 1269 :               VALUE_TRAIL_IT(val_t,t);

  000a1	8b 44 24 28	 mov	 eax, DWORD PTR _wam$[esp+20]
  000a5	3b 58 38	 cmp	 ebx, DWORD PTR [eax+56]
  000a8	0f 83 d5 00 00
	00		 jae	 $LN41@copy_term0
  000ae	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  000b1	89 13		 mov	 DWORD PTR [ebx], edx

; 1270 :               SETCELL(h,val_t); SETREF(t,h);

  000b3	89 4d 00	 mov	 DWORD PTR [ebp], ecx

; 1271 :               arity=GETARITY(val_t);

  000b6	c1 e9 18	 shr	 ecx, 24			; 00000018H
  000b9	83 c3 08	 add	 ebx, 8
  000bc	89 2a		 mov	 DWORD PTR [edx], ebp
  000be	89 4c 24 10	 mov	 DWORD PTR _arity$9896[esp+24], ecx

; 1272 :               if(h>to) {h = NULL; goto untrail;}

  000c2	3b 6c 24 24	 cmp	 ebp, DWORD PTR _to$[esp+20]
  000c6	0f 87 d2 00 00
	00		 ja	 $LN42@copy_term0

; 1273 :               COPY_CELLS(h,t,arity-1); Comment("Copying inner args");

  000cc	8d 3c 8d fc ff
	ff ff		 lea	 edi, DWORD PTR [ecx*4-4]
  000d3	85 ff		 test	 edi, edi
  000d5	74 1a		 je	 SHORT $LN8@copy_term0
  000d7	8b c2		 mov	 eax, edx
  000d9	8d 34 2f	 lea	 esi, DWORD PTR [edi+ebp]
  000dc	2b c5		 sub	 eax, ebp
  000de	8b ff		 npad	 2
$LL10@copy_term0:
  000e0	8b 0c 30	 mov	 ecx, DWORD PTR [eax+esi]
  000e3	89 0e		 mov	 DWORD PTR [esi], ecx
  000e5	83 ee 04	 sub	 esi, 4
  000e8	83 ef 04	 sub	 edi, 4
  000eb	75 f3		 jne	 SHORT $LL10@copy_term0
  000ed	8b 4c 24 10	 mov	 ecx, DWORD PTR _arity$9896[esp+24]
$LN8@copy_term0:

; 1274 :               h += arity;

  000f1	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 1275 :               t += arity;
; 1276 :               DEREF2(t,val_t);

  000f8	8b 0c 02	 mov	 ecx, DWORD PTR [edx+eax]
  000fb	03 d0		 add	 edx, eax
  000fd	03 e8		 add	 ebp, eax
  000ff	f6 c1 03	 test	 cl, 3
  00102	75 0d		 jne	 SHORT $LN14@copy_term0
$LL7@copy_term0:
  00104	3b d1		 cmp	 edx, ecx
  00106	74 09		 je	 SHORT $LN14@copy_term0
  00108	8b d1		 mov	 edx, ecx
  0010a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0010c	f6 c1 03	 test	 cl, 3
  0010f	74 f3		 je	 SHORT $LL7@copy_term0
$LN14@copy_term0:

; 1277 :             }
; 1278 :           while (COMPOUND(val_t) && !INSPACE(t,from,h));

  00111	8b c1		 mov	 eax, ecx
  00113	83 e0 03	 and	 eax, 3
  00116	3c 03		 cmp	 al, 3
  00118	75 1a		 jne	 SHORT $LN5@copy_term0
  0011a	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  00120	74 12		 je	 SHORT $LN5@copy_term0
  00122	39 54 24 20	 cmp	 DWORD PTR _from$[esp+20], edx
  00126	0f 87 75 ff ff
	ff		 ja	 $LL15@copy_term0
  0012c	3b d5		 cmp	 edx, ebp
  0012e	0f 83 6d ff ff
	ff		 jae	 $LL15@copy_term0
$LN5@copy_term0:

; 1279 :           Comment("Copying last arg:");
; 1280 :           if (COMPOUND(val_t)) SETREF(h++,t);

  00134	8b c1		 mov	 eax, ecx
  00136	83 e0 03	 and	 eax, 3
  00139	3c 03		 cmp	 al, 3
  0013b	75 0d		 jne	 SHORT $LN4@copy_term0
  0013d	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  00143	74 05		 je	 SHORT $LN4@copy_term0
  00145	89 55 00	 mov	 DWORD PTR [ebp], edx
  00148	eb 03		 jmp	 SHORT $LN51@copy_term0
$LN4@copy_term0:

; 1281 :           else SETCELL(h++,val_t);

  0014a	89 4d 00	 mov	 DWORD PTR [ebp], ecx
$LN51@copy_term0:
  0014d	8b 44 24 1c	 mov	 eax, DWORD PTR _ct$[esp+20]
  00151	83 c5 04	 add	 ebp, 4
$LN3@copy_term0:

; 1282 :           Comment("End of consecutive cells");
; 1283 :         }
; 1284 :       ct++;

  00154	83 c0 04	 add	 eax, 4
  00157	89 44 24 1c	 mov	 DWORD PTR _ct$[esp+20], eax

; 1285 :     }
; 1286 :   while (ct < h);

  0015b	3b c5		 cmp	 eax, ebp
  0015d	73 41		 jae	 SHORT $untrail$9915
  0015f	8b 7c 24 28	 mov	 edi, DWORD PTR _wam$[esp+20]
  00163	e9 c9 fe ff ff	 jmp	 $LL30@copy_term0
$LN43@copy_term0:

; 1260 :         { ASSERT2(VAR(val_t),val_t); Comment("Old var");
; 1261 :           VALUE_TRAIL_IT(val_t,t); SETREF(ct,ct); SETREF(t,ct);

  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GPHNMKJP@value_trailing?$AA@
  0016d	57		 push	 edi
  0016e	6a 01		 push	 1
  00170	53		 push	 ebx
  00171	e8 00 00 00 00	 call	 _overflow_by
  00176	83 c4 10	 add	 esp, 16			; 00000010H
  00179	5e		 pop	 esi
  0017a	5f		 pop	 edi
  0017b	5d		 pop	 ebp
  0017c	33 c0		 xor	 eax, eax
  0017e	5b		 pop	 ebx

; 1289 : }

  0017f	83 c4 08	 add	 esp, 8
  00182	c3		 ret	 0
$LN41@copy_term0:

; 1267 :           do
; 1268 :             { cell arity;
; 1269 :               VALUE_TRAIL_IT(val_t,t);

  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GPHNMKJP@value_trailing?$AA@
  00188	50		 push	 eax
  00189	6a 01		 push	 1
  0018b	53		 push	 ebx
  0018c	e8 00 00 00 00	 call	 _overflow_by
  00191	83 c4 10	 add	 esp, 16			; 00000010H
  00194	5e		 pop	 esi
  00195	5f		 pop	 edi
  00196	5d		 pop	 ebp
  00197	33 c0		 xor	 eax, eax
  00199	5b		 pop	 ebx

; 1289 : }

  0019a	83 c4 08	 add	 esp, 8
  0019d	c3		 ret	 0
$LN42@copy_term0:

; 1272 :               if(h>to) {h = NULL; goto untrail;}

  0019e	33 ed		 xor	 ebp, ebp
$untrail$9915:

; 1287 :   ASSERT2(ct == h,ct);
; 1288 :   untrail: UNWIND_VALUE_TRAIL(TR,bakTR); return h;

  001a0	8b 4c 24 14	 mov	 ecx, DWORD PTR _bakTR$[esp+24]
  001a4	3b cb		 cmp	 ecx, ebx
  001a6	73 17		 jae	 SHORT $LN1@copy_term0
  001a8	eb 06 8d 9b 00
	00 00 00	 npad	 8
$LL2@copy_term0:
  001b0	8b 43 fc	 mov	 eax, DWORD PTR [ebx-4]
  001b3	8b 53 f8	 mov	 edx, DWORD PTR [ebx-8]
  001b6	83 eb 08	 sub	 ebx, 8
  001b9	89 02		 mov	 DWORD PTR [edx], eax
  001bb	3b d9		 cmp	 ebx, ecx
  001bd	77 f1		 ja	 SHORT $LL2@copy_term0
$LN1@copy_term0:
  001bf	5e		 pop	 esi
  001c0	5f		 pop	 edi
  001c1	8b c5		 mov	 eax, ebp
  001c3	5d		 pop	 ebp
  001c4	5b		 pop	 ebx

; 1289 : }

  001c5	83 c4 08	 add	 esp, 8
  001c8	c3		 ret	 0
_copy_term0 ENDP
_TEXT	ENDS
PUBLIC	_copy_term
; Function compile flags: /Ogtpy
;	COMDAT _copy_term
_TEXT	SEGMENT
_t0$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_wam$ = 20						; size = 4
_copy_term PROC						; COMDAT

; 1292 :   return copy_term0(from, t0, from, to, wam);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR _wam$[esp-4]
  00004	8b 4c 24 0c	 mov	 ecx, DWORD PTR _to$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 0c	 mov	 eax, DWORD PTR _from$[esp]
  0000d	51		 push	 ecx
  0000e	8b 4c 24 0c	 mov	 ecx, DWORD PTR _t0$[esp+4]
  00012	50		 push	 eax
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _copy_term0
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 1293 : }

  0001c	c3		 ret	 0
_copy_term ENDP
_TEXT	ENDS
PUBLIC	_copy_to_engine
; Function compile flags: /Ogtpy
;	COMDAT _copy_to_engine
_TEXT	SEGMENT
_wam$ = 8						; size = 4
_t$ = 12						; size = 4
_copy_to_engine PROC					; COMDAT

; 1297 :    term h=(term)wam[HeapStk].top;
; 1298 :    term from=h;
; 1299 :    term to=(term)wam[HeapStk].margin;
; 1300 :    if(ATOMIC(t)) {SETREF(h,t); h++;}

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _t$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b 74 24 0c	 mov	 esi, DWORD PTR _wam$[esp+4]
  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b d1		 mov	 edx, ecx
  0000f	83 e2 03	 and	 edx, 3
  00012	57		 push	 edi
  00013	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00016	8b d8		 mov	 ebx, eax
  00018	74 1b		 je	 SHORT $LN4@copy_to_en
  0001a	83 fa 01	 cmp	 edx, 1
  0001d	74 08		 je	 SHORT $LN3@copy_to_en
  0001f	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  00025	75 0e		 jne	 SHORT $LN4@copy_to_en
$LN3@copy_to_en:
  00027	89 08		 mov	 DWORD PTR [eax], ecx
  00029	83 c0 04	 add	 eax, 4
$LN1@copy_to_en:

; 1305 :      }
; 1306 :    wam[HeapStk].top=(term *)h;

  0002c	5f		 pop	 edi
  0002d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00030	5e		 pop	 esi

; 1307 :    return from;

  00031	8b c3		 mov	 eax, ebx
  00033	5b		 pop	 ebx

; 1308 : }

  00034	c3		 ret	 0
$LN4@copy_to_en:

; 1301 :    else
; 1302 :      {
; 1303 :        h=copy_term(t,from,to,wam);

  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _copy_term0
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 1304 :        if(!h) return NULL;

  00041	85 c0		 test	 eax, eax
  00043	75 e7		 jne	 SHORT $LN1@copy_to_en

; 1308 : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	c3		 ret	 0
_copy_to_engine ENDP
_TEXT	ENDS
PUBLIC	_apply
; Function compile flags: /Ogtpy
;	COMDAT _apply
_TEXT	SEGMENT
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_fun$ = 16						; size = 4
_wam$ = 20						; size = 4
_apply	PROC						; COMDAT

; 1315 :   register term xref; register bp_long arity;
; 1316 : 
; 1317 :   arity=GETARITY(fun)-1; fun=PUTARITY(fun,arity);

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR _fun$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	c1 e8 18	 shr	 eax, 24			; 00000018H
  00009	53		 push	 ebx
  0000a	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00010	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]
  00013	c1 e2 18	 shl	 edx, 24			; 00000018H
  00016	56		 push	 esi

; 1318 : 
; 1319 : #if 0
; 1320 :    fprintf(STD_err,"!!! apply: %s/%d\n", NAME(fun),arity);
; 1321 : #endif
; 1322 : 
; 1323 :   xref=H; PUSHVAL(fun);

  00017	8b 74 24 0c	 mov	 esi, DWORD PTR _H$[esp+4]
  0001b	0b ca		 or	 ecx, edx
  0001d	89 0e		 mov	 DWORD PTR [esi], ecx

; 1324 :   COPY_CELLS(xref,regs,arity);

  0001f	8d 0c 85 fc ff
	ff ff		 lea	 ecx, DWORD PTR [eax*4-4]
  00026	57		 push	 edi
  00027	8b 7c 24 14	 mov	 edi, DWORD PTR _regs$[esp+8]
  0002b	8b de		 mov	 ebx, esi
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 18		 je	 SHORT $LN1@apply
  00031	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  00034	2b fb		 sub	 edi, ebx
  00036	55		 push	 ebp
$LL3@apply:
  00037	8b 2c 17	 mov	 ebp, DWORD PTR [edi+edx]
  0003a	89 2a		 mov	 DWORD PTR [edx], ebp
  0003c	83 ea 04	 sub	 edx, 4
  0003f	83 e9 04	 sub	 ecx, 4
  00042	75 f3		 jne	 SHORT $LL3@apply
  00044	8b 7c 24 18	 mov	 edi, DWORD PTR _regs$[esp+12]
  00048	5d		 pop	 ebp
$LN1@apply:

; 1325 :   regs[2]=regs[arity+1];

  00049	8b 0c 87	 mov	 ecx, DWORD PTR [edi+eax*4]

; 1326 :   regs[1]=T2C(xref);

  0004c	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0004f	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  00052	5f		 pop	 edi

; 1327 :   return H+arity;

  00053	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx

; 1328 : }

  00058	c3		 ret	 0
_apply	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@BLHNCMLN@compound?5continuation?5expected?$AA@ ; `string'
PUBLIC	??_C@_0BB@KNOJMCEH@bad?5continuation?$AA@	; `string'
PUBLIC	_strip_cont0
;	COMDAT ??_C@_0BP@BLHNCMLN@compound?5continuation?5expected?$AA@
CONST	SEGMENT
??_C@_0BP@BLHNCMLN@compound?5continuation?5expected?$AA@ DB 'compound con'
	DB	'tinuation expected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KNOJMCEH@bad?5continuation?$AA@
CONST	SEGMENT
??_C@_0BB@KNOJMCEH@bad?5continuation?$AA@ DB 'bad continuation', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _strip_cont0
_TEXT	SEGMENT
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_strip_cont0 PROC					; COMDAT

; 1332 :   register term xref,t; register bp_long arity;
; 1333 :   register cell fun;
; 1334 :   t=C2T(X(1));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _regs$[esp-4]
  00004	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 1335 :   if(NONVAR(t))

  00007	f6 c2 03	 test	 dl, 3
  0000a	74 11		 je	 SHORT $LN6@strip_cont

; 1336 :     return LOCAL_ERR(T2C(t),"bad continuation");

  0000c	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _regs$[esp-4], OFFSET ??_C@_0BB@KNOJMCEH@bad?5continuation?$AA@
  00014	89 54 24 04	 mov	 DWORD PTR _H$[esp-4], edx
  00018	e9 00 00 00 00	 jmp	 _local_error
$LN6@strip_cont:

; 1337 :   fun=GETREF(t);

  0001d	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 1338 :   if(!COMPOUND(fun))

  0001f	8b c1		 mov	 eax, ecx
  00021	83 e0 03	 and	 eax, 3
  00024	56		 push	 esi
  00025	3c 03		 cmp	 al, 3
  00027	75 5c		 jne	 SHORT $LN4@strip_cont
  00029	8b f1		 mov	 esi, ecx
  0002b	c1 ee 18	 shr	 esi, 24			; 00000018H
  0002e	85 f6		 test	 esi, esi
  00030	74 53		 je	 SHORT $LN4@strip_cont

; 1340 :   arity=GETARITY(fun);
; 1341 :   PUSHVAL(g.DIF);

  00032	8b 44 24 08	 mov	 eax, DWORD PTR _H$[esp]
  00036	53		 push	 ebx
  00037	57		 push	 edi
  00038	8b 3d 28 00 00
	00		 mov	 edi, DWORD PTR _g+40
  0003e	89 38		 mov	 DWORD PTR [eax], edi

; 1342 :   PUSHVAL((cell)(t+arity--)); /* should _point_ to the continuation !!!*/

  00040	8d 3c b2	 lea	 edi, DWORD PTR [edx+esi*4]
  00043	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1343 :   fun=PUTARITY(fun,arity);

  00046	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0004c	8d 7e ff	 lea	 edi, DWORD PTR [esi-1]
  0004f	c1 e7 18	 shl	 edi, 24			; 00000018H
  00052	0b cf		 or	 ecx, edi

; 1344 : #if 0
; 1345 : /* source of a VERY nasty bug: PUSHVAL(t[arity--]); */
; 1346 : fprintf(STD_err,"strip_cont0: %s/%d\n",NAME(fun),arity);
; 1347 : #endif
; 1348 :   xref=H;
; 1349 :   PUSHVAL(fun);

  00054	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1350 :   COPY_CELLS(xref,t,arity);

  00057	8d 0c b5 fc ff
	ff ff		 lea	 ecx, DWORD PTR [esi*4-4]
  0005e	8d 58 08	 lea	 ebx, DWORD PTR [eax+8]
  00061	85 c9		 test	 ecx, ecx
  00063	74 18		 je	 SHORT $LN1@strip_cont
  00065	8d 3c 19	 lea	 edi, DWORD PTR [ecx+ebx]
  00068	2b d3		 sub	 edx, ebx
  0006a	8d 9b 00 00 00
	00		 npad	 6
$LL3@strip_cont:
  00070	8b 1c 3a	 mov	 ebx, DWORD PTR [edx+edi]
  00073	89 1f		 mov	 DWORD PTR [edi], ebx
  00075	83 ef 04	 sub	 edi, 4
  00078	83 e9 04	 sub	 ecx, 4
  0007b	75 f3		 jne	 SHORT $LL3@strip_cont
$LN1@strip_cont:
  0007d	5f		 pop	 edi
  0007e	5b		 pop	 ebx

; 1351 :   return H+arity;

  0007f	8d 44 b0 08	 lea	 eax, DWORD PTR [eax+esi*4+8]
  00083	5e		 pop	 esi

; 1352 : }

  00084	c3		 ret	 0
$LN4@strip_cont:
  00085	5e		 pop	 esi

; 1339 :     return LOCAL_ERR(T2C(t),"compound continuation expected");

  00086	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _regs$[esp-4], OFFSET ??_C@_0BP@BLHNCMLN@compound?5continuation?5expected?$AA@
  0008e	89 54 24 04	 mov	 DWORD PTR _H$[esp-4], edx
  00092	e9 00 00 00 00	 jmp	 _local_error
_strip_cont0 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@GIDPBEIK@value?5trailing?$AA@		; `string'
PUBLIC	??_C@_0BM@MJDBOPPI@bad?5argument?5for?5dcg_stream?$AA@ ; `string'
PUBLIC	_dcg_tell
;	COMDAT ??_C@_0P@GIDPBEIK@value?5trailing?$AA@
CONST	SEGMENT
??_C@_0P@GIDPBEIK@value?5trailing?$AA@ DB 'value trailing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MJDBOPPI@bad?5argument?5for?5dcg_stream?$AA@
CONST	SEGMENT
??_C@_0BM@MJDBOPPI@bad?5argument?5for?5dcg_stream?$AA@ DB 'bad argument f'
	DB	'or dcg_stream', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _dcg_tell
_TEXT	SEGMENT
_ok$ = -4						; size = 4
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_A$ = 16						; size = 4
_dcg_tell PROC						; COMDAT

; 1355 : { cell xval; bp_long ires; bp_long ok=1;

  00000	51		 push	 ecx

; 1356 : 
; 1357 :   xval=X(1);

  00001	8b 44 24 08	 mov	 eax, DWORD PTR _regs$[esp]
  00005	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]

; 1358 :   if(!INTEGER(xval)) ok=0;

  00008	8b d0		 mov	 edx, eax
  0000a	80 e2 03	 and	 dl, 3
  0000d	33 c9		 xor	 ecx, ecx
  0000f	c7 04 24 01 00
	00 00		 mov	 DWORD PTR _ok$[esp+4], 1
  00016	80 fa 01	 cmp	 dl, 1
  00019	74 03		 je	 SHORT $LN8@dcg_tell
  0001b	89 0c 24	 mov	 DWORD PTR _ok$[esp+4], ecx
$LN8@dcg_tell:
  0001e	55		 push	 ebp

; 1359 :   ires=OUTPUT_INT(xval);

  0001f	8b e8		 mov	 ebp, eax
  00021	c1 fd 02	 sar	 ebp, 2

; 1360 :   if(!(ires > 0 && ires < MAXDCG)) ok=0;

  00024	3b e9		 cmp	 ebp, ecx
  00026	7e 08		 jle	 SHORT $LN6@dcg_tell
  00028	81 fd ff 00 00
	00		 cmp	 ebp, 255		; 000000ffH
  0002e	72 06		 jb	 SHORT $LN7@dcg_tell
$LN6@dcg_tell:
  00030	89 4c 24 04	 mov	 DWORD PTR _ok$[esp+8], ecx

; 1361 :   if(!ok) (void)LOCAL_ERR(xval,"bad argument for dcg_stream");

  00034	eb 06		 jmp	 SHORT $LN11@dcg_tell
$LN7@dcg_tell:
  00036	39 4c 24 04	 cmp	 DWORD PTR _ok$[esp+8], ecx
  0003a	75 1a		 jne	 SHORT $LN5@dcg_tell
$LN11@dcg_tell:
  0003c	8b 4c 24 10	 mov	 ecx, DWORD PTR _wam$[esp+4]
  00040	51		 push	 ecx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MJDBOPPI@bad?5argument?5for?5dcg_stream?$AA@
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _local_error

; 1369 :     }
; 1370 :   return ok;

  0004c	8b 44 24 10	 mov	 eax, DWORD PTR _ok$[esp+20]
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	5d		 pop	 ebp

; 1371 : }

  00054	59		 pop	 ecx
  00055	c3		 ret	 0
$LN5@dcg_tell:

; 1362 :   else
; 1363 :     { term g_connect=DCGSTART();
; 1364 : #ifndef NO_VALUE_TRAIL
; 1365 :       xval=GETREF(g_connect);
; 1366 :       SMART_VTRAIL_IF(g_connect,xval);

  00056	8b 54 24 14	 mov	 edx, DWORD PTR _A$[esp+4]
  0005a	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  0005d	53		 push	 ebx
  0005e	56		 push	 esi
  0005f	57		 push	 edi
  00060	8b 7c 24 1c	 mov	 edi, DWORD PTR _wam$[esp+16]
  00064	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00067	8b 9e 20 1c 00
	00		 mov	 ebx, DWORD PTR [esi+7200]
  0006d	81 c6 20 1c 00
	00		 add	 esi, 7200		; 00001c20H
  00073	3b f0		 cmp	 esi, eax
  00075	73 3b		 jae	 SHORT $LN3@dcg_tell
  00077	f6 c3 03	 test	 bl, 3
  0007a	75 04		 jne	 SHORT $LN2@dcg_tell
  0007c	3b d8		 cmp	 ebx, eax
  0007e	73 32		 jae	 SHORT $LN3@dcg_tell
$LN2@dcg_tell:
  00080	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00083	3b 47 38	 cmp	 eax, DWORD PTR [edi+56]
  00086	72 18		 jb	 SHORT $LN1@dcg_tell
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GIDPBEIK@value?5trailing?$AA@
  0008d	57		 push	 edi
  0008e	6a 01		 push	 1
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _overflow_by
  00096	6a 0e		 push	 14			; 0000000eH
  00098	e8 00 00 00 00	 call	 _bp_halt
  0009d	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@dcg_tell:
  000a0	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000a3	89 18		 mov	 DWORD PTR [eax], ebx
  000a5	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  000a8	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  000ab	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000ae	83 47 2c 08	 add	 DWORD PTR [edi+44], 8
$LN3@dcg_tell:

; 1367 : #endif
; 1368 :       SETREF(g_connect,g_connect+ires);

  000b2	8d 04 ae	 lea	 eax, DWORD PTR [esi+ebp*4]
  000b5	5f		 pop	 edi
  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 1369 :     }
; 1370 :   return ok;

  000b8	8b 44 24 0c	 mov	 eax, DWORD PTR _ok$[esp+16]
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	5d		 pop	 ebp

; 1371 : }

  000bf	59		 pop	 ecx
  000c0	c3		 ret	 0
_dcg_tell ENDP
_TEXT	ENDS
PUBLIC	_dcg_connect
; Function compile flags: /Ogtpy
;	COMDAT _dcg_connect
_TEXT	SEGMENT
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_head$ = 16						; size = 4
_wam$ = 16						; size = 4
_A$ = 20						; size = 4
_dcg_connect PROC					; COMDAT

; 1375 :                       cell xval,head,tail; term xref,new,g_connect=DCGSTART();
; 1376 : 
; 1377 : /* BUG: gc crashes on collecting dcg-connect generated cells */
; 1378 : /* however, the bug seems to be Visual C/C++ specific */
; 1379 : 
; 1380 : 
; 1381 : /*
; 1382 : IF_OVER("dcg_connect/2",(term *)H,HeapStk,NO());
; 1383 : 
; 1384 : fprintf(STD_err,".");
; 1385 : */
; 1386 :                       xref=C2T(GETREF(g_connect));
; 1387 : #if defined(NO_VALUE_TRAIL)
; 1388 :                       TRAIL_IT(xref);
; 1389 : #else
; 1390 :                       xval=GETREF(xref);
; 1391 :                       SMART_VTRAIL_IF(xref,xval);

  00000	8b 44 24 10	 mov	 eax, DWORD PTR _A$[esp-4]
  00004	8b 40 f8	 mov	 eax, DWORD PTR [eax-8]
  00007	53		 push	 ebx
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7c 24 1c	 mov	 edi, DWORD PTR _wam$[esp+12]
  0000f	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00012	8b b5 20 1c 00
	00		 mov	 esi, DWORD PTR [ebp+7200]
  00018	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001a	3b f0		 cmp	 esi, eax
  0001c	73 39		 jae	 SHORT $LN4@dcg_connec
  0001e	f6 c3 03	 test	 bl, 3
  00021	75 04		 jne	 SHORT $LN3@dcg_connec
  00023	3b d8		 cmp	 ebx, eax
  00025	73 30		 jae	 SHORT $LN4@dcg_connec
$LN3@dcg_connec:
  00027	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0002a	3b 47 38	 cmp	 eax, DWORD PTR [edi+56]
  0002d	72 18		 jb	 SHORT $LN2@dcg_connec
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GIDPBEIK@value?5trailing?$AA@
  00034	57		 push	 edi
  00035	6a 01		 push	 1
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _overflow_by
  0003d	6a 0e		 push	 14			; 0000000eH
  0003f	e8 00 00 00 00	 call	 _bp_halt
  00044	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@dcg_connec:
  00047	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  0004a	89 19		 mov	 DWORD PTR [ecx], ebx
  0004c	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  0004f	46		 inc	 esi
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	83 47 2c 08	 add	 DWORD PTR [edi+44], 8
$LN4@dcg_connec:

; 1392 : #endif
; 1393 :                       new=H;
; 1394 :                       MAKE_LIST();

  00057	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR _g+36
  0005d	8b 74 24 14	 mov	 esi, DWORD PTR _H$[esp+12]

; 1395 :                       NEWVAR(head);
; 1396 :                       NEWVAR(tail);
; 1397 :                       UNIFAIL(T2C(new),xval);

  00061	8b 54 24 20	 mov	 edx, DWORD PTR _A$[esp+12]
  00065	89 0e		 mov	 DWORD PTR [esi], ecx
  00067	52		 push	 edx
  00068	8b c6		 mov	 eax, esi
  0006a	83 c6 04	 add	 esi, 4
  0006d	57		 push	 edi
  0006e	89 36		 mov	 DWORD PTR [esi], esi
  00070	89 74 24 24	 mov	 DWORD PTR _head$[esp+20], esi
  00074	53		 push	 ebx
  00075	83 c6 04	 add	 esi, 4
  00078	50		 push	 eax
  00079	89 36		 mov	 DWORD PTR [esi], esi
  0007b	e8 00 00 00 00	 call	 _unify
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	85 c0		 test	 eax, eax
  00085	75 05		 jne	 SHORT $LN1@dcg_connec
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5d		 pop	 ebp
  0008a	5b		 pop	 ebx

; 1401 :                       return H;
; 1402 : }

  0008b	c3		 ret	 0
$LN1@dcg_connec:

; 1398 :                       xref=C2T(GETREF(g_connect));

  0008c	8b 85 20 1c 00
	00		 mov	 eax, DWORD PTR [ebp+7200]

; 1399 :                       SETREF(xref,tail);
; 1400 :                       X(0)=head;

  00092	8b 4c 24 18	 mov	 ecx, DWORD PTR _regs$[esp+12]
  00096	8b 54 24 1c	 mov	 edx, DWORD PTR _head$[esp+12]
  0009a	89 30		 mov	 DWORD PTR [eax], esi
  0009c	5f		 pop	 edi
  0009d	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	89 11		 mov	 DWORD PTR [ecx], edx
  000a4	5b		 pop	 ebx

; 1401 :                       return H;
; 1402 : }

  000a5	c3		 ret	 0
_dcg_connect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@NBANFCPK@setarg?13?8s?51st?5arg?5must?5be?5in?51?4@ ; `string'
PUBLIC	??_C@_0BC@OCCOLGAN@trailing?5in?5unify?$AA@	; `string'
PUBLIC	??_C@_0CF@JBNALLHJ@setarg?13?8s?52nd?5arg?5cannot?5be?5unb@ ; `string'
PUBLIC	??_C@_0CE@DNNPPKEM@setarg?13?8s?52nd?5arg?5cannot?5be?5ato@ ; `string'
PUBLIC	??_C@_0CD@KKIHADFP@setarg?13?8s?51st?5arg?5must?5be?5integ@ ; `string'
PUBLIC	_setarg
;	COMDAT ??_C@_0CH@NBANFCPK@setarg?13?8s?51st?5arg?5must?5be?5in?51?4@
CONST	SEGMENT
??_C@_0CH@NBANFCPK@setarg?13?8s?51st?5arg?5must?5be?5in?51?4@ DB 'setarg/'
	DB	'3''s 1st arg must be in 1..arity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OCCOLGAN@trailing?5in?5unify?$AA@
CONST	SEGMENT
??_C@_0BC@OCCOLGAN@trailing?5in?5unify?$AA@ DB 'trailing in unify', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JBNALLHJ@setarg?13?8s?52nd?5arg?5cannot?5be?5unb@
CONST	SEGMENT
??_C@_0CF@JBNALLHJ@setarg?13?8s?52nd?5arg?5cannot?5be?5unb@ DB 'setarg/3'''
	DB	's 2nd arg cannot be unbound', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DNNPPKEM@setarg?13?8s?52nd?5arg?5cannot?5be?5ato@
CONST	SEGMENT
??_C@_0CE@DNNPPKEM@setarg?13?8s?52nd?5arg?5cannot?5be?5ato@ DB 'setarg/3'''
	DB	's 2nd arg cannot be atomic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KKIHADFP@setarg?13?8s?51st?5arg?5must?5be?5integ@
CONST	SEGMENT
??_C@_0CD@KKIHADFP@setarg?13?8s?51st?5arg?5must?5be?5integ@ DB 'setarg/3'''
	DB	's 1st arg must be integer', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _setarg
_TEXT	SEGMENT
_xval$ = 8						; size = 4
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_A$ = 16						; size = 4
_setarg	PROC						; COMDAT

; 1405 : {

  00000	56		 push	 esi

; 1406 :   register term xref;
; 1407 :   register cell xval;
; 1408 :   register bp_long ires;
; 1409 : 
; 1410 :                       xval=X(1);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _regs$[esp]
  00005	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]

; 1411 :                       if(!INTEGER(xval))

  00008	8b c8		 mov	 ecx, eax
  0000a	80 e1 03	 and	 cl, 3
  0000d	80 f9 01	 cmp	 cl, 1
  00010	74 1a		 je	 SHORT $LN18@setarg

; 1412 :                         return (no)LOCAL_ERR(xval,
; 1413 :                            "setarg/3's 1st arg must be integer");

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR _wam$[esp]
  00016	5e		 pop	 esi
  00017	89 54 24 0c	 mov	 DWORD PTR _A$[esp-4], edx
  0001b	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], OFFSET ??_C@_0CD@KKIHADFP@setarg?13?8s?51st?5arg?5must?5be?5integ@
  00023	89 44 24 04	 mov	 DWORD PTR _regs$[esp-4], eax
  00027	e9 00 00 00 00	 jmp	 _local_error
$LN18@setarg:

; 1414 :                       ires=OUTPUT_INT(xval);
; 1415 : 
; 1416 :                       xref=C2T(X(2));

  0002c	8b 4e f8	 mov	 ecx, DWORD PTR [esi-8]

; 1417 :                       if(ATOMIC(T2C(xref)) )

  0002f	8b d1		 mov	 edx, ecx
  00031	c1 f8 02	 sar	 eax, 2
  00034	83 e2 03	 and	 edx, 3
  00037	74 27		 je	 SHORT $LN23@setarg
  00039	83 fa 01	 cmp	 edx, 1
  0003c	74 08		 je	 SHORT $LN16@setarg
  0003e	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  00044	75 1a		 jne	 SHORT $LN23@setarg
$LN16@setarg:

; 1418 :                         return (no)LOCAL_ERR(T2C(xref),
; 1419 :                             "setarg/3's 2nd arg cannot be atomic");

  00046	8b 44 24 0c	 mov	 eax, DWORD PTR _wam$[esp]
  0004a	5e		 pop	 esi
  0004b	89 44 24 0c	 mov	 DWORD PTR _A$[esp-4], eax
  0004f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], OFFSET ??_C@_0CE@DNNPPKEM@setarg?13?8s?52nd?5arg?5cannot?5be?5ato@
  00057	89 4c 24 04	 mov	 DWORD PTR _regs$[esp-4], ecx
  0005b	e9 00 00 00 00	 jmp	 _local_error
$LN23@setarg:

; 1420 :                       ASSERT2(VAR(T2C(xref)),xref);
; 1421 :                       xval=GETREF(xref);

  00060	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1422 :                       if(VAR(xval))

  00062	f6 c2 03	 test	 dl, 3
  00065	75 1a		 jne	 SHORT $LN15@setarg

; 1423 :                         return (no)LOCAL_ERR(xval,
; 1424 :                            "setarg/3's 2nd arg cannot be unbound");

  00067	8b 4c 24 0c	 mov	 ecx, DWORD PTR _wam$[esp]
  0006b	5e		 pop	 esi
  0006c	89 4c 24 0c	 mov	 DWORD PTR _A$[esp-4], ecx
  00070	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], OFFSET ??_C@_0CF@JBNALLHJ@setarg?13?8s?52nd?5arg?5cannot?5be?5unb@
  00078	89 54 24 04	 mov	 DWORD PTR _regs$[esp-4], edx
  0007c	e9 00 00 00 00	 jmp	 _local_error
$LN15@setarg:
  00081	57		 push	 edi

; 1425 :                       if(ires<=0 || (no)ires>GETARITY(xval))

  00082	85 c0		 test	 eax, eax
  00084	0f 8e e1 00 00
	00		 jle	 $LN13@setarg
  0008a	8b fa		 mov	 edi, edx
  0008c	c1 ef 18	 shr	 edi, 24			; 00000018H
  0008f	3b c7		 cmp	 eax, edi
  00091	0f 87 d4 00 00
	00		 ja	 $LN13@setarg

; 1428 :                       xref+=ires;
; 1429 : 
; 1430 : #if defined NO_VALUE_TRAIL
; 1431 :                       TRAIL_IF(xref);
; 1432 :                       SETREF(xref,X(3));
; 1433 : 
; 1434 : #elif defined SIMPLE_VALUE_TRAIL
; 1435 :                       xval=GETREF(xref);
; 1436 :                       VTRAIL_IF(xref,xval);
; 1437 :                       SETREF(xref,X(3));
; 1438 : #else
; 1439 :                       {register term newarg;
; 1440 :                        /* cell X2=xval; */
; 1441 :                        FDEREF3(X(3),newarg,xval);

  00097	53		 push	 ebx
  00098	8b 5e f4	 mov	 ebx, DWORD PTR [esi-12]
  0009b	8d 3c 81	 lea	 edi, DWORD PTR [ecx+eax*4]
  0009e	f6 c3 03	 test	 bl, 3
  000a1	75 19		 jne	 SHORT $LN9@setarg
  000a3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a5	a8 03		 test	 al, 3
  000a7	75 13		 jne	 SHORT $LN9@setarg
  000a9	8d a4 24 00 00
	00 00		 npad	 7
$LL10@setarg:
  000b0	3b d8		 cmp	 ebx, eax
  000b2	74 08		 je	 SHORT $LN9@setarg
  000b4	8b d8		 mov	 ebx, eax
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	a8 03		 test	 al, 3
  000ba	74 f4		 je	 SHORT $LL10@setarg
$LN9@setarg:

; 1442 :                        if(newarg!=xref)

  000bc	3b df		 cmp	 ebx, edi
  000be	0f 84 9e 00 00
	00		 je	 $LN28@setarg

; 1443 :                           {
; 1444 :                             xval=GETREF(xref); /* xref is the location to be replaced */

  000c4	8b 07		 mov	 eax, DWORD PTR [edi]
  000c6	89 44 24 10	 mov	 DWORD PTR _xval$[esp+8], eax

; 1445 :                             if(xval==(cell)xref) {

  000ca	3b c7		 cmp	 eax, edi
  000cc	75 45		 jne	 SHORT $LN7@setarg

; 1446 :                               /* to THINK: is this really UNSOUND?
; 1447 :                                  LOCAL_ERR(X2,
; 1448 :                                    "setarg/3: attempt to set unbound arg");
; 1449 :                               */
; 1450 :                               TRAIL_IF(xref); /* just conditionally trail ! */

  000ce	8b 54 24 18	 mov	 edx, DWORD PTR _A$[esp+8]
  000d2	3b 7a f8	 cmp	 edi, DWORD PTR [edx-8]
  000d5	0f 83 85 00 00
	00		 jae	 $LN27@setarg
  000db	8b 74 24 14	 mov	 esi, DWORD PTR _wam$[esp+8]
  000df	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000e2	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
  000e5	72 18		 jb	 SHORT $LN24@setarg
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OCCOLGAN@trailing?5in?5unify?$AA@
  000ec	56		 push	 esi
  000ed	6a 01		 push	 1
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 _overflow_by
  000f5	6a 0c		 push	 12			; 0000000cH
  000f7	e8 00 00 00 00	 call	 _bp_halt
  000fc	83 c4 14	 add	 esp, 20			; 00000014H
$LN24@setarg:
  000ff	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00102	89 38		 mov	 DWORD PTR [eax], edi
  00104	83 46 2c 04	 add	 DWORD PTR [esi+44], 4

; 1455 :                               SETREF(xref,newarg); /* set to derefed value! */

  00108	89 1f		 mov	 DWORD PTR [edi], ebx
  0010a	5b		 pop	 ebx
  0010b	5f		 pop	 edi

; 1456 :                             }
; 1457 :                           }
; 1458 :                       }
; 1459 : 
; 1460 : #endif
; 1461 : 
; 1462 :                       /* should be derefed and if == not done ?
; 1463 : 
; 1464 :                       */
; 1465 :                       return 1;

  0010c	b8 01 00 00 00	 mov	 eax, 1
  00111	5e		 pop	 esi

; 1466 : 
; 1467 : }

  00112	c3		 ret	 0
$LN7@setarg:

; 1451 :                               SETREF(xref,newarg); /* set location */
; 1452 :                             }
; 1453 :                             else {
; 1454 :                               SMART_VTRAIL_IF(xref,xval);

  00113	8b 4c 24 18	 mov	 ecx, DWORD PTR _A$[esp+8]
  00117	8b 49 f8	 mov	 ecx, DWORD PTR [ecx-8]
  0011a	3b f9		 cmp	 edi, ecx
  0011c	73 42		 jae	 SHORT $LN27@setarg
  0011e	a8 03		 test	 al, 3
  00120	75 04		 jne	 SHORT $LN2@setarg
  00122	3b c1		 cmp	 eax, ecx
  00124	73 3a		 jae	 SHORT $LN27@setarg
$LN2@setarg:
  00126	8b 74 24 14	 mov	 esi, DWORD PTR _wam$[esp+8]
  0012a	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0012d	3b 4e 38	 cmp	 ecx, DWORD PTR [esi+56]
  00130	72 1c		 jb	 SHORT $LN26@setarg
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0P@GIDPBEIK@value?5trailing?$AA@
  00137	56		 push	 esi
  00138	6a 01		 push	 1
  0013a	51		 push	 ecx
  0013b	e8 00 00 00 00	 call	 _overflow_by
  00140	6a 0e		 push	 14			; 0000000eH
  00142	e8 00 00 00 00	 call	 _bp_halt
  00147	8b 44 24 24	 mov	 eax, DWORD PTR _xval$[esp+28]
  0014b	83 c4 14	 add	 esp, 20			; 00000014H
$LN26@setarg:
  0014e	8b 56 2c	 mov	 edx, DWORD PTR [esi+44]
  00151	89 02		 mov	 DWORD PTR [edx], eax
  00153	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00156	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00159	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0015c	83 46 2c 08	 add	 DWORD PTR [esi+44], 8
$LN27@setarg:

; 1455 :                               SETREF(xref,newarg); /* set to derefed value! */

  00160	89 1f		 mov	 DWORD PTR [edi], ebx
$LN28@setarg:
  00162	5b		 pop	 ebx
  00163	5f		 pop	 edi

; 1456 :                             }
; 1457 :                           }
; 1458 :                       }
; 1459 : 
; 1460 : #endif
; 1461 : 
; 1462 :                       /* should be derefed and if == not done ?
; 1463 : 
; 1464 :                       */
; 1465 :                       return 1;

  00164	b8 01 00 00 00	 mov	 eax, 1
  00169	5e		 pop	 esi

; 1466 : 
; 1467 : }

  0016a	c3		 ret	 0
$LN13@setarg:

; 1426 :                         return (no)LOCAL_ERR(xval,
; 1427 :                            "setarg/3's 1st arg must be in 1..arity");

  0016b	8b 44 24 10	 mov	 eax, DWORD PTR _wam$[esp+4]
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	89 44 24 0c	 mov	 DWORD PTR _A$[esp-4], eax
  00175	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], OFFSET ??_C@_0CH@NBANFCPK@setarg?13?8s?51st?5arg?5must?5be?5in?51?4@
  0017d	89 54 24 04	 mov	 DWORD PTR _regs$[esp-4], edx
  00181	e9 00 00 00 00	 jmp	 _local_error
_setarg	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@EMAOANAM@change_arg?13?8s?51st?5arg?5must?5be?5i@ ; `string'
PUBLIC	??_C@_0CJ@COOMPNN@change_arg?13?8s?52nd?5arg?5cannot?5be@ ; `string'
PUBLIC	??_C@_0CI@KFEMDMB@change_arg?13?8s?52nd?5arg?5cannot?5be@ ; `string'
PUBLIC	??_C@_0CH@PJIFHOLE@change_arg?13?8s?51st?5arg?5must?5be?5i@ ; `string'
PUBLIC	_change_arg
;	COMDAT ??_C@_0CL@EMAOANAM@change_arg?13?8s?51st?5arg?5must?5be?5i@
CONST	SEGMENT
??_C@_0CL@EMAOANAM@change_arg?13?8s?51st?5arg?5must?5be?5i@ DB 'change_ar'
	DB	'g/3''s 1st arg must be in 1..arity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@COOMPNN@change_arg?13?8s?52nd?5arg?5cannot?5be@
CONST	SEGMENT
??_C@_0CJ@COOMPNN@change_arg?13?8s?52nd?5arg?5cannot?5be@ DB 'change_arg/'
	DB	'3''s 2nd arg cannot be unbound', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KFEMDMB@change_arg?13?8s?52nd?5arg?5cannot?5be@
CONST	SEGMENT
??_C@_0CI@KFEMDMB@change_arg?13?8s?52nd?5arg?5cannot?5be@ DB 'change_arg/'
	DB	'3''s 2nd arg cannot be atomic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PJIFHOLE@change_arg?13?8s?51st?5arg?5must?5be?5i@
CONST	SEGMENT
??_C@_0CH@PJIFHOLE@change_arg?13?8s?51st?5arg?5must?5be?5i@ DB 'change_ar'
	DB	'g/3''s 1st arg must be integer', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _change_arg
_TEXT	SEGMENT
_regs$ = 8						; size = 4
_wam$ = 12						; size = 4
_A$ = 16						; size = 4
_change_arg PROC					; COMDAT

; 1470 : {

  00000	56		 push	 esi

; 1471 :   register term xref;
; 1472 :   register cell xval;
; 1473 :   register bp_long ires;
; 1474 : 
; 1475 :                       xval=X(1);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _regs$[esp]
  00005	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]

; 1476 :                       if(!INTEGER(xval))

  00008	8b c8		 mov	 ecx, eax
  0000a	80 e1 03	 and	 cl, 3
  0000d	80 f9 01	 cmp	 cl, 1
  00010	74 1a		 je	 SHORT $LN6@change_arg

; 1477 :                         return (no)LOCAL_ERR(xval,
; 1478 :                            "change_arg/3's 1st arg must be integer");

  00012	8b 54 24 0c	 mov	 edx, DWORD PTR _wam$[esp]
  00016	5e		 pop	 esi
  00017	89 54 24 0c	 mov	 DWORD PTR _A$[esp-4], edx
  0001b	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], OFFSET ??_C@_0CH@PJIFHOLE@change_arg?13?8s?51st?5arg?5must?5be?5i@
  00023	89 44 24 04	 mov	 DWORD PTR _regs$[esp-4], eax
  00027	e9 00 00 00 00	 jmp	 _local_error
$LN6@change_arg:

; 1479 :                       ires=OUTPUT_INT(xval);
; 1480 : 
; 1481 :                       xref=C2T(X(2));

  0002c	8b 4e f8	 mov	 ecx, DWORD PTR [esi-8]

; 1482 :                       if(ATOMIC(T2C(xref)) )

  0002f	8b d1		 mov	 edx, ecx
  00031	c1 f8 02	 sar	 eax, 2
  00034	83 e2 03	 and	 edx, 3
  00037	74 27		 je	 SHORT $LN5@change_arg
  00039	83 fa 01	 cmp	 edx, 1
  0003c	74 08		 je	 SHORT $LN4@change_arg
  0003e	f7 c1 00 00 00
	ff		 test	 ecx, -16777216		; ff000000H
  00044	75 1a		 jne	 SHORT $LN5@change_arg
$LN4@change_arg:

; 1483 :                         return (no)LOCAL_ERR(T2C(xref),
; 1484 :                             "change_arg/3's 2nd arg cannot be atomic");

  00046	8b 44 24 0c	 mov	 eax, DWORD PTR _wam$[esp]
  0004a	5e		 pop	 esi
  0004b	89 44 24 0c	 mov	 DWORD PTR _A$[esp-4], eax
  0004f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], OFFSET ??_C@_0CI@KFEMDMB@change_arg?13?8s?52nd?5arg?5cannot?5be@
  00057	89 4c 24 04	 mov	 DWORD PTR _regs$[esp-4], ecx
  0005b	e9 00 00 00 00	 jmp	 _local_error
$LN5@change_arg:

; 1485 :                       ASSERT2(VAR(T2C(xref)),xref);
; 1486 :                       xval=GETREF(xref);

  00060	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1487 :                       if(VAR(xval))

  00062	f6 c2 03	 test	 dl, 3
  00065	75 1a		 jne	 SHORT $LN3@change_arg

; 1488 :                         return (no)LOCAL_ERR(xval,
; 1489 :                            "change_arg/3's 2nd arg cannot be unbound");

  00067	8b 4c 24 0c	 mov	 ecx, DWORD PTR _wam$[esp]
  0006b	5e		 pop	 esi
  0006c	89 4c 24 0c	 mov	 DWORD PTR _A$[esp-4], ecx
  00070	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], OFFSET ??_C@_0CJ@COOMPNN@change_arg?13?8s?52nd?5arg?5cannot?5be@
  00078	89 54 24 04	 mov	 DWORD PTR _regs$[esp-4], edx
  0007c	e9 00 00 00 00	 jmp	 _local_error
$LN3@change_arg:

; 1490 :                       if(ires<=0 || (no)ires>GETARITY(xval))

  00081	85 c0		 test	 eax, eax
  00083	7e 18		 jle	 SHORT $LN1@change_arg
  00085	57		 push	 edi
  00086	8b fa		 mov	 edi, edx
  00088	c1 ef 18	 shr	 edi, 24			; 00000018H
  0008b	3b c7		 cmp	 eax, edi
  0008d	5f		 pop	 edi
  0008e	77 0d		 ja	 SHORT $LN1@change_arg

; 1493 : #if 0
; 1494 :                       if(xref>SAVED_H)
; 1495 :                         return (no)LOCAL_ERR(xval,
; 1496 :                            "change_arg/3's 2nd arg found unsafe");
; 1497 : #endif
; 1498 :                       xref+=ires;
; 1499 : 
; 1500 :                       xval=X(3);
; 1501 : #if 0
; 1502 :                       if(VAR(xval) && xval>(cell)SAVED_H)
; 1503 :                         return (no)LOCAL_ERR(xval,
; 1504 :                            "change_arg/3's 3rd arg found unsafe");
; 1505 : #endif
; 1506 :                       SETREF(xref,xval);

  00090	8b 56 f4	 mov	 edx, DWORD PTR [esi-12]
  00093	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 1507 :                       return 1;

  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	5e		 pop	 esi

; 1508 : }

  0009c	c3		 ret	 0
$LN1@change_arg:

; 1491 :                         return (no)LOCAL_ERR(xval,
; 1492 :                            "change_arg/3's 1st arg must be in 1..arity");

  0009d	8b 44 24 0c	 mov	 eax, DWORD PTR _wam$[esp]
  000a1	5e		 pop	 esi
  000a2	89 44 24 0c	 mov	 DWORD PTR _A$[esp-4], eax
  000a6	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR _wam$[esp-4], OFFSET ??_C@_0CL@EMAOANAM@change_arg?13?8s?51st?5arg?5must?5be?5i@
  000ae	89 54 24 04	 mov	 DWORD PTR _regs$[esp-4], edx
  000b2	e9 00 00 00 00	 jmp	 _local_error
_change_arg ENDP
_TEXT	ENDS
PUBLIC	_bp_cons
; Function compile flags: /Ogtpy
;	COMDAT _bp_cons
_TEXT	SEGMENT
_hd$ = 8						; size = 4
_tl$ = 12						; size = 4
_bp_cons PROC						; COMDAT

; 1513 : { register term t=bp_heap_top;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _bp_heap_top

; 1514 :   SETCELL(t,g.DOT);

  00005	8b 0d 24 00 00
	00		 mov	 ecx, DWORD PTR _g+36

; 1515 :   SETREF(t+1,hd);

  0000b	8b 54 24 04	 mov	 edx, DWORD PTR _hd$[esp-4]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx

; 1516 :   SETREF(t+2,tl);

  00011	8b 4c 24 08	 mov	 ecx, DWORD PTR _tl$[esp-4]
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1517 :   bp_heap_top+=3;

  0001b	83 05 00 00 00
	00 0c		 add	 DWORD PTR _bp_heap_top, 12 ; 0000000cH

; 1518 :   return (cell)t;
; 1519 : }

  00022	c3		 ret	 0
_bp_cons ENDP
_TEXT	ENDS
PUBLIC	_member_entry
EXTRN	_unwind_trail:PROC
_BSS	SEGMENT
?oldA@?1??member_entry@@9@9 DD 01H DUP (?)		; `member_entry'::`2'::oldA
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _member_entry
_TEXT	SEGMENT
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_A$ = 20						; size = 4
_member_entry PROC					; COMDAT

; 1530 :   register term xref; register cell xval,fields;
; 1531 :   static term oldA; /* this will be always the second clause of member*/
; 1532 : 
; 1533 :    if(g.member_entry != (instr)SAVED_P)

  00000	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR _g+24
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	56		 push	 esi
  00009	8b 74 24 1c	 mov	 esi, DWORD PTR _A$[esp+8]
  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	57		 push	 edi
  00010	8b 7c 24 1c	 mov	 edi, DWORD PTR _wam$[esp+12]
  00014	3b c8		 cmp	 ecx, eax
  00016	74 09		 je	 SHORT $LN13@member_ent

; 1534 :      { oldA = SAVED_P;

  00018	a3 00 00 00 00	 mov	 DWORD PTR ?oldA@?1??member_entry@@9@9, eax

; 1535 :        SAVED_P = (term)g.member_entry;

  0001d	89 0e		 mov	 DWORD PTR [esi], ecx

; 1536 :      }
; 1537 :    else

  0001f	eb 1a		 jmp	 SHORT $LN12@member_ent
$LN13@member_ent:

; 1538 :      {
; 1539 :        TR_TOP=unwind_trail(TR_TOP,(term *)SAVED_TR);

  00021	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00024	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00027	50		 push	 eax
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _unwind_trail
  0002e	89 47 2c	 mov	 DWORD PTR [edi+44], eax

; 1540 :        H=SAVED_H;

  00031	8b 56 f8	 mov	 edx, DWORD PTR [esi-8]
  00034	83 c4 08	 add	 esp, 8
  00037	89 54 24 14	 mov	 DWORD PTR _H$[esp+12], edx
$LN12@member_ent:

; 1541 :      }
; 1542 : 
; 1543 :    fields = T2C(SAVED_An(member_ARITY,1)); /* arg 1 of member */

  0003b	8b 6e ec	 mov	 ebp, DWORD PTR [esi-20]

; 1544 :    xval = T2C(SAVED_An(member_ARITY,2));   /* arg 2 of member */

  0003e	8b 5e f0	 mov	 ebx, DWORD PTR [esi-16]
$LL11@member_ent:

; 1545 : 
; 1546 :    do
; 1547 :         {
; 1548 :           FDEREF(xval);

  00041	8b c3		 mov	 eax, ebx
  00043	f6 c3 03	 test	 bl, 3
  00046	75 15		 jne	 SHORT $LN5@member_ent
  00048	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  0004a	f6 c3 03	 test	 bl, 3
  0004d	75 0e		 jne	 SHORT $LN5@member_ent
  0004f	90		 npad	 1
$LL6@member_ent:
  00050	3b c3		 cmp	 eax, ebx
  00052	74 09		 je	 SHORT $LN5@member_ent
  00054	8b c3		 mov	 eax, ebx
  00056	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  00058	f6 c3 03	 test	 bl, 3
  0005b	74 f3		 je	 SHORT $LL6@member_ent
$LN5@member_ent:

; 1549 :           if(xval != g.DOT)

  0005d	3b 1d 24 00 00
	00		 cmp	 ebx, DWORD PTR _g+36
  00063	75 43		 jne	 SHORT $LN18@member_ent

; 1553 :             }
; 1554 :           xval = T2C(xref+2);
; 1555 :          }
; 1556 : 
; 1557 :    while(!unify(fields,xref[1],wam,A) &&
; 1558 :          (TR_TOP=unwind_trail(TR_TOP,(term *)SAVED_TR))
; 1559 :    );

  00065	56		 push	 esi
  00066	8d 58 08	 lea	 ebx, DWORD PTR [eax+8]
  00069	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006c	57		 push	 edi
  0006d	50		 push	 eax
  0006e	55		 push	 ebp
  0006f	e8 00 00 00 00	 call	 _unify
  00074	83 c4 10	 add	 esp, 16			; 00000010H
  00077	85 c0		 test	 eax, eax
  00079	75 17		 jne	 SHORT $LN1@member_ent
  0007b	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  0007e	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  00081	51		 push	 ecx
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 _unwind_trail
  00088	83 c4 08	 add	 esp, 8
  0008b	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  0008e	85 c0		 test	 eax, eax
  00090	75 af		 jne	 SHORT $LL11@member_ent
$LN1@member_ent:

; 1560 : 
; 1561 :    SAVED_An(member_ARITY,2) = C2T(xval);
; 1562 :    regs[1] = T2C(SAVED_Cont);

  00092	8b 4e f4	 mov	 ecx, DWORD PTR [esi-12]
  00095	8b 54 24 18	 mov	 edx, DWORD PTR _regs$[esp+12]

; 1563 :    return H;

  00099	8b 44 24 14	 mov	 eax, DWORD PTR _H$[esp+12]
  0009d	5f		 pop	 edi
  0009e	89 5e f0	 mov	 DWORD PTR [esi-16], ebx
  000a1	5e		 pop	 esi
  000a2	5d		 pop	 ebp
  000a3	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  000a6	5b		 pop	 ebx

; 1564 : }

  000a7	c3		 ret	 0
$LN18@member_ent:

; 1550 :             { if(VAR(xval)) {SAVED_P=oldA;wam[ChoiceStk].top=A;}

  000a8	f6 c3 03	 test	 bl, 3
  000ab	75 11		 jne	 SHORT $LN3@member_ent
  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?oldA@?1??member_entry@@9@9
  000b2	89 06		 mov	 DWORD PTR [esi], eax

; 1551 :               else wam[ChoiceStk].top=(term*)SAVED_lastP(member_ARITY);

  000b4	89 77 50	 mov	 DWORD PTR [edi+80], esi
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5d		 pop	 ebp

; 1552 :               return NULL;

  000ba	33 c0		 xor	 eax, eax
  000bc	5b		 pop	 ebx

; 1564 : }

  000bd	c3		 ret	 0
$LN3@member_ent:

; 1551 :               else wam[ChoiceStk].top=(term*)SAVED_lastP(member_ARITY);

  000be	83 c6 e8	 add	 esi, -24		; ffffffe8H
  000c1	89 77 50	 mov	 DWORD PTR [edi+80], esi
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5d		 pop	 ebp

; 1552 :               return NULL;

  000c7	33 c0		 xor	 eax, eax
  000c9	5b		 pop	 ebx

; 1564 : }

  000ca	c3		 ret	 0
_member_entry ENDP
_TEXT	ENDS
PUBLIC	_for_entry
; Function compile flags: /Ogtpy
;	COMDAT _for_entry
_TEXT	SEGMENT
_i$ = -4						; size = 4
_H$ = 8							; size = 4
_regs$ = 12						; size = 4
_wam$ = 16						; size = 4
_from$ = 20						; size = 4
_A$ = 20						; size = 4
_for_entry PROC						; COMDAT

; 1568 : {

  00000	51		 push	 ecx

; 1569 :    register term xref; register cell i,from,to;
; 1570 : 
; 1571 :    if(g.for_entry != (instr)SAVED_P)

  00001	a1 1c 00 00 00	 mov	 eax, DWORD PTR _g+28
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	56		 push	 esi
  00009	8b 74 24 20	 mov	 esi, DWORD PTR _A$[esp+12]
  0000d	57		 push	 edi

; 1572 :      {
; 1573 :        wam[ChoiceStk].top=A;

  0000e	8b 7c 24 20	 mov	 edi, DWORD PTR _wam$[esp+16]
  00012	3b 06		 cmp	 eax, DWORD PTR [esi]
  00014	0f 84 fa 00 00
	00		 je	 $LN19@for_entry
  0001a	89 77 50	 mov	 DWORD PTR [edi+80], esi

; 1574 : 
; 1575 :        FDEREF3(SAVED_An(for_ARITY,1),xref,i);

  0001d	8b 46 e8	 mov	 eax, DWORD PTR [esi-24]
  00020	a8 03		 test	 al, 3
  00022	74 08		 je	 SHORT $LN22@for_entry
  00024	8b d0		 mov	 edx, eax
  00026	89 54 24 10	 mov	 DWORD PTR _i$[esp+20], edx
  0002a	eb 24		 jmp	 SHORT $LN15@for_entry
$LN22@for_entry:
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	89 4c 24 10	 mov	 DWORD PTR _i$[esp+20], ecx
  00032	f6 c1 03	 test	 cl, 3
  00035	75 15		 jne	 SHORT $LN28@for_entry
$LL16@for_entry:
  00037	3b 44 24 10	 cmp	 eax, DWORD PTR _i$[esp+20]
  0003b	74 0f		 je	 SHORT $LN28@for_entry
  0003d	8b 44 24 10	 mov	 eax, DWORD PTR _i$[esp+20]
  00041	8b 08		 mov	 ecx, DWORD PTR [eax]
  00043	89 4c 24 10	 mov	 DWORD PTR _i$[esp+20], ecx
  00047	f6 c1 03	 test	 cl, 3
  0004a	74 eb		 je	 SHORT $LL16@for_entry
$LN28@for_entry:
  0004c	8b 54 24 10	 mov	 edx, DWORD PTR _i$[esp+20]
$LN15@for_entry:

; 1576 :        if(NONVAR(i)) return NULL;

  00050	f6 c2 03	 test	 dl, 3
  00053	0f 85 f8 00 00
	00		 jne	 $LN31@for_entry

; 1577 :        SAVED_An(for_ARITY,1)=C2T(i);
; 1578 : 
; 1579 :        FDEREF3(SAVED_An(for_ARITY,2),xref,from);

  00059	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
  0005c	89 56 e8	 mov	 DWORD PTR [esi-24], edx
  0005f	a8 03		 test	 al, 3
  00061	74 08		 je	 SHORT $LN23@for_entry
  00063	8b e8		 mov	 ebp, eax
  00065	89 6c 24 24	 mov	 DWORD PTR _from$[esp+16], ebp
  00069	eb 24		 jmp	 SHORT $LN10@for_entry
$LN23@for_entry:
  0006b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006d	89 4c 24 24	 mov	 DWORD PTR _from$[esp+16], ecx
  00071	f6 c1 03	 test	 cl, 3
  00074	75 15		 jne	 SHORT $LN29@for_entry
$LL11@for_entry:
  00076	3b 44 24 24	 cmp	 eax, DWORD PTR _from$[esp+16]
  0007a	74 0f		 je	 SHORT $LN29@for_entry
  0007c	8b 44 24 24	 mov	 eax, DWORD PTR _from$[esp+16]
  00080	8b 08		 mov	 ecx, DWORD PTR [eax]
  00082	89 4c 24 24	 mov	 DWORD PTR _from$[esp+16], ecx
  00086	f6 c1 03	 test	 cl, 3
  00089	74 eb		 je	 SHORT $LL11@for_entry
$LN29@for_entry:
  0008b	8b 6c 24 24	 mov	 ebp, DWORD PTR _from$[esp+16]
$LN10@for_entry:

; 1580 :        if(!INTEGER(from)) return NULL;

  0008f	8b cd		 mov	 ecx, ebp
  00091	80 e1 03	 and	 cl, 3
  00094	80 f9 01	 cmp	 cl, 1
  00097	0f 85 b4 00 00
	00		 jne	 $LN31@for_entry

; 1581 :        SAVED_An(for_ARITY,2)=C2T(from);
; 1582 : 
; 1583 :        FDEREF3(SAVED_An(for_ARITY,3),xref,to);

  0009d	8b 46 f0	 mov	 eax, DWORD PTR [esi-16]
  000a0	89 6e ec	 mov	 DWORD PTR [esi-20], ebp
  000a3	a8 03		 test	 al, 3
  000a5	74 04		 je	 SHORT $LN24@for_entry
  000a7	8b d8		 mov	 ebx, eax
  000a9	eb 14		 jmp	 SHORT $LN5@for_entry
$LN24@for_entry:
  000ab	8b 18		 mov	 ebx, DWORD PTR [eax]
  000ad	f6 c3 03	 test	 bl, 3
  000b0	75 0d		 jne	 SHORT $LN5@for_entry
$LL6@for_entry:
  000b2	3b c3		 cmp	 eax, ebx
  000b4	74 09		 je	 SHORT $LN5@for_entry
  000b6	8b c3		 mov	 eax, ebx
  000b8	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  000ba	f6 c3 03	 test	 bl, 3
  000bd	74 f3		 je	 SHORT $LL6@for_entry
$LN5@for_entry:

; 1584 :        if(!INTEGER(to)) return NULL;

  000bf	8b c3		 mov	 eax, ebx
  000c1	24 03		 and	 al, 3
  000c3	3c 01		 cmp	 al, 1
  000c5	0f 85 86 00 00
	00		 jne	 $LN31@for_entry

; 1585 :        SAVED_An(for_ARITY,3)=C2T(to);

  000cb	89 5e f0	 mov	 DWORD PTR [esi-16], ebx

; 1586 : 
; 1587 :        SAVED_P = (term)g.for_entry;

  000ce	8b 0d 1c 00 00
	00		 mov	 ecx, DWORD PTR _g+28
  000d4	89 0e		 mov	 DWORD PTR [esi], ecx

; 1588 : 
; 1589 : #if 1
; 1590 :        TRAIL_IT(C2T(i)); /* added for optimisation by Bart */

  000d6	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000d9	3b 47 38	 cmp	 eax, DWORD PTR [edi+56]
  000dc	72 20		 jb	 SHORT $LN30@for_entry
  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OCCOLGAN@trailing?5in?5unify?$AA@
  000e3	57		 push	 edi
  000e4	6a 01		 push	 1
  000e6	50		 push	 eax
  000e7	e8 00 00 00 00	 call	 _overflow_by
  000ec	6a 0c		 push	 12			; 0000000cH
  000ee	e8 00 00 00 00	 call	 _bp_halt
  000f3	8b 6c 24 38	 mov	 ebp, DWORD PTR _from$[esp+36]
  000f7	8b 54 24 24	 mov	 edx, DWORD PTR _i$[esp+40]
  000fb	83 c4 14	 add	 esp, 20			; 00000014H
$LN30@for_entry:
  000fe	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00101	89 10		 mov	 DWORD PTR [eax], edx
  00103	b8 04 00 00 00	 mov	 eax, 4
  00108	01 47 2c	 add	 DWORD PTR [edi+44], eax

; 1591 :        SAVED_TR++ ; /* added for optimisation by Bart */

  0010b	01 46 fc	 add	 DWORD PTR [esi-4], eax

; 1592 : #endif
; 1593 : 
; 1594 :      }
; 1595 :    else

  0010e	8b 44 24 18	 mov	 eax, DWORD PTR _H$[esp+16]
  00112	eb 2b		 jmp	 SHORT $LN2@for_entry
$LN19@for_entry:

; 1596 :      {
; 1597 :        TR_TOP=unwind_trail(TR_TOP,(term *)SAVED_TR);

  00114	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00117	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  0011a	51		 push	 ecx
  0011b	52		 push	 edx
  0011c	e8 00 00 00 00	 call	 _unwind_trail
  00121	89 47 2c	 mov	 DWORD PTR [edi+44], eax

; 1598 :        H=SAVED_H;
; 1599 :        i = T2C(SAVED_An(for_ARITY,1)); /* arg 1 of for */
; 1600 :        from = T2C(SAVED_An(for_ARITY,2));   /* arg 2 of for */

  00124	8b 56 ec	 mov	 edx, DWORD PTR [esi-20]
  00127	8b 4e e8	 mov	 ecx, DWORD PTR [esi-24]
  0012a	8b 46 f8	 mov	 eax, DWORD PTR [esi-8]

; 1601 :        to = T2C(SAVED_An(for_ARITY,3));   /* arg 3 of for */

  0012d	8b 5e f0	 mov	 ebx, DWORD PTR [esi-16]
  00130	89 54 24 2c	 mov	 DWORD PTR _from$[esp+24], edx
  00134	8b ea		 mov	 ebp, edx
  00136	83 c4 08	 add	 esp, 8
  00139	89 4c 24 10	 mov	 DWORD PTR _i$[esp+20], ecx
  0013d	8b d1		 mov	 edx, ecx
$LN2@for_entry:

; 1602 :      }
; 1603 :    if(OUTPUT_INT(from) > OUTPUT_INT(to))

  0013f	8b cd		 mov	 ecx, ebp
  00141	c1 f9 02	 sar	 ecx, 2
  00144	c1 fb 02	 sar	 ebx, 2
  00147	3b cb		 cmp	 ecx, ebx
  00149	7e 0e		 jle	 SHORT $LN1@for_entry

; 1604 :      {
; 1605 :         wam[ChoiceStk].top=(term*)SAVED_lastP(for_ARITY);

  0014b	83 c6 e4	 add	 esi, -28		; ffffffe4H
  0014e	89 77 50	 mov	 DWORD PTR [edi+80], esi
$LN31@for_entry:

; 1606 :         return NULL;

  00151	5f		 pop	 edi
  00152	5e		 pop	 esi
  00153	5d		 pop	 ebp
  00154	33 c0		 xor	 eax, eax
  00156	5b		 pop	 ebx

; 1618 :    return H;
; 1619 : }

  00157	59		 pop	 ecx
  00158	c3		 ret	 0
$LN1@for_entry:

; 1607 :       }
; 1608 :     SETREF(i,from);
; 1609 : 
; 1610 : #if 0
; 1611 :     TRAIL_IT(C2T(i)); /*  removed for optimisation by Bart */
; 1612 : #endif
; 1613 : 
; 1614 :     from=INPUT_INT(OUTPUT_INT(from)+1);

  00159	8d 0c 8d 04 00
	00 00		 lea	 ecx, DWORD PTR [ecx*4+4]
  00160	89 2a		 mov	 DWORD PTR [edx], ebp

; 1615 :     SAVED_An(for_ARITY,2)=C2T(from);
; 1616 : 
; 1617 :    regs[1] = T2C(SAVED_Cont);

  00162	8b 56 f4	 mov	 edx, DWORD PTR [esi-12]
  00165	83 c9 01	 or	 ecx, 1
  00168	5f		 pop	 edi
  00169	89 4e ec	 mov	 DWORD PTR [esi-20], ecx
  0016c	8b 4c 24 18	 mov	 ecx, DWORD PTR _regs$[esp+12]
  00170	5e		 pop	 esi
  00171	5d		 pop	 ebp
  00172	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00175	5b		 pop	 ebx

; 1618 :    return H;
; 1619 : }

  00176	59		 pop	 ecx
  00177	c3		 ret	 0
_for_entry ENDP
_TEXT	ENDS
PUBLIC	??_C@_09ELALGGOE@BAD_QUEUE?$AA@			; `string'
PUBLIC	??_C@_0BC@LAKIGKHP@BAD_TAIL_IN_addq0?$AA@	; `string'
PUBLIC	??_C@_0M@NDBDODKD@BB_OVERFLOW?$AA@		; `string'
PUBLIC	??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@ ; `string'
PUBLIC	_addq0
;	COMDAT ??_C@_09ELALGGOE@BAD_QUEUE?$AA@
CONST	SEGMENT
??_C@_09ELALGGOE@BAD_QUEUE?$AA@ DB 'BAD_QUEUE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAKIGKHP@BAD_TAIL_IN_addq0?$AA@
CONST	SEGMENT
??_C@_0BC@LAKIGKHP@BAD_TAIL_IN_addq0?$AA@ DB 'BAD_TAIL_IN_addq0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NDBDODKD@BB_OVERFLOW?$AA@
CONST	SEGMENT
??_C@_0M@NDBDODKD@BB_OVERFLOW?$AA@ DB 'BB_OVERFLOW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
CONST	SEGMENT
??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@ DB 'irrecoverabl'
	DB	'e error in error handler', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _addq0
_TEXT	SEGMENT
_wam$ = 8						; size = 4
_queue$ = 12						; size = 4
_elem$ = 16						; size = 4
_addq0	PROC						; COMDAT

; 1674 :   register term H=(term)g.shared[BBoardStk].top;
; 1675 :   register term maxH=(term)g.shared[BBoardStk].margin;

  00000	a1 ac 01 00 00	 mov	 eax, DWORD PTR _g+428
  00005	56		 push	 esi
  00006	8b 35 a0 01 00
	00		 mov	 esi, DWORD PTR _g+416

; 1676 :   register cell tail;
; 1677 :   if(H>maxH) BP_ERROR(BB_OVERFLOW,"BB_OVERFLOW",queue,elem,0)

  0000c	3b f0		 cmp	 esi, eax
  0000e	76 5c		 jbe	 SHORT $LN23@addq0
  00010	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  00017	74 14		 je	 SHORT $LN24@addq0
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  0001e	e8 00 00 00 00	 call	 _warnmes
  00023	6a 65		 push	 101			; 00000065H
  00025	e8 00 00 00 00	 call	 _bp_halt
  0002a	83 c4 08	 add	 esp, 8
$LN24@addq0:
  0002d	6a 00		 push	 0
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NDBDODKD@BB_OVERFLOW?$AA@
  00034	c7 05 5c 01 00
	00 95 01 00 00	 mov	 DWORD PTR _g+348, 405	; 00000195H
  0003e	e8 00 00 00 00	 call	 _new_func
  00043	8b 4c 24 18	 mov	 ecx, DWORD PTR _elem$[esp+8]
  00047	8b 54 24 10	 mov	 edx, DWORD PTR _wam$[esp+8]
  0004b	a3 60 01 00 00	 mov	 DWORD PTR _g+352, eax
  00050	8b 44 24 14	 mov	 eax, DWORD PTR _queue$[esp+8]
  00054	83 c4 08	 add	 esp, 8
  00057	a3 64 01 00 00	 mov	 DWORD PTR _g+356, eax
  0005c	89 0d 68 01 00
	00		 mov	 DWORD PTR _g+360, ecx
  00062	89 15 6c 01 00
	00		 mov	 DWORD PTR _g+364, edx
  00068	33 c0		 xor	 eax, eax
  0006a	5e		 pop	 esi

; 1716 : }

  0006b	c3		 ret	 0
$LN23@addq0:
  0006c	53		 push	 ebx
  0006d	55		 push	 ebp
  0006e	57		 push	 edi

; 1678 :   QINIT(g.shared[BBoardStk])

  0006f	8b 7c 24 18	 mov	 edi, DWORD PTR _queue$[esp+12]
  00073	8b cf		 mov	 ecx, edi
  00075	83 e1 03	 and	 ecx, 3
  00078	0f 85 a4 00 00
	00		 jne	 $LN22@addq0
  0007e	3b 3f		 cmp	 edi, DWORD PTR [edi]
  00080	0f 85 9c 00 00
	00		 jne	 $LN22@addq0
  00086	8b 5c 24 1c	 mov	 ebx, DWORD PTR _elem$[esp+12]
  0008a	f6 c3 03	 test	 bl, 3
  0008d	75 5e		 jne	 SHORT $LN21@addq0
  0008f	8b 6c 24 14	 mov	 ebp, DWORD PTR _wam$[esp+12]
  00093	55		 push	 ebp
  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	56		 push	 esi
  00097	8b cb		 mov	 ecx, ebx
  00099	e8 00 00 00 00	 call	 _copy_term0
  0009e	83 c4 10	 add	 esp, 16			; 00000010H
  000a1	85 c0		 test	 eax, eax
  000a3	75 44		 jne	 SHORT $LN18@addq0
  000a5	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  000ac	74 14		 je	 SHORT $LN19@addq0
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  000b3	e8 00 00 00 00	 call	 _warnmes
  000b8	6a 65		 push	 101			; 00000065H
  000ba	e8 00 00 00 00	 call	 _bp_halt
  000bf	83 c4 08	 add	 esp, 8
$LN19@addq0:
  000c2	6a 00		 push	 0
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NDBDODKD@BB_OVERFLOW?$AA@
  000c9	c7 05 5c 01 00
	00 95 01 00 00	 mov	 DWORD PTR _g+348, 405	; 00000195H
  000d3	e8 00 00 00 00	 call	 _new_func
  000d8	89 1d 68 01 00
	00		 mov	 DWORD PTR _g+360, ebx
  000de	89 2d 6c 01 00
	00		 mov	 DWORD PTR _g+364, ebp
  000e4	e9 d7 01 00 00	 jmp	 $LN39@addq0
$LN18@addq0:
  000e9	8b de		 mov	 ebx, esi
  000eb	8b f0		 mov	 esi, eax
$LN21@addq0:
  000ed	89 37		 mov	 DWORD PTR [edi], esi
  000ef	a1 28 00 00 00	 mov	 eax, DWORD PTR _g+40
  000f4	89 06		 mov	 DWORD PTR [esi], eax
  000f6	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  000f9	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000fc	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000ff	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00102	8b 15 24 00 00
	00		 mov	 edx, DWORD PTR _g+36
  00108	5f		 pop	 edi
  00109	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0010c	5d		 pop	 ebp
  0010d	83 c6 18	 add	 esi, 24			; 00000018H
  00110	89 00		 mov	 DWORD PTR [eax], eax
  00112	89 11		 mov	 DWORD PTR [ecx], edx
  00114	5b		 pop	 ebx
  00115	89 35 a0 01 00
	00		 mov	 DWORD PTR _g+416, esi
  0011b	b8 01 00 00 00	 mov	 eax, 1
  00120	5e		 pop	 esi

; 1716 : }

  00121	c3		 ret	 0
$LN22@addq0:

; 1678 :   QINIT(g.shared[BBoardStk])

  00122	85 c9		 test	 ecx, ecx
  00124	0f 85 4f 01 00
	00		 jne	 $LN16@addq0
  0012a	8b 0d 28 00 00
	00		 mov	 ecx, DWORD PTR _g+40
  00130	3b 0f		 cmp	 ecx, DWORD PTR [edi]
  00132	0f 85 41 01 00
	00		 jne	 $LN16@addq0

; 1679 :   RELOCATE_TO_BB(elem)

  00138	8b 5c 24 1c	 mov	 ebx, DWORD PTR _elem$[esp+12]
  0013c	f6 c3 03	 test	 bl, 3
  0013f	75 5e		 jne	 SHORT $LN13@addq0
  00141	8b 6c 24 14	 mov	 ebp, DWORD PTR _wam$[esp+12]
  00145	55		 push	 ebp
  00146	50		 push	 eax
  00147	56		 push	 esi
  00148	56		 push	 esi
  00149	8b cb		 mov	 ecx, ebx
  0014b	e8 00 00 00 00	 call	 _copy_term0
  00150	83 c4 10	 add	 esp, 16			; 00000010H
  00153	85 c0		 test	 eax, eax
  00155	75 44		 jne	 SHORT $LN10@addq0
  00157	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  0015e	74 14		 je	 SHORT $LN11@addq0
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  00165	e8 00 00 00 00	 call	 _warnmes
  0016a	6a 65		 push	 101			; 00000065H
  0016c	e8 00 00 00 00	 call	 _bp_halt
  00171	83 c4 08	 add	 esp, 8
$LN11@addq0:
  00174	6a 00		 push	 0
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NDBDODKD@BB_OVERFLOW?$AA@
  0017b	c7 05 5c 01 00
	00 95 01 00 00	 mov	 DWORD PTR _g+348, 405	; 00000195H
  00185	e8 00 00 00 00	 call	 _new_func
  0018a	89 1d 68 01 00
	00		 mov	 DWORD PTR _g+360, ebx
  00190	89 2d 6c 01 00
	00		 mov	 DWORD PTR _g+364, ebp
  00196	e9 25 01 00 00	 jmp	 $LN39@addq0
$LN10@addq0:
  0019b	8b de		 mov	 ebx, esi
  0019d	8b f0		 mov	 esi, eax
$LN13@addq0:

; 1680 :   tail=QTAIL;
; 1681 :   DEREF1(tail);

  0019f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  001a2	8d 6f 08	 lea	 ebp, DWORD PTR [edi+8]
  001a5	f6 c1 03	 test	 cl, 3
  001a8	75 23		 jne	 SHORT $LN41@addq0
  001aa	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ac	a8 03		 test	 al, 3
  001ae	75 0c		 jne	 SHORT $LN6@addq0
$LL7@addq0:
  001b0	3b c8		 cmp	 ecx, eax
  001b2	74 08		 je	 SHORT $LN6@addq0
  001b4	8b c8		 mov	 ecx, eax
  001b6	8b 00		 mov	 eax, DWORD PTR [eax]
  001b8	a8 03		 test	 al, 3
  001ba	74 f4		 je	 SHORT $LL7@addq0
$LN6@addq0:
  001bc	8b d0		 mov	 edx, eax
  001be	83 e2 03	 and	 edx, 3
  001c1	80 fa 03	 cmp	 dl, 3
  001c4	75 09		 jne	 SHORT $LN28@addq0
  001c6	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  001cb	74 02		 je	 SHORT $LN28@addq0
$LN41@addq0:
  001cd	8b c1		 mov	 eax, ecx
$LN28@addq0:

; 1682 :   if(!FREEVAR(tail))

  001cf	a8 03		 test	 al, 3
  001d1	75 4b		 jne	 SHORT $LN4@addq0
  001d3	3b 00		 cmp	 eax, DWORD PTR [eax]
  001d5	75 47		 jne	 SHORT $LN4@addq0

; 1684 :   if(tail==T2C(queue+2))

  001d7	3b c5		 cmp	 eax, ebp
  001d9	75 1b		 jne	 SHORT $LN1@addq0

; 1685 :   {  /* fixes pointers reversed after breadth-first copy_term
; 1686 :         as [...|Xs]-Ys with Xs --> pointing to --> selfref Ys is BAD
; 1687 :      */
; 1688 : #if 0
; 1689 :      DEREF1(QHEAD);
; 1690 :      DEREF1(QTAIL);
; 1691 : #endif
; 1692 : #if TRACE>1
; 1693 :      /* ERRMES("$$$ queue",T2C(queue)); */
; 1694 :      ERRMES("$$$ QELEM",T2C(C2T(QHEAD)+1));
; 1695 :      ERRMES("$$$ QTAIL",QTAIL);
; 1696 : #endif
; 1697 :      H[0]=g.DIF;      /* reconstructs the queue instead of */

  001db	8b 0d 28 00 00
	00		 mov	 ecx, DWORD PTR _g+40
  001e1	89 0e		 mov	 DWORD PTR [esi], ecx

; 1698 :      H[1]=QHEAD;      /*          traversing it to the end */

  001e3	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  001e6	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1699 :      H[2]=QTAIL;      /* points to old tail */

  001e9	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  001ec	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 1700 : #if 0
; 1701 :      QHEAD=T2C(H+1);  /* redirects old head */
; 1702 :      QTAIL=T2C(H+2);  /* redirects old tail now a var */
; 1703 : #endif
; 1704 :      SETREF(queue,H); /* redirects old queue now a var pointing to H*/

  001ef	89 37		 mov	 DWORD PTR [edi], esi

; 1705 :      queue=H;         /* initializes new queue */

  001f1	8b fe		 mov	 edi, esi

; 1706 :      H+=3;

  001f3	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN1@addq0:

; 1707 :   }
; 1708 :   ASSERT2(ONSTACK(g.shared[BBoardStk],tail),tail);
; 1709 :   SETREF(tail,T2C(H));

  001f6	89 30		 mov	 DWORD PTR [eax], esi

; 1710 :   H[0]=g.DOT;

  001f8	8b 15 24 00 00
	00		 mov	 edx, DWORD PTR _g+36

; 1711 :   H[1]=elem;
; 1712 :   QTAIL=H[2]=T2C(H+2);

  001fe	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00201	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00204	89 16		 mov	 DWORD PTR [esi], edx
  00206	89 00		 mov	 DWORD PTR [eax], eax
  00208	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0020b	5f		 pop	 edi
  0020c	5d		 pop	 ebp

; 1713 :   H+=3;

  0020d	83 c6 0c	 add	 esi, 12			; 0000000cH
  00210	5b		 pop	 ebx

; 1714 :   g.shared[BBoardStk].top=(term*)H;

  00211	89 35 a0 01 00
	00		 mov	 DWORD PTR _g+416, esi

; 1715 :   return TRUE;

  00217	b8 01 00 00 00	 mov	 eax, 1
  0021c	5e		 pop	 esi

; 1716 : }

  0021d	c3		 ret	 0
$LN4@addq0:

; 1683 :      BP_ERROR(BAD_QUEUE,"BAD_TAIL_IN_addq0",queue,NULL,0)

  0021e	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  00225	74 14		 je	 SHORT $LN3@addq0
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  0022c	e8 00 00 00 00	 call	 _warnmes
  00231	6a 67		 push	 103			; 00000067H
  00233	e8 00 00 00 00	 call	 _bp_halt
  00238	83 c4 08	 add	 esp, 8
$LN3@addq0:
  0023b	6a 00		 push	 0
  0023d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LAKIGKHP@BAD_TAIL_IN_addq0?$AA@
  00242	c7 05 5c 01 00
	00 9d 01 00 00	 mov	 DWORD PTR _g+348, 413	; 0000019dH
  0024c	e8 00 00 00 00	 call	 _new_func
  00251	83 c4 08	 add	 esp, 8
  00254	89 3d 64 01 00
	00		 mov	 DWORD PTR _g+356, edi
  0025a	5f		 pop	 edi
  0025b	a3 60 01 00 00	 mov	 DWORD PTR _g+352, eax
  00260	8b 44 24 10	 mov	 eax, DWORD PTR _wam$[esp+8]
  00264	5d		 pop	 ebp
  00265	5b		 pop	 ebx
  00266	a3 6c 01 00 00	 mov	 DWORD PTR _g+364, eax
  0026b	c7 05 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR _g+360, 0
  00275	33 c0		 xor	 eax, eax
  00277	5e		 pop	 esi

; 1716 : }

  00278	c3		 ret	 0
$LN16@addq0:

; 1678 :   QINIT(g.shared[BBoardStk])

  00279	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  00280	74 14		 je	 SHORT $LN15@addq0
  00282	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  00287	e8 00 00 00 00	 call	 _warnmes
  0028c	6a 67		 push	 103			; 00000067H
  0028e	e8 00 00 00 00	 call	 _bp_halt
  00293	83 c4 08	 add	 esp, 8
$LN15@addq0:
  00296	6a 00		 push	 0
  00298	68 00 00 00 00	 push	 OFFSET ??_C@_09ELALGGOE@BAD_QUEUE?$AA@
  0029d	c7 05 5c 01 00
	00 9d 01 00 00	 mov	 DWORD PTR _g+348, 413	; 0000019dH
  002a7	e8 00 00 00 00	 call	 _new_func
  002ac	8b 4c 24 1c	 mov	 ecx, DWORD PTR _wam$[esp+20]
  002b0	c7 05 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR _g+360, 0
  002ba	89 0d 6c 01 00
	00		 mov	 DWORD PTR _g+364, ecx
$LN39@addq0:
  002c0	83 c4 08	 add	 esp, 8
  002c3	89 3d 64 01 00
	00		 mov	 DWORD PTR _g+356, edi
  002c9	5f		 pop	 edi
  002ca	5d		 pop	 ebp
  002cb	5b		 pop	 ebx
  002cc	a3 60 01 00 00	 mov	 DWORD PTR _g+352, eax
  002d1	33 c0		 xor	 eax, eax
  002d3	5e		 pop	 esi

; 1716 : }

  002d4	c3		 ret	 0
_addq0	ENDP
_TEXT	ENDS
PUBLIC	_pushq0
; Function compile flags: /Ogtpy
;	COMDAT _pushq0
_TEXT	SEGMENT
_wam$ = 8						; size = 4
_queue$ = 12						; size = 4
_elem$ = 16						; size = 4
_pushq0	PROC						; COMDAT

; 1722 :   register term H=(term)g.shared[BBoardStk].top;
; 1723 :   register term maxH=(term)g.shared[BBoardStk].margin;

  00000	a1 ac 01 00 00	 mov	 eax, DWORD PTR _g+428
  00005	56		 push	 esi
  00006	8b 35 a0 01 00
	00		 mov	 esi, DWORD PTR _g+416

; 1724 :   if(H>maxH) BP_ERROR(BB_OVERFLOW,"BB_OVERFLOW",queue,elem,0)

  0000c	3b f0		 cmp	 esi, eax
  0000e	76 5c		 jbe	 SHORT $LN18@pushq0
  00010	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  00017	74 14		 je	 SHORT $LN19@pushq0
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  0001e	e8 00 00 00 00	 call	 _warnmes
  00023	6a 65		 push	 101			; 00000065H
  00025	e8 00 00 00 00	 call	 _bp_halt
  0002a	83 c4 08	 add	 esp, 8
$LN19@pushq0:
  0002d	6a 00		 push	 0
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NDBDODKD@BB_OVERFLOW?$AA@
  00034	c7 05 5c 01 00
	00 95 01 00 00	 mov	 DWORD PTR _g+348, 405	; 00000195H
  0003e	e8 00 00 00 00	 call	 _new_func
  00043	8b 4c 24 18	 mov	 ecx, DWORD PTR _elem$[esp+8]
  00047	8b 54 24 10	 mov	 edx, DWORD PTR _wam$[esp+8]
  0004b	a3 60 01 00 00	 mov	 DWORD PTR _g+352, eax
  00050	8b 44 24 14	 mov	 eax, DWORD PTR _queue$[esp+8]
  00054	83 c4 08	 add	 esp, 8
  00057	a3 64 01 00 00	 mov	 DWORD PTR _g+356, eax
  0005c	89 0d 68 01 00
	00		 mov	 DWORD PTR _g+360, ecx
  00062	89 15 6c 01 00
	00		 mov	 DWORD PTR _g+364, edx
  00068	33 c0		 xor	 eax, eax
  0006a	5e		 pop	 esi

; 1736 : }

  0006b	c3		 ret	 0
$LN18@pushq0:
  0006c	53		 push	 ebx
  0006d	55		 push	 ebp

; 1725 :   QINIT(g.shared[BBoardStk])

  0006e	8b 6c 24 14	 mov	 ebp, DWORD PTR _queue$[esp+8]
  00072	8b cd		 mov	 ecx, ebp
  00074	83 e1 03	 and	 ecx, 3
  00077	57		 push	 edi
  00078	0f 85 a6 00 00
	00		 jne	 $LN17@pushq0
  0007e	3b 6d 00	 cmp	 ebp, DWORD PTR [ebp]
  00081	0f 85 9d 00 00
	00		 jne	 $LN17@pushq0
  00087	8b 5c 24 1c	 mov	 ebx, DWORD PTR _elem$[esp+12]
  0008b	f6 c3 03	 test	 bl, 3
  0008e	75 5e		 jne	 SHORT $LN16@pushq0
  00090	8b 7c 24 14	 mov	 edi, DWORD PTR _wam$[esp+12]
  00094	57		 push	 edi
  00095	50		 push	 eax
  00096	56		 push	 esi
  00097	56		 push	 esi
  00098	8b cb		 mov	 ecx, ebx
  0009a	e8 00 00 00 00	 call	 _copy_term0
  0009f	83 c4 10	 add	 esp, 16			; 00000010H
  000a2	85 c0		 test	 eax, eax
  000a4	75 44		 jne	 SHORT $LN13@pushq0
  000a6	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  000ad	74 14		 je	 SHORT $LN14@pushq0
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  000b4	e8 00 00 00 00	 call	 _warnmes
  000b9	6a 65		 push	 101			; 00000065H
  000bb	e8 00 00 00 00	 call	 _bp_halt
  000c0	83 c4 08	 add	 esp, 8
$LN14@pushq0:
  000c3	6a 00		 push	 0
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NDBDODKD@BB_OVERFLOW?$AA@
  000ca	c7 05 5c 01 00
	00 95 01 00 00	 mov	 DWORD PTR _g+348, 405	; 00000195H
  000d4	e8 00 00 00 00	 call	 _new_func
  000d9	89 1d 68 01 00
	00		 mov	 DWORD PTR _g+360, ebx
  000df	89 3d 6c 01 00
	00		 mov	 DWORD PTR _g+364, edi
  000e5	e9 5b 01 00 00	 jmp	 $LN34@pushq0
$LN13@pushq0:
  000ea	8b de		 mov	 ebx, esi
  000ec	8b f0		 mov	 esi, eax
$LN16@pushq0:
  000ee	89 75 00	 mov	 DWORD PTR [ebp], esi
  000f1	a1 28 00 00 00	 mov	 eax, DWORD PTR _g+40
  000f6	89 06		 mov	 DWORD PTR [esi], eax
  000f8	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  000fb	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  000fe	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00101	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00104	8b 15 24 00 00
	00		 mov	 edx, DWORD PTR _g+36
  0010a	5f		 pop	 edi
  0010b	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0010e	5d		 pop	 ebp
  0010f	83 c6 18	 add	 esi, 24			; 00000018H
  00112	89 00		 mov	 DWORD PTR [eax], eax
  00114	89 11		 mov	 DWORD PTR [ecx], edx
  00116	5b		 pop	 ebx
  00117	89 35 a0 01 00
	00		 mov	 DWORD PTR _g+416, esi
  0011d	b8 01 00 00 00	 mov	 eax, 1
  00122	5e		 pop	 esi

; 1736 : }

  00123	c3		 ret	 0
$LN17@pushq0:

; 1725 :   QINIT(g.shared[BBoardStk])

  00124	85 c9		 test	 ecx, ecx
  00126	0f 85 d2 00 00
	00		 jne	 $LN11@pushq0
  0012c	8b 0d 28 00 00
	00		 mov	 ecx, DWORD PTR _g+40
  00132	3b 4d 00	 cmp	 ecx, DWORD PTR [ebp]
  00135	0f 85 c3 00 00
	00		 jne	 $LN11@pushq0

; 1726 :   RELOCATE_TO_BB(elem)

  0013b	8b 5c 24 1c	 mov	 ebx, DWORD PTR _elem$[esp+12]
  0013f	f6 c3 03	 test	 bl, 3
  00142	75 5e		 jne	 SHORT $LN8@pushq0
  00144	8b 7c 24 14	 mov	 edi, DWORD PTR _wam$[esp+12]
  00148	57		 push	 edi
  00149	50		 push	 eax
  0014a	56		 push	 esi
  0014b	56		 push	 esi
  0014c	8b cb		 mov	 ecx, ebx
  0014e	e8 00 00 00 00	 call	 _copy_term0
  00153	83 c4 10	 add	 esp, 16			; 00000010H
  00156	85 c0		 test	 eax, eax
  00158	75 44		 jne	 SHORT $LN5@pushq0
  0015a	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  00161	74 14		 je	 SHORT $LN6@pushq0
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  00168	e8 00 00 00 00	 call	 _warnmes
  0016d	6a 65		 push	 101			; 00000065H
  0016f	e8 00 00 00 00	 call	 _bp_halt
  00174	83 c4 08	 add	 esp, 8
$LN6@pushq0:
  00177	6a 00		 push	 0
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NDBDODKD@BB_OVERFLOW?$AA@
  0017e	c7 05 5c 01 00
	00 95 01 00 00	 mov	 DWORD PTR _g+348, 405	; 00000195H
  00188	e8 00 00 00 00	 call	 _new_func
  0018d	89 1d 68 01 00
	00		 mov	 DWORD PTR _g+360, ebx
  00193	89 3d 6c 01 00
	00		 mov	 DWORD PTR _g+364, edi
  00199	e9 a7 00 00 00	 jmp	 $LN34@pushq0
$LN5@pushq0:
  0019e	8b de		 mov	 ebx, esi
  001a0	8b f0		 mov	 esi, eax
$LN8@pushq0:

; 1727 :   H[0]=g.DOT;

  001a2	8b 15 24 00 00
	00		 mov	 edx, DWORD PTR _g+36
  001a8	89 16		 mov	 DWORD PTR [esi], edx

; 1728 :   H[1]=elem;

  001aa	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 1729 :   DEREF1(QHEAD);

  001ad	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  001b0	f6 c1 03	 test	 cl, 3
  001b3	75 2d		 jne	 SHORT $LN3@pushq0
  001b5	8b 01		 mov	 eax, DWORD PTR [ecx]
  001b7	a8 03		 test	 al, 3
  001b9	75 11		 jne	 SHORT $LN1@pushq0
  001bb	eb 03 8d 49 00	 npad	 5
$LL2@pushq0:
  001c0	3b c8		 cmp	 ecx, eax
  001c2	74 08		 je	 SHORT $LN1@pushq0
  001c4	8b c8		 mov	 ecx, eax
  001c6	8b 00		 mov	 eax, DWORD PTR [eax]
  001c8	a8 03		 test	 al, 3
  001ca	74 f4		 je	 SHORT $LL2@pushq0
$LN1@pushq0:
  001cc	8b d0		 mov	 edx, eax
  001ce	83 e2 03	 and	 edx, 3
  001d1	80 fa 03	 cmp	 dl, 3
  001d4	75 09		 jne	 SHORT $LN23@pushq0
  001d6	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  001db	74 02		 je	 SHORT $LN23@pushq0
  001dd	8b c1		 mov	 eax, ecx
$LN23@pushq0:
  001df	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$LN3@pushq0:

; 1730 :   ASSERT2(ONSTACK(g.shared[BBoardStk],QHEAD),QHEAD);
; 1731 :   H[2]=QHEAD;

  001e2	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  001e5	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1732 :   QHEAD=T2C(H);

  001e8	89 75 04	 mov	 DWORD PTR [ebp+4], esi
  001eb	5f		 pop	 edi
  001ec	5d		 pop	 ebp

; 1733 :   H+=3;

  001ed	83 c6 0c	 add	 esi, 12			; 0000000cH
  001f0	5b		 pop	 ebx

; 1734 :   g.shared[BBoardStk].top=(term*)H;

  001f1	89 35 a0 01 00
	00		 mov	 DWORD PTR _g+416, esi

; 1735 :   return TRUE;

  001f7	b8 01 00 00 00	 mov	 eax, 1
  001fc	5e		 pop	 esi

; 1736 : }

  001fd	c3		 ret	 0
$LN11@pushq0:

; 1725 :   QINIT(g.shared[BBoardStk])

  001fe	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  00205	74 14		 je	 SHORT $LN10@pushq0
  00207	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  0020c	e8 00 00 00 00	 call	 _warnmes
  00211	6a 67		 push	 103			; 00000067H
  00213	e8 00 00 00 00	 call	 _bp_halt
  00218	83 c4 08	 add	 esp, 8
$LN10@pushq0:
  0021b	6a 00		 push	 0
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_09ELALGGOE@BAD_QUEUE?$AA@
  00222	c7 05 5c 01 00
	00 9d 01 00 00	 mov	 DWORD PTR _g+348, 413	; 0000019dH
  0022c	e8 00 00 00 00	 call	 _new_func
  00231	8b 4c 24 1c	 mov	 ecx, DWORD PTR _wam$[esp+20]
  00235	c7 05 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR _g+360, 0
  0023f	89 0d 6c 01 00
	00		 mov	 DWORD PTR _g+364, ecx
$LN34@pushq0:
  00245	83 c4 08	 add	 esp, 8
  00248	5f		 pop	 edi
  00249	89 2d 64 01 00
	00		 mov	 DWORD PTR _g+356, ebp
  0024f	5d		 pop	 ebp
  00250	5b		 pop	 ebx
  00251	a3 60 01 00 00	 mov	 DWORD PTR _g+352, eax
  00256	33 c0		 xor	 eax, eax
  00258	5e		 pop	 esi

; 1736 : }

  00259	c3		 ret	 0
_pushq0	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@CKDLDIIO@HEAP_OVERFLOW?$AA@		; `string'
PUBLIC	_popq0
;	COMDAT ??_C@_0O@CKDLDIIO@HEAP_OVERFLOW?$AA@
CONST	SEGMENT
??_C@_0O@CKDLDIIO@HEAP_OVERFLOW?$AA@ DB 'HEAP_OVERFLOW', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _popq0
_TEXT	SEGMENT
tv231 = -4						; size = 4
_newstk$ = 8						; size = 4
_wam$ = 12						; size = 4
_queue$ = 16						; size = 4
_popq0	PROC						; COMDAT

; 1740 : { term elem;

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1741 :   QCHECK(g.shared[BBoardStk])

  00002	8b 5c 24 14	 mov	 ebx, DWORD PTR _queue$[esp+4]
  00006	f6 c3 03	 test	 bl, 3
  00009	0f 85 14 02 00
	00		 jne	 $LN26@popq0
  0000f	a1 28 00 00 00	 mov	 eax, DWORD PTR _g+40
  00014	3b 03		 cmp	 eax, DWORD PTR [ebx]
  00016	0f 85 07 02 00
	00		 jne	 $LN26@popq0

; 1742 :   DEREF1(QHEAD);

  0001c	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001f	f6 c1 03	 test	 cl, 3
  00022	75 2e		 jne	 SHORT $LN44@popq0
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	a8 03		 test	 al, 3
  00028	75 12		 jne	 SHORT $LN20@popq0
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL21@popq0:
  00030	3b c8		 cmp	 ecx, eax
  00032	74 08		 je	 SHORT $LN20@popq0
  00034	8b c8		 mov	 ecx, eax
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	a8 03		 test	 al, 3
  0003a	74 f4		 je	 SHORT $LL21@popq0
$LN20@popq0:
  0003c	8b d0		 mov	 edx, eax
  0003e	83 e2 03	 and	 edx, 3
  00041	80 fa 03	 cmp	 dl, 3
  00044	75 09		 jne	 SHORT $LN30@popq0
  00046	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  0004b	74 02		 je	 SHORT $LN30@popq0
  0004d	8b c1		 mov	 eax, ecx
$LN30@popq0:
  0004f	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN44@popq0:

; 1743 :   if(NONVAR(QHEAD)) BP_ERROR(BAD_QUEUE,"BAD_QUEUE",queue,NULL,0)

  00052	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00055	89 4c 24 04	 mov	 DWORD PTR tv231[esp+8], ecx
  00059	f6 c1 03	 test	 cl, 3
  0005c	74 59		 je	 SHORT $LN17@popq0
  0005e	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  00065	74 14		 je	 SHORT $LN18@popq0
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  0006c	e8 00 00 00 00	 call	 _warnmes
  00071	6a 67		 push	 103			; 00000067H
  00073	e8 00 00 00 00	 call	 _bp_halt
  00078	83 c4 08	 add	 esp, 8
$LN18@popq0:
  0007b	6a 00		 push	 0
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_09ELALGGOE@BAD_QUEUE?$AA@
  00082	c7 05 5c 01 00
	00 9d 01 00 00	 mov	 DWORD PTR _g+348, 413	; 0000019dH
  0008c	e8 00 00 00 00	 call	 _new_func
  00091	a3 60 01 00 00	 mov	 DWORD PTR _g+352, eax
  00096	8b 44 24 18	 mov	 eax, DWORD PTR _wam$[esp+12]
  0009a	83 c4 08	 add	 esp, 8
  0009d	89 1d 64 01 00
	00		 mov	 DWORD PTR _g+356, ebx
  000a3	c7 05 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR _g+360, 0
  000ad	a3 6c 01 00 00	 mov	 DWORD PTR _g+364, eax
$LN48@popq0:
  000b2	33 c0		 xor	 eax, eax
  000b4	5b		 pop	 ebx

; 1759 : }

  000b5	59		 pop	 ecx
  000b6	c3		 ret	 0
$LN17@popq0:

; 1744 :   ASSERT2(ONSTACK(g.shared[BBoardStk],QHEAD),QHEAD);
; 1745 : 
; 1746 :   DEREF1(QTAIL);

  000b7	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000ba	f6 c2 03	 test	 dl, 3
  000bd	75 2c		 jne	 SHORT $LN15@popq0
  000bf	8b 02		 mov	 eax, DWORD PTR [edx]
  000c1	a8 03		 test	 al, 3
  000c3	75 0c		 jne	 SHORT $LN13@popq0
$LL14@popq0:
  000c5	3b d0		 cmp	 edx, eax
  000c7	74 08		 je	 SHORT $LN13@popq0
  000c9	8b d0		 mov	 edx, eax
  000cb	8b 00		 mov	 eax, DWORD PTR [eax]
  000cd	a8 03		 test	 al, 3
  000cf	74 f4		 je	 SHORT $LL14@popq0
$LN13@popq0:
  000d1	8b c8		 mov	 ecx, eax
  000d3	83 e1 03	 and	 ecx, 3
  000d6	80 f9 03	 cmp	 cl, 3
  000d9	75 09		 jne	 SHORT $LN32@popq0
  000db	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  000e0	74 02		 je	 SHORT $LN32@popq0
  000e2	8b c2		 mov	 eax, edx
$LN32@popq0:
  000e4	8b 4c 24 04	 mov	 ecx, DWORD PTR tv231[esp+8]
  000e8	89 43 08	 mov	 DWORD PTR [ebx+8], eax
$LN15@popq0:

; 1747 :   if(NONVAR(QTAIL)) BP_ERROR(BAD_QUEUE,"BAD_QUEUE",queue,NULL,0)

  000eb	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000ee	a8 03		 test	 al, 3
  000f0	74 5a		 je	 SHORT $LN10@popq0
  000f2	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  000f9	74 14		 je	 SHORT $LN11@popq0
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  00100	e8 00 00 00 00	 call	 _warnmes
  00105	6a 67		 push	 103			; 00000067H
  00107	e8 00 00 00 00	 call	 _bp_halt
  0010c	83 c4 08	 add	 esp, 8
$LN11@popq0:
  0010f	6a 00		 push	 0
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_09ELALGGOE@BAD_QUEUE?$AA@
  00116	c7 05 5c 01 00
	00 9d 01 00 00	 mov	 DWORD PTR _g+348, 413	; 0000019dH
  00120	e8 00 00 00 00	 call	 _new_func
  00125	8b 54 24 18	 mov	 edx, DWORD PTR _wam$[esp+12]
  00129	83 c4 08	 add	 esp, 8
  0012c	a3 60 01 00 00	 mov	 DWORD PTR _g+352, eax
  00131	89 1d 64 01 00
	00		 mov	 DWORD PTR _g+356, ebx
  00137	c7 05 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR _g+360, 0
  00141	89 15 6c 01 00
	00		 mov	 DWORD PTR _g+364, edx
  00147	33 c0		 xor	 eax, eax
  00149	5b		 pop	 ebx

; 1759 : }

  0014a	59		 pop	 ecx
  0014b	c3		 ret	 0
$LN10@popq0:

; 1748 :   ASSERT2(ONSTACK(g.shared[BBoardStk],QTAIL),QTAIL);
; 1749 : 
; 1750 :   if(QHEAD==QTAIL) return NULL; /* empty but otherwise valid */

  0014c	3b c8		 cmp	 ecx, eax
  0014e	0f 84 5e ff ff
	ff		 je	 $LN48@popq0

; 1751 :   ASSERT2(g.DOT==GETREF(C2T(QHEAD)),GETREF(C2T(QHEAD)))
; 1752 :   elem=C2T(GETREF(C2T(QHEAD)+1));

  00154	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]

; 1753 :   { cell next=T2C((C2T(QHEAD)+2));

  00157	83 c1 08	 add	 ecx, 8

; 1754 :     DEREF1(next);

  0015a	f6 c1 03	 test	 cl, 3
  0015d	75 25		 jne	 SHORT $LN35@popq0
  0015f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00161	a8 03		 test	 al, 3
  00163	75 0c		 jne	 SHORT $LN5@popq0
$LL6@popq0:
  00165	3b c8		 cmp	 ecx, eax
  00167	74 08		 je	 SHORT $LN5@popq0
  00169	8b c8		 mov	 ecx, eax
  0016b	8b 00		 mov	 eax, DWORD PTR [eax]
  0016d	a8 03		 test	 al, 3
  0016f	74 f4		 je	 SHORT $LL6@popq0
$LN5@popq0:
  00171	8b d0		 mov	 edx, eax
  00173	83 e2 03	 and	 edx, 3
  00176	80 fa 03	 cmp	 dl, 3
  00179	75 07		 jne	 SHORT $LN34@popq0
  0017b	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  00180	75 02		 jne	 SHORT $LN35@popq0
$LN34@popq0:
  00182	8b c8		 mov	 ecx, eax
$LN35@popq0:

; 1755 :     QHEAD=next;

  00184	8b 44 24 14	 mov	 eax, DWORD PTR _queue$[esp+4]
  00188	55		 push	 ebp

; 1756 :   }
; 1757 :   RELOCATE_TO_TARGET(newstk,elem);

  00189	8b 6c 24 14	 mov	 ebp, DWORD PTR _wam$[esp+8]
  0018d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00190	8b 4c 24 10	 mov	 ecx, DWORD PTR _newstk$[esp+8]
  00194	56		 push	 esi
  00195	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  00198	8b 74 8d 08	 mov	 esi, DWORD PTR [ebp+ecx*4+8]
  0019c	57		 push	 edi
  0019d	8d 7c 8d 00	 lea	 edi, DWORD PTR [ebp+ecx*4]
  001a1	f6 c3 03	 test	 bl, 3
  001a4	75 72		 jne	 SHORT $LN4@popq0
  001a6	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  001a9	55		 push	 ebp
  001aa	50		 push	 eax
  001ab	56		 push	 esi
  001ac	56		 push	 esi
  001ad	8b cb		 mov	 ecx, ebx
  001af	e8 00 00 00 00	 call	 _copy_term0
  001b4	83 c4 10	 add	 esp, 16			; 00000010H
  001b7	85 c0		 test	 eax, eax
  001b9	75 59		 jne	 SHORT $LN1@popq0
  001bb	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  001c2	74 14		 je	 SHORT $LN2@popq0
  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  001c9	e8 00 00 00 00	 call	 _warnmes
  001ce	6a 66		 push	 102			; 00000066H
  001d0	e8 00 00 00 00	 call	 _bp_halt
  001d5	83 c4 08	 add	 esp, 8
$LN2@popq0:
  001d8	6a 00		 push	 0
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKDLDIIO@HEAP_OVERFLOW?$AA@
  001df	c7 05 5c 01 00
	00 99 01 00 00	 mov	 DWORD PTR _g+348, 409	; 00000199H
  001e9	e8 00 00 00 00	 call	 _new_func
  001ee	8b 54 24 28	 mov	 edx, DWORD PTR _queue$[esp+24]
  001f2	83 c4 08	 add	 esp, 8
  001f5	5f		 pop	 edi
  001f6	5e		 pop	 esi
  001f7	89 2d 6c 01 00
	00		 mov	 DWORD PTR _g+364, ebp
  001fd	5d		 pop	 ebp
  001fe	a3 60 01 00 00	 mov	 DWORD PTR _g+352, eax
  00203	89 1d 68 01 00
	00		 mov	 DWORD PTR _g+360, ebx
  00209	89 15 64 01 00
	00		 mov	 DWORD PTR _g+356, edx
  0020f	33 c0		 xor	 eax, eax
  00211	5b		 pop	 ebx

; 1759 : }

  00212	59		 pop	 ecx
  00213	c3		 ret	 0
$LN1@popq0:

; 1756 :   }
; 1757 :   RELOCATE_TO_TARGET(newstk,elem);

  00214	8b de		 mov	 ebx, esi
  00216	8b f0		 mov	 esi, eax
$LN4@popq0:
  00218	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0021b	5f		 pop	 edi
  0021c	5e		 pop	 esi
  0021d	5d		 pop	 ebp

; 1758 :   return elem;

  0021e	8b c3		 mov	 eax, ebx
  00220	5b		 pop	 ebx

; 1759 : }

  00221	59		 pop	 ecx
  00222	c3		 ret	 0
$LN26@popq0:

; 1741 :   QCHECK(g.shared[BBoardStk])

  00223	83 3d 5c 01 00
	00 01		 cmp	 DWORD PTR _g+348, 1
  0022a	74 14		 je	 SHORT $LN25@popq0
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DKEENACG@irrecoverable?5error?5in?5error?5han@
  00231	e8 00 00 00 00	 call	 _warnmes
  00236	6a 67		 push	 103			; 00000067H
  00238	e8 00 00 00 00	 call	 _bp_halt
  0023d	83 c4 08	 add	 esp, 8
$LN25@popq0:
  00240	6a 00		 push	 0
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_09ELALGGOE@BAD_QUEUE?$AA@
  00247	c7 05 5c 01 00
	00 9d 01 00 00	 mov	 DWORD PTR _g+348, 413	; 0000019dH
  00251	e8 00 00 00 00	 call	 _new_func
  00256	a3 60 01 00 00	 mov	 DWORD PTR _g+352, eax
  0025b	8b 44 24 18	 mov	 eax, DWORD PTR _wam$[esp+12]
  0025f	83 c4 08	 add	 esp, 8
  00262	89 1d 64 01 00
	00		 mov	 DWORD PTR _g+356, ebx
  00268	a3 6c 01 00 00	 mov	 DWORD PTR _g+364, eax
  0026d	c7 05 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR _g+360, 0
  00277	33 c0		 xor	 eax, eax
  00279	5b		 pop	 ebx

; 1759 : }

  0027a	59		 pop	 ecx
  0027b	c3		 ret	 0
_popq0	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DA@HABGAFOD@bad?5constructor?5starts?52nd?5arg?5o@ ; `string'
PUBLIC	_member_scan
EXTRN	_unify_to:PROC
;	COMDAT ??_C@_0DA@HABGAFOD@bad?5constructor?5starts?52nd?5arg?5o@
CONST	SEGMENT
??_C@_0DA@HABGAFOD@bad?5constructor?5starts?52nd?5arg?5o@ DB 'bad constru'
	DB	'ctor starts 2nd arg of member_scan/3', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _member_scan
_TEXT	SEGMENT
_x$ = 8							; size = 4
_cons$ = 12						; size = 4
_xval$ = 12						; size = 4
_oldtrail$ = 16						; size = 4
_wam$ = 16						; size = 4
_A$ = 20						; size = 4
_member_scan PROC					; COMDAT

; 1764 : {

  00000	53		 push	 ebx

; 1765 :   register term xref;
; 1766 :   register cell cons;
; 1767 :   term *oldtrail=TR_TOP;

  00001	8b 5c 24 10	 mov	 ebx, DWORD PTR _wam$[esp]
  00005	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  00008	55		 push	 ebp
  00009	89 44 24 14	 mov	 DWORD PTR _oldtrail$[esp+4], eax

; 1768 :   if(VAR(xval))

  0000d	8b 44 24 10	 mov	 eax, DWORD PTR _xval$[esp+4]
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a8 03		 test	 al, 3
  00015	75 7f		 jne	 SHORT $LN4@member_sca

; 1769 :     { xref=C2T(xval);

  00017	8b f0		 mov	 esi, eax

; 1770 :       cons=xval=GETREF(xref);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	89 44 24 18	 mov	 DWORD PTR _cons$[esp+12], eax

; 1771 :       if(NONVAR(xval))

  0001f	a8 03		 test	 al, 3
  00021	74 73		 je	 SHORT $LN4@member_sca

; 1772 :         {
; 1773 :           if(2!=GETARITY(cons))

  00023	8b c8		 mov	 ecx, eax
  00025	81 e1 00 00 00
	ff		 and	 ecx, -16777216		; ff000000H
  0002b	81 f9 00 00 00
	02		 cmp	 ecx, 33554432		; 02000000H
  00031	74 14		 je	 SHORT $LN16@member_sca

; 1774 :             return LOCAL_ERR(cons,
; 1775 :               "bad constructor starts 2nd arg of member_scan/3");

  00033	53		 push	 ebx
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@HABGAFOD@bad?5constructor?5starts?52nd?5arg?5o@
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _local_error
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	5b		 pop	 ebx

; 1789 : }

  00046	c3		 ret	 0
$LN16@member_sca:

; 1774 :             return LOCAL_ERR(cons,
; 1775 :               "bad constructor starts 2nd arg of member_scan/3");

  00047	8b 6c 24 20	 mov	 ebp, DWORD PTR _A$[esp+12]
  0004b	eb 03 8d 49 00	 npad	 5
$LL6@member_sca:

; 1776 :           do
; 1777 :             {
; 1778 :               xval=unify_to(T2C(xref+1),T2C(x),wam,A);

  00050	8b 54 24 14	 mov	 edx, DWORD PTR _x$[esp+12]
  00054	55		 push	 ebp
  00055	53		 push	 ebx
  00056	52		 push	 edx
  00057	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _unify_to

; 1779 :               TR_TOP=unwind_trail(TR_TOP,oldtrail);

  00060	8b 4c 24 2c	 mov	 ecx, DWORD PTR _oldtrail$[esp+28]
  00064	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00067	51		 push	 ecx
  00068	52		 push	 edx
  00069	8b f8		 mov	 edi, eax
  0006b	e8 00 00 00 00	 call	 _unwind_trail
  00070	83 c4 18	 add	 esp, 24			; 00000018H
  00073	89 43 2c	 mov	 DWORD PTR [ebx+44], eax

; 1780 :               if(xval)

  00076	85 ff		 test	 edi, edi
  00078	75 23		 jne	 SHORT $LN14@member_sca

; 1782 :               xref+=2;
; 1783 :               DEREF2(xref,xval);

  0007a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0007d	83 c6 08	 add	 esi, 8
  00080	a8 03		 test	 al, 3
  00082	75 0c		 jne	 SHORT $LN5@member_sca
$LL2@member_sca:
  00084	3b f0		 cmp	 esi, eax
  00086	74 08		 je	 SHORT $LN5@member_sca
  00088	8b f0		 mov	 esi, eax
  0008a	8b 00		 mov	 eax, DWORD PTR [eax]
  0008c	a8 03		 test	 al, 3
  0008e	74 f4		 je	 SHORT $LL2@member_sca
$LN5@member_sca:

; 1784 :             }
; 1785 :           while(cons==xval);

  00090	39 44 24 18	 cmp	 DWORD PTR _cons$[esp+12], eax
  00094	74 ba		 je	 SHORT $LL6@member_sca
$LN4@member_sca:
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5d		 pop	 ebp

; 1786 :         }
; 1787 :     }
; 1788 :   return NULL;

  00099	33 c0		 xor	 eax, eax
  0009b	5b		 pop	 ebx

; 1789 : }

  0009c	c3		 ret	 0
$LN14@member_sca:
  0009d	5f		 pop	 edi

; 1781 :                 return xref;

  0009e	8b c6		 mov	 eax, esi
  000a0	5e		 pop	 esi
  000a1	5d		 pop	 ebp
  000a2	5b		 pop	 ebx

; 1789 : }

  000a3	c3		 ret	 0
_member_scan ENDP
_TEXT	ENDS
PUBLIC	_cmember_scan
; Function compile flags: /Ogtpy
;	COMDAT _cmember_scan
_TEXT	SEGMENT
_H$ = 8							; size = 4
_x$ = 12						; size = 4
_xval$ = 16						; size = 4
_wam$ = 20						; size = 4
_A$ = 24						; size = 4
_ok$ = 28						; size = 4
_cmember_scan PROC					; COMDAT

; 1794 :   if(!INTEGER(xval)) {*ok=FALSE; return NULL;}

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _xval$[esp-4]
  00004	53		 push	 ebx
  00005	8b c8		 mov	 ecx, eax
  00007	55		 push	 ebp
  00008	8b 6c 24 0c	 mov	 ebp, DWORD PTR _H$[esp+4]
  0000c	80 e1 03	 and	 cl, 3
  0000f	8b dd		 mov	 ebx, ebp
  00011	80 f9 01	 cmp	 cl, 1
  00014	74 0f		 je	 SHORT $LN9@cmember_sc
  00016	8b 54 24 20	 mov	 edx, DWORD PTR _ok$[esp+4]
  0001a	5d		 pop	 ebp
  0001b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00021	33 c0		 xor	 eax, eax
  00023	5b		 pop	 ebx

; 1810 :   return H;
; 1811 : }

  00024	c3		 ret	 0
$LN9@cmember_sc:

; 1795 :   xval=T2C(INT2PTR(xval));

  00025	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]

; 1796 :   DEREF1(xval);

  00028	f6 c1 03	 test	 cl, 3
  0002b	75 23		 jne	 SHORT $LN23@cmember_sc
  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002f	a8 03		 test	 al, 3
  00031	75 0c		 jne	 SHORT $LN5@cmember_sc
$LL6@cmember_sc:
  00033	3b c8		 cmp	 ecx, eax
  00035	74 08		 je	 SHORT $LN5@cmember_sc
  00037	8b c8		 mov	 ecx, eax
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
  0003b	a8 03		 test	 al, 3
  0003d	74 f4		 je	 SHORT $LL6@cmember_sc
$LN5@cmember_sc:
  0003f	8b d0		 mov	 edx, eax
  00041	83 e2 03	 and	 edx, 3
  00044	80 fa 03	 cmp	 dl, 3
  00047	75 09		 jne	 SHORT $LN12@cmember_sc
  00049	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  0004e	74 02		 je	 SHORT $LN12@cmember_sc
$LN23@cmember_sc:
  00050	8b c1		 mov	 eax, ecx
$LN12@cmember_sc:

; 1797 :   if(!(xref=member_scan(x,xval,wam,A))) return NULL;

  00052	8b 4c 24 1c	 mov	 ecx, DWORD PTR _A$[esp+4]
  00056	8b 54 24 10	 mov	 edx, DWORD PTR _x$[esp+4]
  0005a	56		 push	 esi
  0005b	57		 push	 edi
  0005c	8b 7c 24 20	 mov	 edi, DWORD PTR _wam$[esp+12]
  00060	51		 push	 ecx
  00061	57		 push	 edi
  00062	50		 push	 eax
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 _member_scan
  00069	8b f0		 mov	 esi, eax
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	85 f6		 test	 esi, esi
  00070	74 27		 je	 SHORT $LN22@cmember_sc

; 1798 :   ASSERT1(t==H);
; 1799 :   H+=3;
; 1800 :   x=T2C(H);
; 1801 :   if(!(H= copy_term(xref+1,H,(term)wam[HeapStk].margin+
; 1802 :    (wam[HeapStk].over>>1),wam)))

  00072	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00075	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00078	d1 f8		 sar	 eax, 1
  0007a	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0007d	57		 push	 edi
  0007e	50		 push	 eax
  0007f	83 c5 0c	 add	 ebp, 12			; 0000000cH
  00082	55		 push	 ebp
  00083	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00086	55		 push	 ebp
  00087	e8 00 00 00 00	 call	 _copy_term0
  0008c	83 c4 10	 add	 esp, 16			; 00000010H
  0008f	85 c0		 test	 eax, eax
  00091	75 0d		 jne	 SHORT $LN3@cmember_sc

; 1803 :       {*ok=FALSE; return NULL;}

  00093	8b 54 24 28	 mov	 edx, DWORD PTR _ok$[esp+12]
  00097	89 02		 mov	 DWORD PTR [edx], eax
$LN22@cmember_sc:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	33 c0		 xor	 eax, eax
  0009e	5b		 pop	 ebx

; 1810 :   return H;
; 1811 : }

  0009f	c3		 ret	 0
$LN3@cmember_sc:

; 1804 :   t[0]=xref[0];

  000a0	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1805 :   t[1]=x;
; 1806 :   xref+=2;

  000a2	83 c6 08	 add	 esi, 8
  000a5	89 0b		 mov	 DWORD PTR [ebx], ecx
  000a7	89 6b 04	 mov	 DWORD PTR [ebx+4], ebp

; 1807 :   DEREF2(xref,xval);

  000aa	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ac	f6 c1 03	 test	 cl, 3
  000af	75 0d		 jne	 SHORT $LN1@cmember_sc
$LL2@cmember_sc:
  000b1	3b f1		 cmp	 esi, ecx
  000b3	74 09		 je	 SHORT $LN1@cmember_sc
  000b5	8b f1		 mov	 esi, ecx
  000b7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000b9	f6 c1 03	 test	 cl, 3
  000bc	74 f3		 je	 SHORT $LL2@cmember_sc
$LN1@cmember_sc:

; 1808 :   ASSERT1(VAR(xref));
; 1809 :   t[2]=PTR2INT(xref);

  000be	46		 inc	 esi
  000bf	5f		 pop	 edi
  000c0	89 73 08	 mov	 DWORD PTR [ebx+8], esi
  000c3	5e		 pop	 esi
  000c4	5d		 pop	 ebp
  000c5	5b		 pop	 ebx

; 1810 :   return H;
; 1811 : }

  000c6	c3		 ret	 0
_cmember_scan ENDP
_TEXT	ENDS
PUBLIC	_cdel_scan
; Function compile flags: /Ogtpy
;	COMDAT _cdel_scan
_TEXT	SEGMENT
_H$ = 8							; size = 4
_x$ = 12						; size = 4
_xval$ = 16						; size = 4
_wam$ = 20						; size = 4
_A$ = 24						; size = 4
_ok$ = 28						; size = 4
_cdel_scan PROC						; COMDAT

; 1816 :   if(!INTEGER(xval)) {*ok=FALSE; return NULL;}

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _xval$[esp-4]
  00004	53		 push	 ebx
  00005	8b c8		 mov	 ecx, eax
  00007	55		 push	 ebp
  00008	8b 6c 24 0c	 mov	 ebp, DWORD PTR _H$[esp+4]
  0000c	80 e1 03	 and	 cl, 3
  0000f	8b dd		 mov	 ebx, ebp
  00011	80 f9 01	 cmp	 cl, 1
  00014	74 0f		 je	 SHORT $LN9@cdel_scan
  00016	8b 54 24 20	 mov	 edx, DWORD PTR _ok$[esp+4]
  0001a	5d		 pop	 ebp
  0001b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00021	33 c0		 xor	 eax, eax
  00023	5b		 pop	 ebx

; 1832 :   }
; 1833 :   return H;
; 1834 : }

  00024	c3		 ret	 0
$LN9@cdel_scan:

; 1817 :   xval=T2C(INT2PTR(xval));

  00025	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]

; 1818 :   DEREF1(xval);

  00028	f6 c1 03	 test	 cl, 3
  0002b	75 23		 jne	 SHORT $LN23@cdel_scan
  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002f	a8 03		 test	 al, 3
  00031	75 0c		 jne	 SHORT $LN5@cdel_scan
$LL6@cdel_scan:
  00033	3b c8		 cmp	 ecx, eax
  00035	74 08		 je	 SHORT $LN5@cdel_scan
  00037	8b c8		 mov	 ecx, eax
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
  0003b	a8 03		 test	 al, 3
  0003d	74 f4		 je	 SHORT $LL6@cdel_scan
$LN5@cdel_scan:
  0003f	8b d0		 mov	 edx, eax
  00041	83 e2 03	 and	 edx, 3
  00044	80 fa 03	 cmp	 dl, 3
  00047	75 09		 jne	 SHORT $LN12@cdel_scan
  00049	a9 00 00 00 ff	 test	 eax, -16777216		; ff000000H
  0004e	74 02		 je	 SHORT $LN12@cdel_scan
$LN23@cdel_scan:
  00050	8b c1		 mov	 eax, ecx
$LN12@cdel_scan:

; 1819 :   if(!(xref=member_scan(x,xval,wam,A))) return NULL;

  00052	8b 4c 24 1c	 mov	 ecx, DWORD PTR _A$[esp+4]
  00056	8b 54 24 10	 mov	 edx, DWORD PTR _x$[esp+4]
  0005a	56		 push	 esi
  0005b	57		 push	 edi
  0005c	8b 7c 24 20	 mov	 edi, DWORD PTR _wam$[esp+12]
  00060	51		 push	 ecx
  00061	57		 push	 edi
  00062	50		 push	 eax
  00063	52		 push	 edx
  00064	e8 00 00 00 00	 call	 _member_scan
  00069	8b f0		 mov	 esi, eax
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	85 f6		 test	 esi, esi
  00070	74 27		 je	 SHORT $LN22@cdel_scan

; 1820 :   ASSERT1(t==H);
; 1821 :   H+=3;
; 1822 :   x=T2C(H);
; 1823 :   if(!(H= copy_term(xref+1,H,(term)wam[HeapStk].margin+
; 1824 :    (wam[HeapStk].over>>1),wam))) {*ok=FALSE; return NULL;}

  00072	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00075	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00078	d1 f8		 sar	 eax, 1
  0007a	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0007d	57		 push	 edi
  0007e	50		 push	 eax
  0007f	83 c5 0c	 add	 ebp, 12			; 0000000cH
  00082	55		 push	 ebp
  00083	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00086	55		 push	 ebp
  00087	e8 00 00 00 00	 call	 _copy_term0
  0008c	83 c4 10	 add	 esp, 16			; 00000010H
  0008f	85 c0		 test	 eax, eax
  00091	75 0d		 jne	 SHORT $LN3@cdel_scan
  00093	8b 54 24 28	 mov	 edx, DWORD PTR _ok$[esp+12]
  00097	89 02		 mov	 DWORD PTR [edx], eax
$LN22@cdel_scan:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5d		 pop	 ebp
  0009c	33 c0		 xor	 eax, eax
  0009e	5b		 pop	 ebx

; 1832 :   }
; 1833 :   return H;
; 1834 : }

  0009f	c3		 ret	 0
$LN3@cdel_scan:

; 1825 :   t[0]=xref[0];

  000a0	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1826 :   t[1]=x;
; 1827 :   { register term tail=xref+2;

  000a2	8d 56 08	 lea	 edx, DWORD PTR [esi+8]
  000a5	89 0b		 mov	 DWORD PTR [ebx], ecx
  000a7	89 6b 04	 mov	 DWORD PTR [ebx+4], ebp

; 1828 :     DEREF2(tail,xval);

  000aa	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000ac	f6 c1 03	 test	 cl, 3
  000af	75 0d		 jne	 SHORT $LN1@cdel_scan
$LL2@cdel_scan:
  000b1	3b d1		 cmp	 edx, ecx
  000b3	74 09		 je	 SHORT $LN1@cdel_scan
  000b5	8b d1		 mov	 edx, ecx
  000b7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000b9	f6 c1 03	 test	 cl, 3
  000bc	74 f3		 je	 SHORT $LL2@cdel_scan
$LN1@cdel_scan:

; 1829 :     ASSERT1(VAR(tail));
; 1830 :     t[2]=PTR2INT(tail);

  000be	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  000c1	5f		 pop	 edi
  000c2	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 1831 :     SETREF(xref,tail);

  000c5	89 16		 mov	 DWORD PTR [esi], edx
  000c7	5e		 pop	 esi
  000c8	5d		 pop	 ebp
  000c9	5b		 pop	 ebx

; 1832 :   }
; 1833 :   return H;
; 1834 : }

  000ca	c3		 ret	 0
_cdel_scan ENDP
_TEXT	ENDS
END
